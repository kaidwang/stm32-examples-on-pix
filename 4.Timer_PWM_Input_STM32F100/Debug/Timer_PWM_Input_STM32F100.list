
Timer_PWM_Input_STM32F100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004110  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004374  08004374  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004374  08004374  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004374  08004374  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800437c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080043ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080043ec  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009664  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ec  00000000  00000000  000296fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002aef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cecf  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d82  00000000  00000000  00039337  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051318  00000000  00000000  000410b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000923d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  0009244c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042c8 	.word	0x080042c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080042c8 	.word	0x080042c8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_frsub>:
 8000588:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800058c:	e002      	b.n	8000594 <__addsf3>
 800058e:	bf00      	nop

08000590 <__aeabi_fsub>:
 8000590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000594 <__addsf3>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	bf1f      	itttt	ne
 8000598:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800059c:	ea92 0f03 	teqne	r2, r3
 80005a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005a8:	d06a      	beq.n	8000680 <__addsf3+0xec>
 80005aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005b2:	bfc1      	itttt	gt
 80005b4:	18d2      	addgt	r2, r2, r3
 80005b6:	4041      	eorgt	r1, r0
 80005b8:	4048      	eorgt	r0, r1
 80005ba:	4041      	eorgt	r1, r0
 80005bc:	bfb8      	it	lt
 80005be:	425b      	neglt	r3, r3
 80005c0:	2b19      	cmp	r3, #25
 80005c2:	bf88      	it	hi
 80005c4:	4770      	bxhi	lr
 80005c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4240      	negne	r0, r0
 80005d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005e2:	bf18      	it	ne
 80005e4:	4249      	negne	r1, r1
 80005e6:	ea92 0f03 	teq	r2, r3
 80005ea:	d03f      	beq.n	800066c <__addsf3+0xd8>
 80005ec:	f1a2 0201 	sub.w	r2, r2, #1
 80005f0:	fa41 fc03 	asr.w	ip, r1, r3
 80005f4:	eb10 000c 	adds.w	r0, r0, ip
 80005f8:	f1c3 0320 	rsb	r3, r3, #32
 80005fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000600:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000604:	d502      	bpl.n	800060c <__addsf3+0x78>
 8000606:	4249      	negs	r1, r1
 8000608:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800060c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000610:	d313      	bcc.n	800063a <__addsf3+0xa6>
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d306      	bcc.n	8000626 <__addsf3+0x92>
 8000618:	0840      	lsrs	r0, r0, #1
 800061a:	ea4f 0131 	mov.w	r1, r1, rrx
 800061e:	f102 0201 	add.w	r2, r2, #1
 8000622:	2afe      	cmp	r2, #254	; 0xfe
 8000624:	d251      	bcs.n	80006ca <__addsf3+0x136>
 8000626:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800062a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800062e:	bf08      	it	eq
 8000630:	f020 0001 	biceq.w	r0, r0, #1
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	4770      	bx	lr
 800063a:	0049      	lsls	r1, r1, #1
 800063c:	eb40 0000 	adc.w	r0, r0, r0
 8000640:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000644:	f1a2 0201 	sub.w	r2, r2, #1
 8000648:	d1ed      	bne.n	8000626 <__addsf3+0x92>
 800064a:	fab0 fc80 	clz	ip, r0
 800064e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000652:	ebb2 020c 	subs.w	r2, r2, ip
 8000656:	fa00 f00c 	lsl.w	r0, r0, ip
 800065a:	bfaa      	itet	ge
 800065c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000660:	4252      	neglt	r2, r2
 8000662:	4318      	orrge	r0, r3
 8000664:	bfbc      	itt	lt
 8000666:	40d0      	lsrlt	r0, r2
 8000668:	4318      	orrlt	r0, r3
 800066a:	4770      	bx	lr
 800066c:	f092 0f00 	teq	r2, #0
 8000670:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000674:	bf06      	itte	eq
 8000676:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800067a:	3201      	addeq	r2, #1
 800067c:	3b01      	subne	r3, #1
 800067e:	e7b5      	b.n	80005ec <__addsf3+0x58>
 8000680:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000684:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000688:	bf18      	it	ne
 800068a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800068e:	d021      	beq.n	80006d4 <__addsf3+0x140>
 8000690:	ea92 0f03 	teq	r2, r3
 8000694:	d004      	beq.n	80006a0 <__addsf3+0x10c>
 8000696:	f092 0f00 	teq	r2, #0
 800069a:	bf08      	it	eq
 800069c:	4608      	moveq	r0, r1
 800069e:	4770      	bx	lr
 80006a0:	ea90 0f01 	teq	r0, r1
 80006a4:	bf1c      	itt	ne
 80006a6:	2000      	movne	r0, #0
 80006a8:	4770      	bxne	lr
 80006aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006ae:	d104      	bne.n	80006ba <__addsf3+0x126>
 80006b0:	0040      	lsls	r0, r0, #1
 80006b2:	bf28      	it	cs
 80006b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006b8:	4770      	bx	lr
 80006ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006be:	bf3c      	itt	cc
 80006c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bxcc	lr
 80006c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006d2:	4770      	bx	lr
 80006d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006d8:	bf16      	itet	ne
 80006da:	4608      	movne	r0, r1
 80006dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006e0:	4601      	movne	r1, r0
 80006e2:	0242      	lsls	r2, r0, #9
 80006e4:	bf06      	itte	eq
 80006e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ea:	ea90 0f01 	teqeq	r0, r1
 80006ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_ui2f>:
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	e004      	b.n	8000704 <__aeabi_i2f+0x8>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2f>:
 80006fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	ea5f 0c00 	movs.w	ip, r0
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000710:	4601      	mov	r1, r0
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	e01c      	b.n	8000752 <__aeabi_l2f+0x2a>

08000718 <__aeabi_ul2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	e00a      	b.n	800073c <__aeabi_l2f+0x14>
 8000726:	bf00      	nop

08000728 <__aeabi_l2f>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000734:	d502      	bpl.n	800073c <__aeabi_l2f+0x14>
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	ea5f 0c01 	movs.w	ip, r1
 8000740:	bf02      	ittt	eq
 8000742:	4684      	moveq	ip, r0
 8000744:	4601      	moveq	r1, r0
 8000746:	2000      	moveq	r0, #0
 8000748:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800074c:	bf08      	it	eq
 800074e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000752:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000756:	fabc f28c 	clz	r2, ip
 800075a:	3a08      	subs	r2, #8
 800075c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000760:	db10      	blt.n	8000784 <__aeabi_l2f+0x5c>
 8000762:	fa01 fc02 	lsl.w	ip, r1, r2
 8000766:	4463      	add	r3, ip
 8000768:	fa00 fc02 	lsl.w	ip, r0, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000774:	fa20 f202 	lsr.w	r2, r0, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	f020 0001 	biceq.w	r0, r0, #1
 8000782:	4770      	bx	lr
 8000784:	f102 0220 	add.w	r2, r2, #32
 8000788:	fa01 fc02 	lsl.w	ip, r1, r2
 800078c:	f1c2 0220 	rsb	r2, r2, #32
 8000790:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000794:	fa21 f202 	lsr.w	r2, r1, r2
 8000798:	eb43 0002 	adc.w	r0, r3, r2
 800079c:	bf08      	it	eq
 800079e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a2:	4770      	bx	lr

080007a4 <__aeabi_fmul>:
 80007a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007ac:	bf1e      	ittt	ne
 80007ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007b2:	ea92 0f0c 	teqne	r2, ip
 80007b6:	ea93 0f0c 	teqne	r3, ip
 80007ba:	d06f      	beq.n	800089c <__aeabi_fmul+0xf8>
 80007bc:	441a      	add	r2, r3
 80007be:	ea80 0c01 	eor.w	ip, r0, r1
 80007c2:	0240      	lsls	r0, r0, #9
 80007c4:	bf18      	it	ne
 80007c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ca:	d01e      	beq.n	800080a <__aeabi_fmul+0x66>
 80007cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007d8:	fba0 3101 	umull	r3, r1, r0, r1
 80007dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007e4:	bf3e      	ittt	cc
 80007e6:	0049      	lslcc	r1, r1, #1
 80007e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007ec:	005b      	lslcc	r3, r3, #1
 80007ee:	ea40 0001 	orr.w	r0, r0, r1
 80007f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007f6:	2afd      	cmp	r2, #253	; 0xfd
 80007f8:	d81d      	bhi.n	8000836 <__aeabi_fmul+0x92>
 80007fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	4770      	bx	lr
 800080a:	f090 0f00 	teq	r0, #0
 800080e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000812:	bf08      	it	eq
 8000814:	0249      	lsleq	r1, r1, #9
 8000816:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800081a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800081e:	3a7f      	subs	r2, #127	; 0x7f
 8000820:	bfc2      	ittt	gt
 8000822:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000826:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800082a:	4770      	bxgt	lr
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	3a01      	subs	r2, #1
 8000836:	dc5d      	bgt.n	80008f4 <__aeabi_fmul+0x150>
 8000838:	f112 0f19 	cmn.w	r2, #25
 800083c:	bfdc      	itt	le
 800083e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000842:	4770      	bxle	lr
 8000844:	f1c2 0200 	rsb	r2, r2, #0
 8000848:	0041      	lsls	r1, r0, #1
 800084a:	fa21 f102 	lsr.w	r1, r1, r2
 800084e:	f1c2 0220 	rsb	r2, r2, #32
 8000852:	fa00 fc02 	lsl.w	ip, r0, r2
 8000856:	ea5f 0031 	movs.w	r0, r1, rrx
 800085a:	f140 0000 	adc.w	r0, r0, #0
 800085e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000862:	bf08      	it	eq
 8000864:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000868:	4770      	bx	lr
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000872:	bf02      	ittt	eq
 8000874:	0040      	lsleq	r0, r0, #1
 8000876:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800087a:	3a01      	subeq	r2, #1
 800087c:	d0f9      	beq.n	8000872 <__aeabi_fmul+0xce>
 800087e:	ea40 000c 	orr.w	r0, r0, ip
 8000882:	f093 0f00 	teq	r3, #0
 8000886:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800088a:	bf02      	ittt	eq
 800088c:	0049      	lsleq	r1, r1, #1
 800088e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000892:	3b01      	subeq	r3, #1
 8000894:	d0f9      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000896:	ea41 010c 	orr.w	r1, r1, ip
 800089a:	e78f      	b.n	80007bc <__aeabi_fmul+0x18>
 800089c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008a0:	ea92 0f0c 	teq	r2, ip
 80008a4:	bf18      	it	ne
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d00a      	beq.n	80008c2 <__aeabi_fmul+0x11e>
 80008ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008b0:	bf18      	it	ne
 80008b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008b6:	d1d8      	bne.n	800086a <__aeabi_fmul+0xc6>
 80008b8:	ea80 0001 	eor.w	r0, r0, r1
 80008bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f090 0f00 	teq	r0, #0
 80008c6:	bf17      	itett	ne
 80008c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008cc:	4608      	moveq	r0, r1
 80008ce:	f091 0f00 	teqne	r1, #0
 80008d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008d6:	d014      	beq.n	8000902 <__aeabi_fmul+0x15e>
 80008d8:	ea92 0f0c 	teq	r2, ip
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fmul+0x13e>
 80008de:	0242      	lsls	r2, r0, #9
 80008e0:	d10f      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008e2:	ea93 0f0c 	teq	r3, ip
 80008e6:	d103      	bne.n	80008f0 <__aeabi_fmul+0x14c>
 80008e8:	024b      	lsls	r3, r1, #9
 80008ea:	bf18      	it	ne
 80008ec:	4608      	movne	r0, r1
 80008ee:	d108      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008f0:	ea80 0001 	eor.w	r0, r0, r1
 80008f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000900:	4770      	bx	lr
 8000902:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bx	lr

0800090c <__aeabi_fdiv>:
 800090c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000910:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000914:	bf1e      	ittt	ne
 8000916:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800091a:	ea92 0f0c 	teqne	r2, ip
 800091e:	ea93 0f0c 	teqne	r3, ip
 8000922:	d069      	beq.n	80009f8 <__aeabi_fdiv+0xec>
 8000924:	eba2 0203 	sub.w	r2, r2, r3
 8000928:	ea80 0c01 	eor.w	ip, r0, r1
 800092c:	0249      	lsls	r1, r1, #9
 800092e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000932:	d037      	beq.n	80009a4 <__aeabi_fdiv+0x98>
 8000934:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000938:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800093c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000940:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000944:	428b      	cmp	r3, r1
 8000946:	bf38      	it	cc
 8000948:	005b      	lslcc	r3, r3, #1
 800094a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800094e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000952:	428b      	cmp	r3, r1
 8000954:	bf24      	itt	cs
 8000956:	1a5b      	subcs	r3, r3, r1
 8000958:	ea40 000c 	orrcs.w	r0, r0, ip
 800095c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000960:	bf24      	itt	cs
 8000962:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000966:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800096e:	bf24      	itt	cs
 8000970:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800097c:	bf24      	itt	cs
 800097e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000982:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	bf18      	it	ne
 800098a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800098e:	d1e0      	bne.n	8000952 <__aeabi_fdiv+0x46>
 8000990:	2afd      	cmp	r2, #253	; 0xfd
 8000992:	f63f af50 	bhi.w	8000836 <__aeabi_fmul+0x92>
 8000996:	428b      	cmp	r3, r1
 8000998:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	bfc2      	ittt	gt
 80009b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009b8:	4770      	bxgt	lr
 80009ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	3a01      	subs	r2, #1
 80009c4:	e737      	b.n	8000836 <__aeabi_fmul+0x92>
 80009c6:	f092 0f00 	teq	r2, #0
 80009ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ce:	bf02      	ittt	eq
 80009d0:	0040      	lsleq	r0, r0, #1
 80009d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009d6:	3a01      	subeq	r2, #1
 80009d8:	d0f9      	beq.n	80009ce <__aeabi_fdiv+0xc2>
 80009da:	ea40 000c 	orr.w	r0, r0, ip
 80009de:	f093 0f00 	teq	r3, #0
 80009e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e6:	bf02      	ittt	eq
 80009e8:	0049      	lsleq	r1, r1, #1
 80009ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ee:	3b01      	subeq	r3, #1
 80009f0:	d0f9      	beq.n	80009e6 <__aeabi_fdiv+0xda>
 80009f2:	ea41 010c 	orr.w	r1, r1, ip
 80009f6:	e795      	b.n	8000924 <__aeabi_fdiv+0x18>
 80009f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009fc:	ea92 0f0c 	teq	r2, ip
 8000a00:	d108      	bne.n	8000a14 <__aeabi_fdiv+0x108>
 8000a02:	0242      	lsls	r2, r0, #9
 8000a04:	f47f af7d 	bne.w	8000902 <__aeabi_fmul+0x15e>
 8000a08:	ea93 0f0c 	teq	r3, ip
 8000a0c:	f47f af70 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e776      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a14:	ea93 0f0c 	teq	r3, ip
 8000a18:	d104      	bne.n	8000a24 <__aeabi_fdiv+0x118>
 8000a1a:	024b      	lsls	r3, r1, #9
 8000a1c:	f43f af4c 	beq.w	80008b8 <__aeabi_fmul+0x114>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e76e      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a28:	bf18      	it	ne
 8000a2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a2e:	d1ca      	bne.n	80009c6 <__aeabi_fdiv+0xba>
 8000a30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a34:	f47f af5c 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a3c:	f47f af3c 	bne.w	80008b8 <__aeabi_fmul+0x114>
 8000a40:	e75f      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a42:	bf00      	nop

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f921 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f806 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f002 fdfe 	bl	8003654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f93b 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f903 	bl	8000ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	20000000 	.word	0x20000000

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	200000a0 	.word	0x200000a0

08000ae4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	200000a0 	.word	0x200000a0

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <__NVIC_EnableIRQ+0x34>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff90 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff2d 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff42 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff90 	bl	8000be8 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff35 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e127      	b.n	8000f78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8116 	bne.w	8000f72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d034      	beq.n	8000db8 <HAL_GPIO_Init+0xa4>
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d80d      	bhi.n	8000d6e <HAL_GPIO_Init+0x5a>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x9a>
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d804      	bhi.n	8000d64 <HAL_GPIO_Init+0x50>
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d031      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d01c      	beq.n	8000d9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d62:	e048      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d043      	beq.n	8000df0 <HAL_GPIO_Init+0xdc>
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d01b      	beq.n	8000da4 <HAL_GPIO_Init+0x90>
          break;
 8000d6c:	e043      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d6e:	4a89      	ldr	r2, [pc, #548]	; (8000f94 <HAL_GPIO_Init+0x280>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d026      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
 8000d74:	4a87      	ldr	r2, [pc, #540]	; (8000f94 <HAL_GPIO_Init+0x280>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d806      	bhi.n	8000d88 <HAL_GPIO_Init+0x74>
 8000d7a:	4a87      	ldr	r2, [pc, #540]	; (8000f98 <HAL_GPIO_Init+0x284>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d020      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
 8000d80:	4a86      	ldr	r2, [pc, #536]	; (8000f9c <HAL_GPIO_Init+0x288>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01d      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
          break;
 8000d86:	e036      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d88:	4a85      	ldr	r2, [pc, #532]	; (8000fa0 <HAL_GPIO_Init+0x28c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
 8000d8e:	4a85      	ldr	r2, [pc, #532]	; (8000fa4 <HAL_GPIO_Init+0x290>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d016      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
 8000d94:	4a84      	ldr	r2, [pc, #528]	; (8000fa8 <HAL_GPIO_Init+0x294>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0xae>
          break;
 8000d9a:	e02c      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	623b      	str	r3, [r7, #32]
          break;
 8000da2:	e028      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	3304      	adds	r3, #4
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e023      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	3308      	adds	r3, #8
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e01e      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	330c      	adds	r3, #12
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e019      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e012      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d105      	bne.n	8000de4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	611a      	str	r2, [r3, #16]
          break;
 8000de2:	e008      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	615a      	str	r2, [r3, #20]
          break;
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d801      	bhi.n	8000e00 <HAL_GPIO_Init+0xec>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	e001      	b.n	8000e04 <HAL_GPIO_Init+0xf0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3304      	adds	r3, #4
 8000e04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d802      	bhi.n	8000e12 <HAL_GPIO_Init+0xfe>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x104>
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	3b08      	subs	r3, #8
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	210f      	movs	r1, #15
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	401a      	ands	r2, r3
 8000e2a:	6a39      	ldr	r1, [r7, #32]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	431a      	orrs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 8096 	beq.w	8000f72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b59      	ldr	r3, [pc, #356]	; (8000fac <HAL_GPIO_Init+0x298>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a58      	ldr	r2, [pc, #352]	; (8000fac <HAL_GPIO_Init+0x298>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b56      	ldr	r3, [pc, #344]	; (8000fac <HAL_GPIO_Init+0x298>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e5e:	4a54      	ldr	r2, [pc, #336]	; (8000fb0 <HAL_GPIO_Init+0x29c>)
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x19e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d00d      	beq.n	8000eae <HAL_GPIO_Init+0x19a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_GPIO_Init+0x196>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_GPIO_Init+0x192>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x1a0>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x1a0>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x1a0>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x1a0>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb6:	f002 0203 	and.w	r2, r2, #3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ec4:	493a      	ldr	r1, [pc, #232]	; (8000fb0 <HAL_GPIO_Init+0x29c>)
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4938      	ldr	r1, [pc, #224]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4933      	ldr	r1, [pc, #204]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	492e      	ldr	r1, [pc, #184]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4929      	ldr	r1, [pc, #164]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	4924      	ldr	r1, [pc, #144]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	608b      	str	r3, [r1, #8]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	491f      	ldr	r1, [pc, #124]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	491a      	ldr	r1, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4915      	ldr	r1, [pc, #84]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f aed0 	bne.w	8000d28 <HAL_GPIO_Init+0x14>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	372c      	adds	r7, #44	; 0x2c
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	10210000 	.word	0x10210000
 8000f98:	10110000 	.word	0x10110000
 8000f9c:	10120000 	.word	0x10120000
 8000fa0:	10310000 	.word	0x10310000
 8000fa4:	10320000 	.word	0x10320000
 8000fa8:	10220000 	.word	0x10220000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40011400 	.word	0x40011400
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e26c      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8087 	beq.w	80010f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe8:	4b92      	ldr	r3, [pc, #584]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d00c      	beq.n	800100e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d112      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
 8001000:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b89      	ldr	r3, [pc, #548]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d06c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x12c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d168      	bne.n	80010f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e246      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x76>
 8001030:	4b80      	ldr	r3, [pc, #512]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a7f      	ldr	r2, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e02e      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7a      	ldr	r2, [pc, #488]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b78      	ldr	r3, [pc, #480]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a77      	ldr	r2, [pc, #476]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0xbc>
 800106a:	4b72      	ldr	r3, [pc, #456]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a71      	ldr	r2, [pc, #452]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6e      	ldr	r2, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a67      	ldr	r2, [pc, #412]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fd1e 	bl	8000ae4 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fd1a 	bl	8000ae4 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1fa      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xe4>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fd0a 	bl	8000ae4 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fd06 	bl	8000ae4 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1e6      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b53      	ldr	r3, [pc, #332]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x10c>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800110e:	4b49      	ldr	r3, [pc, #292]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
 800111a:	4b46      	ldr	r3, [pc, #280]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1ba      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4939      	ldr	r1, [pc, #228]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <HAL_RCC_OscConfig+0x270>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fcbf 	bl	8000ae4 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fcbb 	bl	8000ae4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e19b      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4927      	ldr	r1, [pc, #156]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_RCC_OscConfig+0x270>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc9e 	bl	8000ae4 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc9a 	bl	8000ae4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e17a      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03a      	beq.n	800124c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d019      	beq.n	8001212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_RCC_OscConfig+0x274>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fc7e 	bl	8000ae4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc7a 	bl	8000ae4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e15a      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 faac 	bl	8001768 <RCC_Delay>
 8001210:	e01c      	b.n	800124c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_RCC_OscConfig+0x274>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fc64 	bl	8000ae4 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121e:	e00f      	b.n	8001240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fc60 	bl	8000ae4 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d908      	bls.n	8001240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e140      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	42420000 	.word	0x42420000
 800123c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b9e      	ldr	r3, [pc, #632]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e9      	bne.n	8001220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a6 	beq.w	80013a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b97      	ldr	r3, [pc, #604]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b94      	ldr	r3, [pc, #592]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a93      	ldr	r2, [pc, #588]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b91      	ldr	r3, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b8e      	ldr	r3, [pc, #568]	; (80014c0 <HAL_RCC_OscConfig+0x4f8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x4f8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc21 	bl	8000ae4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fc1d 	bl	8000ae4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0fd      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x4f8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x312>
 80012cc:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a7a      	ldr	r2, [pc, #488]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x334>
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a75      	ldr	r2, [pc, #468]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b73      	ldr	r3, [pc, #460]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a72      	ldr	r2, [pc, #456]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x356>
 8001304:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a6c      	ldr	r2, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a69      	ldr	r2, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a66      	ldr	r2, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b64      	ldr	r3, [pc, #400]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a63      	ldr	r2, [pc, #396]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fbd1 	bl	8000ae4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fbcd 	bl	8000ae4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0ab      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ee      	beq.n	8001346 <HAL_RCC_OscConfig+0x37e>
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fbbb 	bl	8000ae4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fbb7 	bl	8000ae4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e095      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139a:	4b48      	ldr	r3, [pc, #288]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a47      	ldr	r2, [pc, #284]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8081 	beq.w	80014b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b0:	4b42      	ldr	r3, [pc, #264]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d061      	beq.n	8001480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d146      	bne.n	8001452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x4fc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fb8b 	bl	8000ae4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fb87 	bl	8000ae4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e067      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f023 020f 	bic.w	r2, r3, #15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	492d      	ldr	r1, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a19      	ldr	r1, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	430b      	orrs	r3, r1
 800141e:	4927      	ldr	r1, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x4fc>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fb5b 	bl	8000ae4 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fb57 	bl	8000ae4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e037      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x46a>
 8001450:	e02f      	b.n	80014b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_RCC_OscConfig+0x4fc>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb44 	bl	8000ae4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb40 	bl	8000ae4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e020      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x498>
 800147e:	e018      	b.n	80014b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e013      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_OscConfig+0x4f4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	429a      	cmp	r2, r3
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40007000 	.word	0x40007000
 80014c4:	42420060 	.word	0x42420060

080014c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0a0      	b.n	800161e <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80014fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a45      	ldr	r2, [pc, #276]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4940      	ldr	r1, [pc, #256]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d040      	beq.n	80015b8 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e067      	b.n	800161e <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e05b      	b.n	800161e <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e053      	b.n	800161e <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4929      	ldr	r1, [pc, #164]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff faac 	bl	8000ae4 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff faa8 	bl	8000ae4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e03b      	b.n	800161e <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4915      	ldr	r1, [pc, #84]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	490d      	ldr	r1, [pc, #52]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 f81f 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015fa:	4601      	mov	r1, r0
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_RCC_ClockConfig+0x160>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x164>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	fa21 f303 	lsr.w	r3, r1, r3
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_RCC_ClockConfig+0x168>)
 8001610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_RCC_ClockConfig+0x16c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fa22 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	08004328 	.word	0x08004328
 8001630:	20000008 	.word	0x20000008
 8001634:	20000000 	.word	0x20000000

08001638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	b490      	push	{r4, r7}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001640:	f107 0414 	add.w	r4, r7, #20
 8001644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164c:	1d3c      	adds	r4, r7, #4
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d002      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x46>
 8001678:	2b08      	cmp	r3, #8
 800167a:	d003      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x4c>
 800167c:	e02c      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001682:	e02c      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001690:	4413      	add	r3, r2
 8001692:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d012      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ae:	4413      	add	r3, r2
 80016b0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016ba:	fb02 f203 	mul.w	r2, r2, r3
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
 80016c6:	e004      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016d6:	e002      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3738      	adds	r7, #56	; 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc90      	pop	{r4, r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	080042e0 	.word	0x080042e0
 80016f0:	080042f0 	.word	0x080042f0
 80016f4:	40021000 	.word	0x40021000
 80016f8:	016e3600 	.word	0x016e3600
 80016fc:	003d0900 	.word	0x003d0900
 8001700:	007a1200 	.word	0x007a1200

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_RCC_GetHCLKFreq+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800171c:	f7ff fff2 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001720:	4601      	mov	r1, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	08004338 	.word	0x08004338

08001740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001744:	f7ff ffde 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	08004338 	.word	0x08004338

08001768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <RCC_Delay+0x34>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <RCC_Delay+0x38>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a5b      	lsrs	r3, r3, #9
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001784:	bf00      	nop
  }
  while (Delay --);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	60fa      	str	r2, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f9      	bne.n	8001784 <RCC_Delay+0x1c>
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	10624dd3 	.word	0x10624dd3

080017a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e01d      	b.n	80017f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f001 ffb8 	bl	8003740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3304      	adds	r3, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f000 fcea 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01d      	b.n	8001848 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f815 	bl	8001850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f000 fcbf 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	6839      	ldr	r1, [r7, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f92b 	bl	8002ad2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_TIM_PWM_Start+0x88>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00e      	beq.n	80018a4 <HAL_TIM_PWM_Start+0x40>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_TIM_PWM_Start+0x8c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d009      	beq.n	80018a4 <HAL_TIM_PWM_Start+0x40>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_TIM_PWM_Start+0x90>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d004      	beq.n	80018a4 <HAL_TIM_PWM_Start+0x40>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <HAL_TIM_PWM_Start+0x94>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_TIM_PWM_Start+0x44>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_TIM_PWM_Start+0x46>
 80018a8:	2300      	movs	r3, #0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d007      	beq.n	80018e0 <HAL_TIM_PWM_Start+0x7c>
  {
    __HAL_TIM_ENABLE(htim);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800

080018fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e01d      	b.n	800194a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f001 fec8 	bl	80036b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 fc3e 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	d841      	bhi.n	80019e8 <HAL_TIM_IC_Start_IT+0x94>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <HAL_TIM_IC_Start_IT+0x18>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	080019a1 	.word	0x080019a1
 8001970:	080019e9 	.word	0x080019e9
 8001974:	080019e9 	.word	0x080019e9
 8001978:	080019e9 	.word	0x080019e9
 800197c:	080019b3 	.word	0x080019b3
 8001980:	080019e9 	.word	0x080019e9
 8001984:	080019e9 	.word	0x080019e9
 8001988:	080019e9 	.word	0x080019e9
 800198c:	080019c5 	.word	0x080019c5
 8001990:	080019e9 	.word	0x080019e9
 8001994:	080019e9 	.word	0x080019e9
 8001998:	080019e9 	.word	0x080019e9
 800199c:	080019d7 	.word	0x080019d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0202 	orr.w	r2, r2, #2
 80019ae:	60da      	str	r2, [r3, #12]
      break;
 80019b0:	e01b      	b.n	80019ea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0204 	orr.w	r2, r2, #4
 80019c0:	60da      	str	r2, [r3, #12]
      break;
 80019c2:	e012      	b.n	80019ea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	60da      	str	r2, [r3, #12]
      break;
 80019d4:	e009      	b.n	80019ea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0210 	orr.w	r2, r2, #16
 80019e4:	60da      	str	r2, [r3, #12]
      break;
 80019e6:	e000      	b.n	80019ea <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80019e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f86d 	bl	8002ad2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d007      	beq.n	8001a1a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d122      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d11b      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0202 	mvn.w	r2, #2
 8001a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f001 fdc8 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8001a6c:	e005      	b.n	8001a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fb89 	bl	8002186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fb8f 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d122      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0204 	mvn.w	r2, #4
 8001aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f001 fd9e 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8001ac0:	e005      	b.n	8001ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fb5f 	bl	8002186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fb65 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d122      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d11b      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0208 	mvn.w	r2, #8
 8001af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f001 fd74 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fb35 	bl	8002186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fb3b 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d122      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d11b      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0210 	mvn.w	r2, #16
 8001b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2208      	movs	r2, #8
 8001b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f001 fd4a 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8001b68:	e005      	b.n	8001b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fb0b 	bl	8002186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fb11 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10e      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0201 	mvn.w	r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fae6 	bl	8002174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d107      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fff0 	bl	8002bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fad5 	bl	80021aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0220 	mvn.w	r2, #32
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 ffbb 	bl	8002ba2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e08a      	b.n	8001d64 <HAL_TIM_IC_ConfigChannel+0x130>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f000 fd84 	bl	8002780 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020c 	bic.w	r2, r2, #12
 8001c86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6999      	ldr	r1, [r3, #24]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e05a      	b.n	8001d52 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d11c      	bne.n	8001cdc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f000 fdf3 	bl	800289c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6999      	ldr	r1, [r3, #24]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	021a      	lsls	r2, r3, #8
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	e03a      	b.n	8001d52 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11b      	bne.n	8001d1a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f000 fe3e 	bl	8002972 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 020c 	bic.w	r2, r2, #12
 8001d04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69d9      	ldr	r1, [r3, #28]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
 8001d18:	e01b      	b.n	8001d52 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f000 fe5d 	bl	80029e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0b4      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	f200 809f 	bhi.w	8001edc <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001edd 	.word	0x08001edd
 8001dac:	08001edd 	.word	0x08001edd
 8001db0:	08001edd 	.word	0x08001edd
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08001edd 	.word	0x08001edd
 8001dbc:	08001edd 	.word	0x08001edd
 8001dc0:	08001edd 	.word	0x08001edd
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001edd 	.word	0x08001edd
 8001dcc:	08001edd 	.word	0x08001edd
 8001dd0:	08001edd 	.word	0x08001edd
 8001dd4:	08001e9b 	.word	0x08001e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fa6c 	bl	80022bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6999      	ldr	r1, [r3, #24]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	619a      	str	r2, [r3, #24]
      break;
 8001e16:	e062      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fad0 	bl	80023c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6999      	ldr	r1, [r3, #24]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	021a      	lsls	r2, r3, #8
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	619a      	str	r2, [r3, #24]
      break;
 8001e58:	e041      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fb2b 	bl	80024bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0208 	orr.w	r2, r2, #8
 8001e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0204 	bic.w	r2, r2, #4
 8001e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69d9      	ldr	r1, [r3, #28]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	61da      	str	r2, [r3, #28]
      break;
 8001e98:	e021      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fb87 	bl	80025b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	61da      	str	r2, [r3, #28]
      break;
 8001eda:	e000      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001edc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x18>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0a6      	b.n	800205e <HAL_TIM_ConfigClockSource+0x166>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d067      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x120>
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d80b      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x6c>
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d073      	beq.n	8002038 <HAL_TIM_ConfigClockSource+0x140>
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d802      	bhi.n	8001f5a <HAL_TIM_ConfigClockSource+0x62>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d06f      	beq.n	8002038 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f58:	e078      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d06c      	beq.n	8002038 <HAL_TIM_ConfigClockSource+0x140>
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d06a      	beq.n	8002038 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f62:	e073      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f64:	2b70      	cmp	r3, #112	; 0x70
 8001f66:	d00d      	beq.n	8001f84 <HAL_TIM_ConfigClockSource+0x8c>
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d804      	bhi.n	8001f76 <HAL_TIM_ConfigClockSource+0x7e>
 8001f6c:	2b50      	cmp	r3, #80	; 0x50
 8001f6e:	d033      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0xe0>
 8001f70:	2b60      	cmp	r3, #96	; 0x60
 8001f72:	d041      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f74:	e06a      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	d066      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x152>
 8001f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f80:	d017      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f82:	e063      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f000 fd7e 	bl	8002a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
      break;
 8001fb0:	e04c      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f000 fd67 	bl	8002a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd4:	609a      	str	r2, [r3, #8]
      break;
 8001fd6:	e039      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f000 fc2b 	bl	8002840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2150      	movs	r1, #80	; 0x50
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fd35 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 8001ff6:	e029      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	461a      	mov	r2, r3
 8002006:	f000 fc85 	bl	8002914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2160      	movs	r1, #96	; 0x60
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fd25 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 8002016:	e019      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	461a      	mov	r2, r3
 8002026:	f000 fc0b 	bl	8002840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fd15 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 8002036:	e009      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 fd0c 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 8002048:	e000      	b.n	800204c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800204a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_TIM_SlaveConfigSynchro+0x18>
 800207a:	2302      	movs	r3, #2
 800207c:	e031      	b.n	80020e2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 faef 	bl	8002674 <TIM_SlaveTimer_SetConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e018      	b.n	80020e2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020be:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020ce:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d831      	bhi.n	8002164 <HAL_TIM_ReadCapturedValue+0x78>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002165 	.word	0x08002165
 8002110:	08002165 	.word	0x08002165
 8002114:	08002165 	.word	0x08002165
 8002118:	08002147 	.word	0x08002147
 800211c:	08002165 	.word	0x08002165
 8002120:	08002165 	.word	0x08002165
 8002124:	08002165 	.word	0x08002165
 8002128:	08002151 	.word	0x08002151
 800212c:	08002165 	.word	0x08002165
 8002130:	08002165 	.word	0x08002165
 8002134:	08002165 	.word	0x08002165
 8002138:	0800215b 	.word	0x0800215b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002142:	60fb      	str	r3, [r7, #12]

      break;
 8002144:	e00f      	b.n	8002166 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	60fb      	str	r3, [r7, #12]

      break;
 800214e:	e00a      	b.n	8002166 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	60fb      	str	r3, [r7, #12]

      break;
 8002158:	e005      	b.n	8002166 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	60fb      	str	r3, [r7, #12]

      break;
 8002162:	e000      	b.n	8002166 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002164:	bf00      	nop
  }

  return tmpreg;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <TIM_Base_SetConfig+0xe8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_Base_SetConfig+0x30>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d007      	beq.n	80021ec <TIM_Base_SetConfig+0x30>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a32      	ldr	r2, [pc, #200]	; (80022a8 <TIM_Base_SetConfig+0xec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0x30>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a31      	ldr	r2, [pc, #196]	; (80022ac <TIM_Base_SetConfig+0xf0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d108      	bne.n	80021fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <TIM_Base_SetConfig+0xe8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d017      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d013      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <TIM_Base_SetConfig+0xec>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00f      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a24      	ldr	r2, [pc, #144]	; (80022ac <TIM_Base_SetConfig+0xf0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <TIM_Base_SetConfig+0xf4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <TIM_Base_SetConfig+0xf8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_Base_SetConfig+0x7a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <TIM_Base_SetConfig+0xfc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <TIM_Base_SetConfig+0xe8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_Base_SetConfig+0xd0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <TIM_Base_SetConfig+0xf4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0xd0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <TIM_Base_SetConfig+0xf8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0xd0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <TIM_Base_SetConfig+0xfc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d103      	bne.n	8002294 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	615a      	str	r2, [r3, #20]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40014400 	.word	0x40014400
 80022b8:	40014800 	.word	0x40014800

080022bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f023 0201 	bic.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <TIM_OC1_SetConfig+0xf8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00b      	beq.n	8002330 <TIM_OC1_SetConfig+0x74>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <TIM_OC1_SetConfig+0xfc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <TIM_OC1_SetConfig+0x74>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a26      	ldr	r2, [pc, #152]	; (80023bc <TIM_OC1_SetConfig+0x100>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d003      	beq.n	8002330 <TIM_OC1_SetConfig+0x74>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <TIM_OC1_SetConfig+0x104>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10c      	bne.n	800234a <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f023 0308 	bic.w	r3, r3, #8
 8002336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <TIM_OC1_SetConfig+0xf8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_OC1_SetConfig+0xae>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <TIM_OC1_SetConfig+0xfc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_OC1_SetConfig+0xae>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <TIM_OC1_SetConfig+0x100>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_OC1_SetConfig+0xae>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <TIM_OC1_SetConfig+0x104>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800

080023c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f023 0210 	bic.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0320 	bic.w	r3, r3, #32
 800240e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <TIM_OC2_SetConfig+0xe8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10d      	bne.n	8002440 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800243e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <TIM_OC2_SetConfig+0xe8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_OC2_SetConfig+0x9c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <TIM_OC2_SetConfig+0xec>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <TIM_OC2_SetConfig+0x9c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <TIM_OC2_SetConfig+0xf0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_OC2_SetConfig+0x9c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <TIM_OC2_SetConfig+0xf4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d113      	bne.n	8002488 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800246e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800

080024bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <TIM_OC3_SetConfig+0xe8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10d      	bne.n	8002536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <TIM_OC3_SetConfig+0xe8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_OC3_SetConfig+0x9a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <TIM_OC3_SetConfig+0xec>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_OC3_SetConfig+0x9a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <TIM_OC3_SetConfig+0xf0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_OC3_SetConfig+0x9a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <TIM_OC3_SetConfig+0xf4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d113      	bne.n	800257e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	621a      	str	r2, [r3, #32]
}
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800

080025b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	031b      	lsls	r3, r3, #12
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <TIM_OC4_SetConfig+0xb0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00b      	beq.n	800262c <TIM_OC4_SetConfig+0x78>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <TIM_OC4_SetConfig+0xb4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_OC4_SetConfig+0x78>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <TIM_OC4_SetConfig+0xb8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d003      	beq.n	800262c <TIM_OC4_SetConfig+0x78>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <TIM_OC4_SetConfig+0xbc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d109      	bne.n	8002640 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	019b      	lsls	r3, r3, #6
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	621a      	str	r2, [r3, #32]
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800

08002674 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d05c      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026ba:	2b30      	cmp	r3, #48	; 0x30
 80026bc:	d806      	bhi.n	80026cc <TIM_SlaveTimer_SetConfig+0x58>
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d058      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d056      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d054      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80026ca:	e054      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d03d      	beq.n	800274c <TIM_SlaveTimer_SetConfig+0xd8>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d802      	bhi.n	80026da <TIM_SlaveTimer_SetConfig+0x66>
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d010      	beq.n	80026fa <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80026d8:	e04d      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80026da:	2b60      	cmp	r3, #96	; 0x60
 80026dc:	d040      	beq.n	8002760 <TIM_SlaveTimer_SetConfig+0xec>
 80026de:	2b70      	cmp	r3, #112	; 0x70
 80026e0:	d000      	beq.n	80026e4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80026e2:	e048      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f000 f9ce 	bl	8002a94 <TIM_ETR_SetConfig>
      break;
 80026f8:	e03d      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d101      	bne.n	8002706 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e038      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	621a      	str	r2, [r3, #32]
      break;
 800274a:	e014      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	461a      	mov	r2, r3
 800275a:	f000 f871 	bl	8002840 <TIM_TI1_ConfigInputStage>
      break;
 800275e:	e00a      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	461a      	mov	r2, r3
 800276e:	f000 f8d1 	bl	8002914 <TIM_TI2_ConfigInputStage>
      break;
 8002772:	e000      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8002774:	bf00      	nop
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a21      	ldr	r2, [pc, #132]	; (8002830 <TIM_TI1_SetConfig+0xb0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_TI1_SetConfig+0x4e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d00b      	beq.n	80027ce <TIM_TI1_SetConfig+0x4e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <TIM_TI1_SetConfig+0xb4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_TI1_SetConfig+0x4e>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <TIM_TI1_SetConfig+0xb8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_TI1_SetConfig+0x4e>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <TIM_TI1_SetConfig+0xbc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <TIM_TI1_SetConfig+0x52>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <TIM_TI1_SetConfig+0x54>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e003      	b.n	80027f2 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f023 030a 	bic.w	r3, r3, #10
 800280c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 030a 	and.w	r3, r3, #10
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800
 800283c:	40014000 	.word	0x40014000

08002840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f023 0201 	bic.w	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f023 030a 	bic.w	r3, r3, #10
 800287c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0210 	bic.w	r2, r3, #16
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	031b      	lsls	r3, r3, #12
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 0210 	bic.w	r2, r3, #16
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002950:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	031b      	lsls	r3, r3, #12
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	031b      	lsls	r3, r3, #12
 8002a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f043 0307 	orr.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	401a      	ands	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e032      	b.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03f      	b.n	8002c58 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fe13 	bl	8003818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2224      	movs	r2, #36	; 0x24
 8002bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f90c 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8083 	bne.w	8002d88 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Transmit+0x2e>
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07b      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x40>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e074      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	; 0x21
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cb6:	f7fd ff15 	bl	8000ae4 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc8:	e042      	b.n	8002d50 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce0:	d122      	bne.n	8002d28 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f850 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e046      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	e017      	b.n	8002d50 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	e013      	b.n	8002d50 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f82d 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e023      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1b7      	bne.n	8002cca <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f814 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e00a      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da2:	e02c      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d028      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002db2:	f7fd fe97 	bl	8000ae4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d21d      	bcs.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0c3      	beq.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e68:	f023 030c 	bic.w	r3, r3, #12
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e94:	f040 80a5 	bne.w	8002fe2 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4aa4      	ldr	r2, [pc, #656]	; (8003130 <UART_SetConfig+0x308>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d14f      	bne.n	8002f42 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea2:	f7fe fc4d 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8002ea6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009a      	lsls	r2, r3, #2
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4a9d      	ldr	r2, [pc, #628]	; (8003134 <UART_SetConfig+0x30c>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	0119      	lsls	r1, r3, #4
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ede:	4b95      	ldr	r3, [pc, #596]	; (8003134 <UART_SetConfig+0x30c>)
 8002ee0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2064      	movs	r0, #100	; 0x64
 8002ee8:	fb00 f303 	mul.w	r3, r0, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a90      	ldr	r2, [pc, #576]	; (8003134 <UART_SetConfig+0x30c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f00:	4419      	add	r1, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009a      	lsls	r2, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f18:	4b86      	ldr	r3, [pc, #536]	; (8003134 <UART_SetConfig+0x30c>)
 8002f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2064      	movs	r0, #100	; 0x64
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	3332      	adds	r3, #50	; 0x32
 8002f2c:	4a81      	ldr	r2, [pc, #516]	; (8003134 <UART_SetConfig+0x30c>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	f003 0207 	and.w	r2, r3, #7
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002f40:	e0f1      	b.n	8003126 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f42:	f7fe fbe9 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002f46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	441a      	add	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4a75      	ldr	r2, [pc, #468]	; (8003134 <UART_SetConfig+0x30c>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	0119      	lsls	r1, r3, #4
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7e:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <UART_SetConfig+0x30c>)
 8002f80:	fba3 0302 	umull	r0, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2064      	movs	r0, #100	; 0x64
 8002f88:	fb00 f303 	mul.w	r3, r0, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	4a68      	ldr	r2, [pc, #416]	; (8003134 <UART_SetConfig+0x30c>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa0:	4419      	add	r1, r3
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	4b5e      	ldr	r3, [pc, #376]	; (8003134 <UART_SetConfig+0x30c>)
 8002fba:	fba3 0302 	umull	r0, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2064      	movs	r0, #100	; 0x64
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a59      	ldr	r2, [pc, #356]	; (8003134 <UART_SetConfig+0x30c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	440a      	add	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	e0a1      	b.n	8003126 <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <UART_SetConfig+0x308>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d14e      	bne.n	800308a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7fe fba8 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009a      	lsls	r2, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <UART_SetConfig+0x30c>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	0119      	lsls	r1, r3, #4
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fbb2 f2f3 	udiv	r2, r2, r3
 8003028:	4b42      	ldr	r3, [pc, #264]	; (8003134 <UART_SetConfig+0x30c>)
 800302a:	fba3 0302 	umull	r0, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2064      	movs	r0, #100	; 0x64
 8003032:	fb00 f303 	mul.w	r3, r0, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	3332      	adds	r3, #50	; 0x32
 800303c:	4a3d      	ldr	r2, [pc, #244]	; (8003134 <UART_SetConfig+0x30c>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003048:	4419      	add	r1, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <UART_SetConfig+0x30c>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <UART_SetConfig+0x30c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	440a      	add	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	e04d      	b.n	8003126 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800308a:	f7fe fb45 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 800308e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a23      	ldr	r2, [pc, #140]	; (8003134 <UART_SetConfig+0x30c>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	0119      	lsls	r1, r3, #4
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009a      	lsls	r2, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <UART_SetConfig+0x30c>)
 80030c8:	fba3 0302 	umull	r0, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2064      	movs	r0, #100	; 0x64
 80030d0:	fb00 f303 	mul.w	r3, r0, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	3332      	adds	r3, #50	; 0x32
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <UART_SetConfig+0x30c>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e6:	4419      	add	r1, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <UART_SetConfig+0x30c>)
 8003100:	fba3 0302 	umull	r0, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2064      	movs	r0, #100	; 0x64
 8003108:	fb00 f303 	mul.w	r3, r0, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UART_SetConfig+0x30c>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	440a      	add	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40013800 	.word	0x40013800
 8003134:	51eb851f 	.word	0x51eb851f

08003138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b08f      	sub	sp, #60	; 0x3c
 800313c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800313e:	f7fd fc81 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003142:	f000 f8c9 	bl	80032d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003146:	f000 fa2b 	bl	80035a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800314a:	f000 f907 	bl	800335c <MX_TIM2_Init>
  MX_TIM3_Init();
 800314e:	f000 f985 	bl	800345c <MX_TIM3_Init>
  //MX_TIM4_Init();
  MX_USART1_UART_Init();
 8003152:	f000 f9fb 	bl	800354c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);//start PWM output
 8003156:	210c      	movs	r1, #12
 8003158:	4854      	ldr	r0, [pc, #336]	; (80032ac <main+0x174>)
 800315a:	f7fe fb83 	bl	8001864 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800315e:	2100      	movs	r1, #0
 8003160:	4853      	ldr	r0, [pc, #332]	; (80032b0 <main+0x178>)
 8003162:	f7fe fbf7 	bl	8001954 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8003166:	2104      	movs	r1, #4
 8003168:	4851      	ldr	r0, [pc, #324]	; (80032b0 <main+0x178>)
 800316a:	f7fe fbf3 	bl	8001954 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  double duty=0;
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f04f 0400 	mov.w	r4, #0
 8003176:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	  double freq=0;
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f04f 0400 	mov.w	r4, #0
 8003182:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	  uint8_t pDuty[]="Duty is:";
 8003186:	4a4b      	ldr	r2, [pc, #300]	; (80032b4 <main+0x17c>)
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	ca07      	ldmia	r2, {r0, r1, r2}
 800318e:	c303      	stmia	r3!, {r0, r1}
 8003190:	701a      	strb	r2, [r3, #0]
	  uint8_t pFreq[]="Freq is:";
 8003192:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <main+0x180>)
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	ca07      	ldmia	r2, {r0, r1, r2}
 800319a:	c303      	stmia	r3!, {r0, r1}
 800319c:	701a      	strb	r2, [r3, #0]
	  uint8_t pReturn[]="/n/r";
 800319e:	4a47      	ldr	r2, [pc, #284]	; (80032bc <main+0x184>)
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a8:	6018      	str	r0, [r3, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	7019      	strb	r1, [r3, #0]
	  if (tmp1 == 0)
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <main+0x188>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <main+0x98>
	  {
		  duty = 0;
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		  freq = 0;
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80031ce:	e035      	b.n	800323c <main+0x104>
	  }
	  else
	  {
		  duty = tmp2 * 100.0f / tmp1 + 0.5f;
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <main+0x18c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fa8d 	bl	80006f4 <__aeabi_ui2f>
 80031da:	4603      	mov	r3, r0
 80031dc:	493a      	ldr	r1, [pc, #232]	; (80032c8 <main+0x190>)
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fae0 	bl	80007a4 <__aeabi_fmul>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461c      	mov	r4, r3
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <main+0x188>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd fa81 	bl	80006f4 <__aeabi_ui2f>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4619      	mov	r1, r3
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7fd fb88 	bl	800090c <__aeabi_fdiv>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f9c6 	bl	8000594 <__addsf3>
 8003208:	4603      	mov	r3, r0
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f964 	bl	80004d8 <__aeabi_f2d>
 8003210:	4603      	mov	r3, r0
 8003212:	460c      	mov	r4, r1
 8003214:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		  freq = 90000000.0f / tmp1;
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <main+0x188>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fa69 	bl	80006f4 <__aeabi_ui2f>
 8003222:	4603      	mov	r3, r0
 8003224:	4619      	mov	r1, r3
 8003226:	4829      	ldr	r0, [pc, #164]	; (80032cc <main+0x194>)
 8003228:	f7fd fb70 	bl	800090c <__aeabi_fdiv>
 800322c:	4603      	mov	r3, r0
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f952 	bl	80004d8 <__aeabi_f2d>
 8003234:	4603      	mov	r3, r0
 8003236:	460c      	mov	r4, r1
 8003238:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	  }
	  uint8_t pData[4]="";
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
	  sprintf(pData,"%.1f",duty);
 8003240:	1d38      	adds	r0, r7, #4
 8003242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003246:	4922      	ldr	r1, [pc, #136]	; (80032d0 <main+0x198>)
 8003248:	f000 fc2c 	bl	8003aa4 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pDuty,sizeof(pDuty),10);//
 800324c:	f107 011c 	add.w	r1, r7, #28
 8003250:	230a      	movs	r3, #10
 8003252:	2209      	movs	r2, #9
 8003254:	481f      	ldr	r0, [pc, #124]	; (80032d4 <main+0x19c>)
 8003256:	f7ff fd03 	bl	8002c60 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pData,sizeof(pData),10);//
 800325a:	1d39      	adds	r1, r7, #4
 800325c:	230a      	movs	r3, #10
 800325e:	2204      	movs	r2, #4
 8003260:	481c      	ldr	r0, [pc, #112]	; (80032d4 <main+0x19c>)
 8003262:	f7ff fcfd 	bl	8002c60 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pReturn,sizeof(pReturn),10);//
 8003266:	f107 0108 	add.w	r1, r7, #8
 800326a:	230a      	movs	r3, #10
 800326c:	2205      	movs	r2, #5
 800326e:	4819      	ldr	r0, [pc, #100]	; (80032d4 <main+0x19c>)
 8003270:	f7ff fcf6 	bl	8002c60 <HAL_UART_Transmit>

	  sprintf(pData,"%.1f",freq);
 8003274:	1d38      	adds	r0, r7, #4
 8003276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327a:	4915      	ldr	r1, [pc, #84]	; (80032d0 <main+0x198>)
 800327c:	f000 fc12 	bl	8003aa4 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pFreq,sizeof(pFreq),10);//
 8003280:	f107 0110 	add.w	r1, r7, #16
 8003284:	230a      	movs	r3, #10
 8003286:	2209      	movs	r2, #9
 8003288:	4812      	ldr	r0, [pc, #72]	; (80032d4 <main+0x19c>)
 800328a:	f7ff fce9 	bl	8002c60 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pData,sizeof(pData),10);//
 800328e:	1d39      	adds	r1, r7, #4
 8003290:	230a      	movs	r3, #10
 8003292:	2204      	movs	r2, #4
 8003294:	480f      	ldr	r0, [pc, #60]	; (80032d4 <main+0x19c>)
 8003296:	f7ff fce3 	bl	8002c60 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)pReturn,sizeof(pReturn),10);//
 800329a:	f107 0108 	add.w	r1, r7, #8
 800329e:	230a      	movs	r3, #10
 80032a0:	2205      	movs	r2, #5
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <main+0x19c>)
 80032a4:	f7ff fcdc 	bl	8002c60 <HAL_UART_Transmit>
  {
 80032a8:	e761      	b.n	800316e <main+0x36>
 80032aa:	bf00      	nop
 80032ac:	200000a4 	.word	0x200000a4
 80032b0:	20000124 	.word	0x20000124
 80032b4:	08004308 	.word	0x08004308
 80032b8:	08004314 	.word	0x08004314
 80032bc:	08004320 	.word	0x08004320
 80032c0:	2000008c 	.word	0x2000008c
 80032c4:	20000090 	.word	0x20000090
 80032c8:	42c80000 	.word	0x42c80000
 80032cc:	4caba950 	.word	0x4caba950
 80032d0:	08004300 	.word	0x08004300
 80032d4:	200000e4 	.word	0x200000e4

080032d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b090      	sub	sp, #64	; 0x40
 80032dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032de:	f107 0318 	add.w	r3, r7, #24
 80032e2:	2228      	movs	r2, #40	; 0x28
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fbd4 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003304:	2301      	movs	r3, #1
 8003306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003308:	2302      	movs	r3, #2
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800330c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8003312:	2300      	movs	r3, #0
 8003314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003316:	f107 0318 	add.w	r3, r7, #24
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fe54 	bl	8000fc8 <HAL_RCC_OscConfig>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8003326:	f000 f98f 	bl	8003648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800332a:	230f      	movs	r3, #15
 800332c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800332e:	2302      	movs	r3, #2
 8003330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f8c0 	bl	80014c8 <HAL_RCC_ClockConfig>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800334e:	f000 f97b 	bl	8003648 <Error_Handler>
  }
}
 8003352:	bf00      	nop
 8003354:	3740      	adds	r7, #64	; 0x40
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	; 0x30
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <MX_TIM2_Init+0xfc>)
 800338a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800338e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <MX_TIM2_Init+0xfc>)
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <MX_TIM2_Init+0xfc>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <MX_TIM2_Init+0xfc>)
 800339e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <MX_TIM2_Init+0xfc>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033aa:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <MX_TIM2_Init+0xfc>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80033b0:	4829      	ldr	r0, [pc, #164]	; (8003458 <MX_TIM2_Init+0xfc>)
 80033b2:	f7fe faa3 	bl	80018fc <HAL_TIM_IC_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80033bc:	f000 f944 	bl	8003648 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80033c0:	2304      	movs	r3, #4
 80033c2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80033c4:	2360      	movs	r3, #96	; 0x60
 80033c6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80033c8:	2302      	movs	r3, #2
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80033d4:	f107 031c 	add.w	r3, r7, #28
 80033d8:	4619      	mov	r1, r3
 80033da:	481f      	ldr	r0, [pc, #124]	; (8003458 <MX_TIM2_Init+0xfc>)
 80033dc:	f7fe fe43 	bl	8002066 <HAL_TIM_SlaveConfigSynchro>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80033e6:	f000 f92f 	bl	8003648 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80033ee:	2302      	movs	r3, #2
 80033f0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	2200      	movs	r2, #0
 8003400:	4619      	mov	r1, r3
 8003402:	4815      	ldr	r0, [pc, #84]	; (8003458 <MX_TIM2_Init+0xfc>)
 8003404:	f7fe fc16 	bl	8001c34 <HAL_TIM_IC_ConfigChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800340e:	f000 f91b 	bl	8003648 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003412:	2302      	movs	r3, #2
 8003414:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003416:	2301      	movs	r3, #1
 8003418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	2204      	movs	r2, #4
 8003420:	4619      	mov	r1, r3
 8003422:	480d      	ldr	r0, [pc, #52]	; (8003458 <MX_TIM2_Init+0xfc>)
 8003424:	f7fe fc06 	bl	8001c34 <HAL_TIM_IC_ConfigChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800342e:	f000 f90b 	bl	8003648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4806      	ldr	r0, [pc, #24]	; (8003458 <MX_TIM2_Init+0xfc>)
 8003440:	f7ff fb6b 	bl	8002b1a <HAL_TIMEx_MasterConfigSynchronization>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800344a:	f000 f8fd 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	3730      	adds	r7, #48	; 0x30
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000124 	.word	0x20000124

0800345c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003470:	f107 0320 	add.w	r3, r7, #32
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
 8003488:	615a      	str	r2, [r3, #20]
 800348a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <MX_TIM3_Init+0xe8>)
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <MX_TIM3_Init+0xec>)
 8003490:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <MX_TIM3_Init+0xe8>)
 8003494:	2217      	movs	r2, #23
 8003496:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <MX_TIM3_Init+0xe8>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034b2:	4824      	ldr	r0, [pc, #144]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034b4:	f7fe f976 	bl	80017a4 <HAL_TIM_Base_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80034be:	f000 f8c3 	bl	8003648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034cc:	4619      	mov	r1, r3
 80034ce:	481d      	ldr	r0, [pc, #116]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034d0:	f7fe fd12 	bl	8001ef8 <HAL_TIM_ConfigClockSource>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80034da:	f000 f8b5 	bl	8003648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034de:	4819      	ldr	r0, [pc, #100]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034e0:	f7fe f98b 	bl	80017fa <HAL_TIM_PWM_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80034ea:	f000 f8ad 	bl	8003648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034f6:	f107 0320 	add.w	r3, r7, #32
 80034fa:	4619      	mov	r1, r3
 80034fc:	4811      	ldr	r0, [pc, #68]	; (8003544 <MX_TIM3_Init+0xe8>)
 80034fe:	f7ff fb0c 	bl	8002b1a <HAL_TIMEx_MasterConfigSynchronization>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003508:	f000 f89e 	bl	8003648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350c:	2360      	movs	r3, #96	; 0x60
 800350e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8003510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	220c      	movs	r2, #12
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <MX_TIM3_Init+0xe8>)
 8003526:	f7fe fc21 	bl	8001d6c <HAL_TIM_PWM_ConfigChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003530:	f000 f88a 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <MX_TIM3_Init+0xe8>)
 8003536:	f000 f93d 	bl	80037b4 <HAL_TIM_MspPostInit>

}
 800353a:	bf00      	nop
 800353c:	3738      	adds	r7, #56	; 0x38
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200000a4 	.word	0x200000a4
 8003548:	40000400 	.word	0x40000400

0800354c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <MX_USART1_UART_Init+0x50>)
 8003554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800355c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003572:	220c      	movs	r2, #12
 8003574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003582:	4805      	ldr	r0, [pc, #20]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003584:	f7ff fb1f 	bl	8002bc6 <HAL_UART_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800358e:	f000 f85b 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200000e4 	.word	0x200000e4
 800359c:	40013800 	.word	0x40013800

080035a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035ac:	f043 0320 	orr.w	r3, r3, #32
 80035b0:	6193      	str	r3, [r2, #24]
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6193      	str	r3, [r2, #24]
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	6193      	str	r3, [r2, #24]
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <MX_GPIO_Init+0x58>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]

}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

//回调函数
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7f1b      	ldrb	r3, [r3, #28]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_TIM_IC_CaptureCallback+0x20>
    {
        tmp1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);//周期
 800360c:	2104      	movs	r1, #4
 800360e:	480b      	ldr	r0, [pc, #44]	; (800363c <HAL_TIM_IC_CaptureCallback+0x40>)
 8003610:	f7fe fd6c 	bl	80020ec <HAL_TIM_ReadCapturedValue>
 8003614:	4602      	mov	r2, r0
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_TIM_IC_CaptureCallback+0x44>)
 8003618:	601a      	str	r2, [r3, #0]
    {
        tmp2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);//占空�??
    }


}
 800361a:	e00a      	b.n	8003632 <HAL_TIM_IC_CaptureCallback+0x36>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d106      	bne.n	8003632 <HAL_TIM_IC_CaptureCallback+0x36>
        tmp2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);//占空�??
 8003624:	2100      	movs	r1, #0
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <HAL_TIM_IC_CaptureCallback+0x40>)
 8003628:	f7fe fd60 	bl	80020ec <HAL_TIM_ReadCapturedValue>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_TIM_IC_CaptureCallback+0x48>)
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000124 	.word	0x20000124
 8003640:	2000008c 	.word	0x2000008c
 8003644:	20000090 	.word	0x20000090

08003648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_MspInit+0x5c>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_MspInit+0x5c>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6193      	str	r3, [r2, #24]
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_MspInit+0x5c>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_MspInit+0x5c>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <HAL_MspInit+0x5c>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_MspInit+0x5c>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_MspInit+0x60>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_MspInit+0x60>)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40010000 	.word	0x40010000

080036b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d12b      	bne.n	8003730 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6193      	str	r3, [r2, #24]
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_TIM_IC_MspInit+0x80>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003708:	2302      	movs	r3, #2
 800370a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	4619      	mov	r1, r3
 800371a:	4808      	ldr	r0, [pc, #32]	; (800373c <HAL_TIM_IC_MspInit+0x84>)
 800371c:	f7fd fafa 	bl	8000d14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	201c      	movs	r0, #28
 8003726:	f7fd fabe 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800372a:	201c      	movs	r0, #28
 800372c:	f7fd fad7 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003730:	bf00      	nop
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	40010800 	.word	0x40010800

08003740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_Base_MspInit+0x68>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d114      	bne.n	800377c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2101      	movs	r1, #1
 800376e:	201d      	movs	r0, #29
 8003770:	f7fd fa99 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003774:	201d      	movs	r0, #29
 8003776:	f7fd fab2 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800377a:	e010      	b.n	800379e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <HAL_TIM_Base_MspInit+0x70>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10b      	bne.n	800379e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_TIM_Base_MspInit+0x6c>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40000800 	.word	0x40000800

080037b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_TIM_MspPostInit+0x58>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d117      	bne.n	8003804 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_TIM_MspPostInit+0x5c>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <HAL_TIM_MspPostInit+0x5c>)
 80037da:	f043 0308 	orr.w	r3, r3, #8
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_TIM_MspPostInit+0x5c>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037ec:	2302      	movs	r3, #2
 80037ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2302      	movs	r3, #2
 80037f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0310 	add.w	r3, r7, #16
 80037fc:	4619      	mov	r1, r3
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_TIM_MspPostInit+0x60>)
 8003800:	f7fd fa88 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40000400 	.word	0x40000400
 8003810:	40021000 	.word	0x40021000
 8003814:	40010c00 	.word	0x40010c00

08003818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0310 	add.w	r3, r7, #16
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <HAL_UART_MspInit+0x8c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d131      	bne.n	800389c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_UART_MspInit+0x90>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_UART_MspInit+0x90>)
 800383e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003842:	6193      	str	r3, [r2, #24]
 8003844:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_UART_MspInit+0x90>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_UART_MspInit+0x90>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_UART_MspInit+0x90>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6193      	str	r3, [r2, #24]
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_UART_MspInit+0x90>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	f107 0310 	add.w	r3, r7, #16
 800387a:	4619      	mov	r1, r3
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <HAL_UART_MspInit+0x94>)
 800387e:	f7fd fa49 	bl	8000d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	f107 0310 	add.w	r3, r7, #16
 8003894:	4619      	mov	r1, r3
 8003896:	4805      	ldr	r0, [pc, #20]	; (80038ac <HAL_UART_MspInit+0x94>)
 8003898:	f7fd fa3c 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800389c:	bf00      	nop
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010800 	.word	0x40010800

080038b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <HardFault_Handler+0x4>

080038c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c6:	e7fe      	b.n	80038c6 <MemManage_Handler+0x4>

080038c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <BusFault_Handler+0x4>

080038ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d2:	e7fe      	b.n	80038d2 <UsageFault_Handler+0x4>

080038d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f7fd f8e0 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <TIM2_IRQHandler+0x10>)
 800390a:	f7fe f88b 	bl	8001a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000124 	.word	0x20000124

08003918 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <TIM3_IRQHandler+0x10>)
 800391e:	f7fe f881 	bl	8001a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200000a4 	.word	0x200000a4

0800392c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <_sbrk+0x50>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <_sbrk+0x16>
		heap_end = &end;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <_sbrk+0x50>)
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <_sbrk+0x54>)
 8003940:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <_sbrk+0x50>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <_sbrk+0x50>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	466a      	mov	r2, sp
 8003952:	4293      	cmp	r3, r2
 8003954:	d907      	bls.n	8003966 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003956:	f000 f873 	bl	8003a40 <__errno>
 800395a:	4602      	mov	r2, r0
 800395c:	230c      	movs	r3, #12
 800395e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	e006      	b.n	8003974 <_sbrk+0x48>
	}

	heap_end += incr;
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <_sbrk+0x50>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	4a03      	ldr	r2, [pc, #12]	; (800397c <_sbrk+0x50>)
 8003970:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000094 	.word	0x20000094
 8003980:	20000168 	.word	0x20000168

08003984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <SystemInit+0x64>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <SystemInit+0x64>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <SystemInit+0x64>)
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	4913      	ldr	r1, [pc, #76]	; (80039e8 <SystemInit+0x64>)
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <SystemInit+0x68>)
 800399c:	4013      	ands	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <SystemInit+0x64>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <SystemInit+0x64>)
 80039a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <SystemInit+0x64>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <SystemInit+0x64>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <SystemInit+0x64>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <SystemInit+0x64>)
 80039c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80039c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <SystemInit+0x64>)
 80039ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80039ce:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <SystemInit+0x64>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <SystemInit+0x6c>)
 80039d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039dc:	609a      	str	r2, [r3, #8]
#endif 
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	f8ff0000 	.word	0xf8ff0000
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039f6:	e003      	b.n	8003a00 <LoopCopyDataInit>

080039f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80039fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039fe:	3104      	adds	r1, #4

08003a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a08:	d3f6      	bcc.n	80039f8 <CopyDataInit>
  ldr r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a0c:	e002      	b.n	8003a14 <LoopFillZerobss>

08003a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a10:	f842 3b04 	str.w	r3, [r2], #4

08003a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a18:	d3f9      	bcc.n	8003a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a1a:	f7ff ffb3 	bl	8003984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a1e:	f000 f815 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a22:	f7ff fb89 	bl	8003138 <main>
  bx lr
 8003a26:	4770      	bx	lr
  ldr r3, =_sidata
 8003a28:	0800437c 	.word	0x0800437c
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a30:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003a34:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003a38:	20000168 	.word	0x20000168

08003a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_IRQHandler>
	...

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2500      	movs	r5, #0
 8003a50:	4e0c      	ldr	r6, [pc, #48]	; (8003a84 <__libc_init_array+0x38>)
 8003a52:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1ba4      	subs	r4, r4, r6
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a5      	cmp	r5, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	f000 fc34 	bl	80042c8 <_init>
 8003a60:	2500      	movs	r5, #0
 8003a62:	4e0a      	ldr	r6, [pc, #40]	; (8003a8c <__libc_init_array+0x40>)
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <__libc_init_array+0x44>)
 8003a66:	1ba4      	subs	r4, r4, r6
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a5      	cmp	r5, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a74:	4798      	blx	r3
 8003a76:	3501      	adds	r5, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a7e:	4798      	blx	r3
 8003a80:	3501      	adds	r5, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	08004374 	.word	0x08004374
 8003a88:	08004374 	.word	0x08004374
 8003a8c:	08004374 	.word	0x08004374
 8003a90:	08004378 	.word	0x08004378

08003a94 <memset>:
 8003a94:	4603      	mov	r3, r0
 8003a96:	4402      	add	r2, r0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <siprintf>:
 8003aa4:	b40e      	push	{r1, r2, r3}
 8003aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aaa:	b500      	push	{lr}
 8003aac:	b09c      	sub	sp, #112	; 0x70
 8003aae:	ab1d      	add	r3, sp, #116	; 0x74
 8003ab0:	9002      	str	r0, [sp, #8]
 8003ab2:	9006      	str	r0, [sp, #24]
 8003ab4:	9107      	str	r1, [sp, #28]
 8003ab6:	9104      	str	r1, [sp, #16]
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <siprintf+0x38>)
 8003aba:	4909      	ldr	r1, [pc, #36]	; (8003ae0 <siprintf+0x3c>)
 8003abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ac0:	9105      	str	r1, [sp, #20]
 8003ac2:	6800      	ldr	r0, [r0, #0]
 8003ac4:	a902      	add	r1, sp, #8
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	f000 f866 	bl	8003b98 <_svfiprintf_r>
 8003acc:	2200      	movs	r2, #0
 8003ace:	9b02      	ldr	r3, [sp, #8]
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	b01c      	add	sp, #112	; 0x70
 8003ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad8:	b003      	add	sp, #12
 8003ada:	4770      	bx	lr
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	ffff0208 	.word	0xffff0208

08003ae4 <__ssputs_r>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	688e      	ldr	r6, [r1, #8]
 8003aea:	4682      	mov	sl, r0
 8003aec:	429e      	cmp	r6, r3
 8003aee:	460c      	mov	r4, r1
 8003af0:	4690      	mov	r8, r2
 8003af2:	4699      	mov	r9, r3
 8003af4:	d837      	bhi.n	8003b66 <__ssputs_r+0x82>
 8003af6:	898a      	ldrh	r2, [r1, #12]
 8003af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003afc:	d031      	beq.n	8003b62 <__ssputs_r+0x7e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	6825      	ldr	r5, [r4, #0]
 8003b02:	6909      	ldr	r1, [r1, #16]
 8003b04:	1a6f      	subs	r7, r5, r1
 8003b06:	6965      	ldr	r5, [r4, #20]
 8003b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b10:	f109 0301 	add.w	r3, r9, #1
 8003b14:	443b      	add	r3, r7
 8003b16:	429d      	cmp	r5, r3
 8003b18:	bf38      	it	cc
 8003b1a:	461d      	movcc	r5, r3
 8003b1c:	0553      	lsls	r3, r2, #21
 8003b1e:	d530      	bpl.n	8003b82 <__ssputs_r+0x9e>
 8003b20:	4629      	mov	r1, r5
 8003b22:	f000 fb37 	bl	8004194 <_malloc_r>
 8003b26:	4606      	mov	r6, r0
 8003b28:	b950      	cbnz	r0, 8003b40 <__ssputs_r+0x5c>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f8ca 3000 	str.w	r3, [sl]
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3a:	81a3      	strh	r3, [r4, #12]
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	463a      	mov	r2, r7
 8003b42:	6921      	ldr	r1, [r4, #16]
 8003b44:	f000 fab6 	bl	80040b4 <memcpy>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	6126      	str	r6, [r4, #16]
 8003b56:	443e      	add	r6, r7
 8003b58:	6026      	str	r6, [r4, #0]
 8003b5a:	464e      	mov	r6, r9
 8003b5c:	6165      	str	r5, [r4, #20]
 8003b5e:	1bed      	subs	r5, r5, r7
 8003b60:	60a5      	str	r5, [r4, #8]
 8003b62:	454e      	cmp	r6, r9
 8003b64:	d900      	bls.n	8003b68 <__ssputs_r+0x84>
 8003b66:	464e      	mov	r6, r9
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	f000 faac 	bl	80040ca <memmove>
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	2000      	movs	r0, #0
 8003b76:	1b9b      	subs	r3, r3, r6
 8003b78:	60a3      	str	r3, [r4, #8]
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	441e      	add	r6, r3
 8003b7e:	6026      	str	r6, [r4, #0]
 8003b80:	e7dc      	b.n	8003b3c <__ssputs_r+0x58>
 8003b82:	462a      	mov	r2, r5
 8003b84:	f000 fb60 	bl	8004248 <_realloc_r>
 8003b88:	4606      	mov	r6, r0
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d1e2      	bne.n	8003b54 <__ssputs_r+0x70>
 8003b8e:	6921      	ldr	r1, [r4, #16]
 8003b90:	4650      	mov	r0, sl
 8003b92:	f000 fab3 	bl	80040fc <_free_r>
 8003b96:	e7c8      	b.n	8003b2a <__ssputs_r+0x46>

08003b98 <_svfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	898b      	ldrh	r3, [r1, #12]
 8003ba0:	b09d      	sub	sp, #116	; 0x74
 8003ba2:	061f      	lsls	r7, r3, #24
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4616      	mov	r6, r2
 8003baa:	d50f      	bpl.n	8003bcc <_svfiprintf_r+0x34>
 8003bac:	690b      	ldr	r3, [r1, #16]
 8003bae:	b96b      	cbnz	r3, 8003bcc <_svfiprintf_r+0x34>
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	f000 faef 	bl	8004194 <_malloc_r>
 8003bb6:	6020      	str	r0, [r4, #0]
 8003bb8:	6120      	str	r0, [r4, #16]
 8003bba:	b928      	cbnz	r0, 8003bc8 <_svfiprintf_r+0x30>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	f8c8 3000 	str.w	r3, [r8]
 8003bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc6:	e0c8      	b.n	8003d5a <_svfiprintf_r+0x1c2>
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	6163      	str	r3, [r4, #20]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bd6:	2330      	movs	r3, #48	; 0x30
 8003bd8:	f04f 0b01 	mov.w	fp, #1
 8003bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003be0:	9503      	str	r5, [sp, #12]
 8003be2:	4637      	mov	r7, r6
 8003be4:	463d      	mov	r5, r7
 8003be6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bea:	b10b      	cbz	r3, 8003bf0 <_svfiprintf_r+0x58>
 8003bec:	2b25      	cmp	r3, #37	; 0x25
 8003bee:	d13e      	bne.n	8003c6e <_svfiprintf_r+0xd6>
 8003bf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003bf4:	d00b      	beq.n	8003c0e <_svfiprintf_r+0x76>
 8003bf6:	4653      	mov	r3, sl
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	f7ff ff71 	bl	8003ae4 <__ssputs_r>
 8003c02:	3001      	adds	r0, #1
 8003c04:	f000 80a4 	beq.w	8003d50 <_svfiprintf_r+0x1b8>
 8003c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0a:	4453      	add	r3, sl
 8003c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0e:	783b      	ldrb	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 809d 	beq.w	8003d50 <_svfiprintf_r+0x1b8>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	9307      	str	r3, [sp, #28]
 8003c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c28:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2a:	462f      	mov	r7, r5
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c32:	4850      	ldr	r0, [pc, #320]	; (8003d74 <_svfiprintf_r+0x1dc>)
 8003c34:	f000 fa30 	bl	8004098 <memchr>
 8003c38:	9b04      	ldr	r3, [sp, #16]
 8003c3a:	b9d0      	cbnz	r0, 8003c72 <_svfiprintf_r+0xda>
 8003c3c:	06d9      	lsls	r1, r3, #27
 8003c3e:	bf44      	itt	mi
 8003c40:	2220      	movmi	r2, #32
 8003c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c46:	071a      	lsls	r2, r3, #28
 8003c48:	bf44      	itt	mi
 8003c4a:	222b      	movmi	r2, #43	; 0x2b
 8003c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c50:	782a      	ldrb	r2, [r5, #0]
 8003c52:	2a2a      	cmp	r2, #42	; 0x2a
 8003c54:	d015      	beq.n	8003c82 <_svfiprintf_r+0xea>
 8003c56:	462f      	mov	r7, r5
 8003c58:	2000      	movs	r0, #0
 8003c5a:	250a      	movs	r5, #10
 8003c5c:	9a07      	ldr	r2, [sp, #28]
 8003c5e:	4639      	mov	r1, r7
 8003c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c64:	3b30      	subs	r3, #48	; 0x30
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	d94d      	bls.n	8003d06 <_svfiprintf_r+0x16e>
 8003c6a:	b1b8      	cbz	r0, 8003c9c <_svfiprintf_r+0x104>
 8003c6c:	e00f      	b.n	8003c8e <_svfiprintf_r+0xf6>
 8003c6e:	462f      	mov	r7, r5
 8003c70:	e7b8      	b.n	8003be4 <_svfiprintf_r+0x4c>
 8003c72:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <_svfiprintf_r+0x1dc>)
 8003c74:	463d      	mov	r5, r7
 8003c76:	1a80      	subs	r0, r0, r2
 8003c78:	fa0b f000 	lsl.w	r0, fp, r0
 8003c7c:	4318      	orrs	r0, r3
 8003c7e:	9004      	str	r0, [sp, #16]
 8003c80:	e7d3      	b.n	8003c2a <_svfiprintf_r+0x92>
 8003c82:	9a03      	ldr	r2, [sp, #12]
 8003c84:	1d11      	adds	r1, r2, #4
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	9103      	str	r1, [sp, #12]
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	db01      	blt.n	8003c92 <_svfiprintf_r+0xfa>
 8003c8e:	9207      	str	r2, [sp, #28]
 8003c90:	e004      	b.n	8003c9c <_svfiprintf_r+0x104>
 8003c92:	4252      	negs	r2, r2
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	9207      	str	r2, [sp, #28]
 8003c9a:	9304      	str	r3, [sp, #16]
 8003c9c:	783b      	ldrb	r3, [r7, #0]
 8003c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca0:	d10c      	bne.n	8003cbc <_svfiprintf_r+0x124>
 8003ca2:	787b      	ldrb	r3, [r7, #1]
 8003ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca6:	d133      	bne.n	8003d10 <_svfiprintf_r+0x178>
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	3702      	adds	r7, #2
 8003cac:	1d1a      	adds	r2, r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	9203      	str	r2, [sp, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bfb8      	it	lt
 8003cb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cba:	9305      	str	r3, [sp, #20]
 8003cbc:	4d2e      	ldr	r5, [pc, #184]	; (8003d78 <_svfiprintf_r+0x1e0>)
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	7839      	ldrb	r1, [r7, #0]
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f9e8 	bl	8004098 <memchr>
 8003cc8:	b138      	cbz	r0, 8003cda <_svfiprintf_r+0x142>
 8003cca:	2340      	movs	r3, #64	; 0x40
 8003ccc:	1b40      	subs	r0, r0, r5
 8003cce:	fa03 f000 	lsl.w	r0, r3, r0
 8003cd2:	9b04      	ldr	r3, [sp, #16]
 8003cd4:	3701      	adds	r7, #1
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	9304      	str	r3, [sp, #16]
 8003cda:	7839      	ldrb	r1, [r7, #0]
 8003cdc:	2206      	movs	r2, #6
 8003cde:	4827      	ldr	r0, [pc, #156]	; (8003d7c <_svfiprintf_r+0x1e4>)
 8003ce0:	1c7e      	adds	r6, r7, #1
 8003ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ce6:	f000 f9d7 	bl	8004098 <memchr>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d038      	beq.n	8003d60 <_svfiprintf_r+0x1c8>
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <_svfiprintf_r+0x1e8>)
 8003cf0:	bb13      	cbnz	r3, 8003d38 <_svfiprintf_r+0x1a0>
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	9303      	str	r3, [sp, #12]
 8003cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d00:	444b      	add	r3, r9
 8003d02:	9309      	str	r3, [sp, #36]	; 0x24
 8003d04:	e76d      	b.n	8003be2 <_svfiprintf_r+0x4a>
 8003d06:	fb05 3202 	mla	r2, r5, r2, r3
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	460f      	mov	r7, r1
 8003d0e:	e7a6      	b.n	8003c5e <_svfiprintf_r+0xc6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	250a      	movs	r5, #10
 8003d14:	4619      	mov	r1, r3
 8003d16:	3701      	adds	r7, #1
 8003d18:	9305      	str	r3, [sp, #20]
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d20:	3a30      	subs	r2, #48	; 0x30
 8003d22:	2a09      	cmp	r2, #9
 8003d24:	d903      	bls.n	8003d2e <_svfiprintf_r+0x196>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0c8      	beq.n	8003cbc <_svfiprintf_r+0x124>
 8003d2a:	9105      	str	r1, [sp, #20]
 8003d2c:	e7c6      	b.n	8003cbc <_svfiprintf_r+0x124>
 8003d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8003d32:	2301      	movs	r3, #1
 8003d34:	4607      	mov	r7, r0
 8003d36:	e7f0      	b.n	8003d1a <_svfiprintf_r+0x182>
 8003d38:	ab03      	add	r3, sp, #12
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <_svfiprintf_r+0x1ec>)
 8003d40:	a904      	add	r1, sp, #16
 8003d42:	4640      	mov	r0, r8
 8003d44:	f3af 8000 	nop.w
 8003d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d4c:	4681      	mov	r9, r0
 8003d4e:	d1d6      	bne.n	8003cfe <_svfiprintf_r+0x166>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	065b      	lsls	r3, r3, #25
 8003d54:	f53f af35 	bmi.w	8003bc2 <_svfiprintf_r+0x2a>
 8003d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d5a:	b01d      	add	sp, #116	; 0x74
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	ab03      	add	r3, sp, #12
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4622      	mov	r2, r4
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <_svfiprintf_r+0x1ec>)
 8003d68:	a904      	add	r1, sp, #16
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	f000 f882 	bl	8003e74 <_printf_i>
 8003d70:	e7ea      	b.n	8003d48 <_svfiprintf_r+0x1b0>
 8003d72:	bf00      	nop
 8003d74:	08004340 	.word	0x08004340
 8003d78:	08004346 	.word	0x08004346
 8003d7c:	0800434a 	.word	0x0800434a
 8003d80:	00000000 	.word	0x00000000
 8003d84:	08003ae5 	.word	0x08003ae5

08003d88 <_printf_common>:
 8003d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	4691      	mov	r9, r2
 8003d8e:	461f      	mov	r7, r3
 8003d90:	688a      	ldr	r2, [r1, #8]
 8003d92:	690b      	ldr	r3, [r1, #16]
 8003d94:	4606      	mov	r6, r0
 8003d96:	4293      	cmp	r3, r2
 8003d98:	bfb8      	it	lt
 8003d9a:	4613      	movlt	r3, r2
 8003d9c:	f8c9 3000 	str.w	r3, [r9]
 8003da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003da4:	460c      	mov	r4, r1
 8003da6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003daa:	b112      	cbz	r2, 8003db2 <_printf_common+0x2a>
 8003dac:	3301      	adds	r3, #1
 8003dae:	f8c9 3000 	str.w	r3, [r9]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	0699      	lsls	r1, r3, #26
 8003db6:	bf42      	ittt	mi
 8003db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003dbc:	3302      	addmi	r3, #2
 8003dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d107      	bne.n	8003dda <_printf_common+0x52>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	42ab      	cmp	r3, r5
 8003dd8:	dc29      	bgt.n	8003e2e <_printf_common+0xa6>
 8003dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	3300      	adds	r3, #0
 8003de2:	bf18      	it	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	0692      	lsls	r2, r2, #26
 8003de8:	d42e      	bmi.n	8003e48 <_printf_common+0xc0>
 8003dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d021      	beq.n	8003e3c <_printf_common+0xb4>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	68e5      	ldr	r5, [r4, #12]
 8003dfc:	f003 0306 	and.w	r3, r3, #6
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	bf18      	it	ne
 8003e04:	2500      	movne	r5, #0
 8003e06:	f8d9 2000 	ldr.w	r2, [r9]
 8003e0a:	f04f 0900 	mov.w	r9, #0
 8003e0e:	bf08      	it	eq
 8003e10:	1aad      	subeq	r5, r5, r2
 8003e12:	68a3      	ldr	r3, [r4, #8]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	bf08      	it	eq
 8003e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bfc4      	itt	gt
 8003e20:	1a9b      	subgt	r3, r3, r2
 8003e22:	18ed      	addgt	r5, r5, r3
 8003e24:	341a      	adds	r4, #26
 8003e26:	454d      	cmp	r5, r9
 8003e28:	d11a      	bne.n	8003e60 <_printf_common+0xd8>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	e008      	b.n	8003e40 <_printf_common+0xb8>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4652      	mov	r2, sl
 8003e32:	4639      	mov	r1, r7
 8003e34:	4630      	mov	r0, r6
 8003e36:	47c0      	blx	r8
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d103      	bne.n	8003e44 <_printf_common+0xbc>
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e44:	3501      	adds	r5, #1
 8003e46:	e7c2      	b.n	8003dce <_printf_common+0x46>
 8003e48:	2030      	movs	r0, #48	; 0x30
 8003e4a:	18e1      	adds	r1, r4, r3
 8003e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e56:	4422      	add	r2, r4
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5e:	e7c4      	b.n	8003dea <_printf_common+0x62>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4622      	mov	r2, r4
 8003e64:	4639      	mov	r1, r7
 8003e66:	4630      	mov	r0, r6
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d0e6      	beq.n	8003e3c <_printf_common+0xb4>
 8003e6e:	f109 0901 	add.w	r9, r9, #1
 8003e72:	e7d8      	b.n	8003e26 <_printf_common+0x9e>

08003e74 <_printf_i>:
 8003e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	7e09      	ldrb	r1, [r1, #24]
 8003e80:	b085      	sub	sp, #20
 8003e82:	296e      	cmp	r1, #110	; 0x6e
 8003e84:	4617      	mov	r7, r2
 8003e86:	4606      	mov	r6, r0
 8003e88:	4698      	mov	r8, r3
 8003e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e8c:	f000 80b3 	beq.w	8003ff6 <_printf_i+0x182>
 8003e90:	d822      	bhi.n	8003ed8 <_printf_i+0x64>
 8003e92:	2963      	cmp	r1, #99	; 0x63
 8003e94:	d036      	beq.n	8003f04 <_printf_i+0x90>
 8003e96:	d80a      	bhi.n	8003eae <_printf_i+0x3a>
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	f000 80b9 	beq.w	8004010 <_printf_i+0x19c>
 8003e9e:	2958      	cmp	r1, #88	; 0x58
 8003ea0:	f000 8083 	beq.w	8003faa <_printf_i+0x136>
 8003ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003eac:	e032      	b.n	8003f14 <_printf_i+0xa0>
 8003eae:	2964      	cmp	r1, #100	; 0x64
 8003eb0:	d001      	beq.n	8003eb6 <_printf_i+0x42>
 8003eb2:	2969      	cmp	r1, #105	; 0x69
 8003eb4:	d1f6      	bne.n	8003ea4 <_printf_i+0x30>
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	0605      	lsls	r5, r0, #24
 8003ebc:	f103 0104 	add.w	r1, r3, #4
 8003ec0:	d52a      	bpl.n	8003f18 <_printf_i+0xa4>
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da03      	bge.n	8003ed2 <_printf_i+0x5e>
 8003eca:	222d      	movs	r2, #45	; 0x2d
 8003ecc:	425b      	negs	r3, r3
 8003ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ed2:	486f      	ldr	r0, [pc, #444]	; (8004090 <_printf_i+0x21c>)
 8003ed4:	220a      	movs	r2, #10
 8003ed6:	e039      	b.n	8003f4c <_printf_i+0xd8>
 8003ed8:	2973      	cmp	r1, #115	; 0x73
 8003eda:	f000 809d 	beq.w	8004018 <_printf_i+0x1a4>
 8003ede:	d808      	bhi.n	8003ef2 <_printf_i+0x7e>
 8003ee0:	296f      	cmp	r1, #111	; 0x6f
 8003ee2:	d020      	beq.n	8003f26 <_printf_i+0xb2>
 8003ee4:	2970      	cmp	r1, #112	; 0x70
 8003ee6:	d1dd      	bne.n	8003ea4 <_printf_i+0x30>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f043 0320 	orr.w	r3, r3, #32
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	e003      	b.n	8003efa <_printf_i+0x86>
 8003ef2:	2975      	cmp	r1, #117	; 0x75
 8003ef4:	d017      	beq.n	8003f26 <_printf_i+0xb2>
 8003ef6:	2978      	cmp	r1, #120	; 0x78
 8003ef8:	d1d4      	bne.n	8003ea4 <_printf_i+0x30>
 8003efa:	2378      	movs	r3, #120	; 0x78
 8003efc:	4865      	ldr	r0, [pc, #404]	; (8004094 <_printf_i+0x220>)
 8003efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f02:	e055      	b.n	8003fb0 <_printf_i+0x13c>
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f0a:	1d19      	adds	r1, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6011      	str	r1, [r2, #0]
 8003f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f14:	2301      	movs	r3, #1
 8003f16:	e08c      	b.n	8004032 <_printf_i+0x1be>
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f1e:	6011      	str	r1, [r2, #0]
 8003f20:	bf18      	it	ne
 8003f22:	b21b      	sxthne	r3, r3
 8003f24:	e7cf      	b.n	8003ec6 <_printf_i+0x52>
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	6825      	ldr	r5, [r4, #0]
 8003f2a:	1d18      	adds	r0, r3, #4
 8003f2c:	6010      	str	r0, [r2, #0]
 8003f2e:	0628      	lsls	r0, r5, #24
 8003f30:	d501      	bpl.n	8003f36 <_printf_i+0xc2>
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <_printf_i+0xc8>
 8003f36:	0668      	lsls	r0, r5, #25
 8003f38:	d5fb      	bpl.n	8003f32 <_printf_i+0xbe>
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	296f      	cmp	r1, #111	; 0x6f
 8003f3e:	bf14      	ite	ne
 8003f40:	220a      	movne	r2, #10
 8003f42:	2208      	moveq	r2, #8
 8003f44:	4852      	ldr	r0, [pc, #328]	; (8004090 <_printf_i+0x21c>)
 8003f46:	2100      	movs	r1, #0
 8003f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f4c:	6865      	ldr	r5, [r4, #4]
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	60a5      	str	r5, [r4, #8]
 8003f52:	f2c0 8095 	blt.w	8004080 <_printf_i+0x20c>
 8003f56:	6821      	ldr	r1, [r4, #0]
 8003f58:	f021 0104 	bic.w	r1, r1, #4
 8003f5c:	6021      	str	r1, [r4, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d13d      	bne.n	8003fde <_printf_i+0x16a>
 8003f62:	2d00      	cmp	r5, #0
 8003f64:	f040 808e 	bne.w	8004084 <_printf_i+0x210>
 8003f68:	4665      	mov	r5, ip
 8003f6a:	2a08      	cmp	r2, #8
 8003f6c:	d10b      	bne.n	8003f86 <_printf_i+0x112>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	07db      	lsls	r3, r3, #31
 8003f72:	d508      	bpl.n	8003f86 <_printf_i+0x112>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	bfde      	ittt	le
 8003f7c:	2330      	movle	r3, #48	; 0x30
 8003f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f86:	ebac 0305 	sub.w	r3, ip, r5
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	f8cd 8000 	str.w	r8, [sp]
 8003f90:	463b      	mov	r3, r7
 8003f92:	aa03      	add	r2, sp, #12
 8003f94:	4621      	mov	r1, r4
 8003f96:	4630      	mov	r0, r6
 8003f98:	f7ff fef6 	bl	8003d88 <_printf_common>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d14d      	bne.n	800403c <_printf_i+0x1c8>
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	b005      	add	sp, #20
 8003fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003faa:	4839      	ldr	r0, [pc, #228]	; (8004090 <_printf_i+0x21c>)
 8003fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	1d1d      	adds	r5, r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6015      	str	r5, [r2, #0]
 8003fba:	060a      	lsls	r2, r1, #24
 8003fbc:	d50b      	bpl.n	8003fd6 <_printf_i+0x162>
 8003fbe:	07ca      	lsls	r2, r1, #31
 8003fc0:	bf44      	itt	mi
 8003fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8003fc6:	6021      	strmi	r1, [r4, #0]
 8003fc8:	b91b      	cbnz	r3, 8003fd2 <_printf_i+0x15e>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	f022 0220 	bic.w	r2, r2, #32
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	e7b7      	b.n	8003f46 <_printf_i+0xd2>
 8003fd6:	064d      	lsls	r5, r1, #25
 8003fd8:	bf48      	it	mi
 8003fda:	b29b      	uxthmi	r3, r3
 8003fdc:	e7ef      	b.n	8003fbe <_printf_i+0x14a>
 8003fde:	4665      	mov	r5, ip
 8003fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8003fe8:	5cc3      	ldrb	r3, [r0, r3]
 8003fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fee:	460b      	mov	r3, r1
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d1f5      	bne.n	8003fe0 <_printf_i+0x16c>
 8003ff4:	e7b9      	b.n	8003f6a <_printf_i+0xf6>
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	1d18      	adds	r0, r3, #4
 8003ffc:	6961      	ldr	r1, [r4, #20]
 8003ffe:	6010      	str	r0, [r2, #0]
 8004000:	0628      	lsls	r0, r5, #24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	d501      	bpl.n	800400a <_printf_i+0x196>
 8004006:	6019      	str	r1, [r3, #0]
 8004008:	e002      	b.n	8004010 <_printf_i+0x19c>
 800400a:	066a      	lsls	r2, r5, #25
 800400c:	d5fb      	bpl.n	8004006 <_printf_i+0x192>
 800400e:	8019      	strh	r1, [r3, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	4665      	mov	r5, ip
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	e7b9      	b.n	8003f8c <_printf_i+0x118>
 8004018:	6813      	ldr	r3, [r2, #0]
 800401a:	1d19      	adds	r1, r3, #4
 800401c:	6011      	str	r1, [r2, #0]
 800401e:	681d      	ldr	r5, [r3, #0]
 8004020:	6862      	ldr	r2, [r4, #4]
 8004022:	2100      	movs	r1, #0
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f837 	bl	8004098 <memchr>
 800402a:	b108      	cbz	r0, 8004030 <_printf_i+0x1bc>
 800402c:	1b40      	subs	r0, r0, r5
 800402e:	6060      	str	r0, [r4, #4]
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403a:	e7a7      	b.n	8003f8c <_printf_i+0x118>
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	462a      	mov	r2, r5
 8004040:	4639      	mov	r1, r7
 8004042:	4630      	mov	r0, r6
 8004044:	47c0      	blx	r8
 8004046:	3001      	adds	r0, #1
 8004048:	d0aa      	beq.n	8003fa0 <_printf_i+0x12c>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	d413      	bmi.n	8004078 <_printf_i+0x204>
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	4298      	cmp	r0, r3
 8004056:	bfb8      	it	lt
 8004058:	4618      	movlt	r0, r3
 800405a:	e7a3      	b.n	8003fa4 <_printf_i+0x130>
 800405c:	2301      	movs	r3, #1
 800405e:	464a      	mov	r2, r9
 8004060:	4639      	mov	r1, r7
 8004062:	4630      	mov	r0, r6
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d09a      	beq.n	8003fa0 <_printf_i+0x12c>
 800406a:	3501      	adds	r5, #1
 800406c:	68e3      	ldr	r3, [r4, #12]
 800406e:	9a03      	ldr	r2, [sp, #12]
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	42ab      	cmp	r3, r5
 8004074:	dcf2      	bgt.n	800405c <_printf_i+0x1e8>
 8004076:	e7eb      	b.n	8004050 <_printf_i+0x1dc>
 8004078:	2500      	movs	r5, #0
 800407a:	f104 0919 	add.w	r9, r4, #25
 800407e:	e7f5      	b.n	800406c <_printf_i+0x1f8>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ac      	bne.n	8003fde <_printf_i+0x16a>
 8004084:	7803      	ldrb	r3, [r0, #0]
 8004086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800408a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408e:	e76c      	b.n	8003f6a <_printf_i+0xf6>
 8004090:	08004351 	.word	0x08004351
 8004094:	08004362 	.word	0x08004362

08004098 <memchr>:
 8004098:	b510      	push	{r4, lr}
 800409a:	b2c9      	uxtb	r1, r1
 800409c:	4402      	add	r2, r0
 800409e:	4290      	cmp	r0, r2
 80040a0:	4603      	mov	r3, r0
 80040a2:	d101      	bne.n	80040a8 <memchr+0x10>
 80040a4:	2300      	movs	r3, #0
 80040a6:	e003      	b.n	80040b0 <memchr+0x18>
 80040a8:	781c      	ldrb	r4, [r3, #0]
 80040aa:	3001      	adds	r0, #1
 80040ac:	428c      	cmp	r4, r1
 80040ae:	d1f6      	bne.n	800409e <memchr+0x6>
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd10      	pop	{r4, pc}

080040b4 <memcpy>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	1e43      	subs	r3, r0, #1
 80040b8:	440a      	add	r2, r1
 80040ba:	4291      	cmp	r1, r2
 80040bc:	d100      	bne.n	80040c0 <memcpy+0xc>
 80040be:	bd10      	pop	{r4, pc}
 80040c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040c8:	e7f7      	b.n	80040ba <memcpy+0x6>

080040ca <memmove>:
 80040ca:	4288      	cmp	r0, r1
 80040cc:	b510      	push	{r4, lr}
 80040ce:	eb01 0302 	add.w	r3, r1, r2
 80040d2:	d807      	bhi.n	80040e4 <memmove+0x1a>
 80040d4:	1e42      	subs	r2, r0, #1
 80040d6:	4299      	cmp	r1, r3
 80040d8:	d00a      	beq.n	80040f0 <memmove+0x26>
 80040da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80040e2:	e7f8      	b.n	80040d6 <memmove+0xc>
 80040e4:	4283      	cmp	r3, r0
 80040e6:	d9f5      	bls.n	80040d4 <memmove+0xa>
 80040e8:	1881      	adds	r1, r0, r2
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	42d3      	cmn	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memmove+0x28>
 80040f0:	bd10      	pop	{r4, pc}
 80040f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040fa:	e7f7      	b.n	80040ec <memmove+0x22>

080040fc <_free_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4605      	mov	r5, r0
 8004100:	2900      	cmp	r1, #0
 8004102:	d043      	beq.n	800418c <_free_r+0x90>
 8004104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004108:	1f0c      	subs	r4, r1, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfb8      	it	lt
 800410e:	18e4      	addlt	r4, r4, r3
 8004110:	f000 f8d0 	bl	80042b4 <__malloc_lock>
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <_free_r+0x94>)
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	4610      	mov	r0, r2
 800411a:	b933      	cbnz	r3, 800412a <_free_r+0x2e>
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	6014      	str	r4, [r2, #0]
 8004120:	4628      	mov	r0, r5
 8004122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004126:	f000 b8c6 	b.w	80042b6 <__malloc_unlock>
 800412a:	42a3      	cmp	r3, r4
 800412c:	d90b      	bls.n	8004146 <_free_r+0x4a>
 800412e:	6821      	ldr	r1, [r4, #0]
 8004130:	1862      	adds	r2, r4, r1
 8004132:	4293      	cmp	r3, r2
 8004134:	bf01      	itttt	eq
 8004136:	681a      	ldreq	r2, [r3, #0]
 8004138:	685b      	ldreq	r3, [r3, #4]
 800413a:	1852      	addeq	r2, r2, r1
 800413c:	6022      	streq	r2, [r4, #0]
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6004      	str	r4, [r0, #0]
 8004142:	e7ed      	b.n	8004120 <_free_r+0x24>
 8004144:	4613      	mov	r3, r2
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	b10a      	cbz	r2, 800414e <_free_r+0x52>
 800414a:	42a2      	cmp	r2, r4
 800414c:	d9fa      	bls.n	8004144 <_free_r+0x48>
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	1858      	adds	r0, r3, r1
 8004152:	42a0      	cmp	r0, r4
 8004154:	d10b      	bne.n	800416e <_free_r+0x72>
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	4401      	add	r1, r0
 800415a:	1858      	adds	r0, r3, r1
 800415c:	4282      	cmp	r2, r0
 800415e:	6019      	str	r1, [r3, #0]
 8004160:	d1de      	bne.n	8004120 <_free_r+0x24>
 8004162:	6810      	ldr	r0, [r2, #0]
 8004164:	6852      	ldr	r2, [r2, #4]
 8004166:	4401      	add	r1, r0
 8004168:	6019      	str	r1, [r3, #0]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	e7d8      	b.n	8004120 <_free_r+0x24>
 800416e:	d902      	bls.n	8004176 <_free_r+0x7a>
 8004170:	230c      	movs	r3, #12
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	e7d4      	b.n	8004120 <_free_r+0x24>
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	1821      	adds	r1, r4, r0
 800417a:	428a      	cmp	r2, r1
 800417c:	bf01      	itttt	eq
 800417e:	6811      	ldreq	r1, [r2, #0]
 8004180:	6852      	ldreq	r2, [r2, #4]
 8004182:	1809      	addeq	r1, r1, r0
 8004184:	6021      	streq	r1, [r4, #0]
 8004186:	6062      	str	r2, [r4, #4]
 8004188:	605c      	str	r4, [r3, #4]
 800418a:	e7c9      	b.n	8004120 <_free_r+0x24>
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	20000098 	.word	0x20000098

08004194 <_malloc_r>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	1ccd      	adds	r5, r1, #3
 8004198:	f025 0503 	bic.w	r5, r5, #3
 800419c:	3508      	adds	r5, #8
 800419e:	2d0c      	cmp	r5, #12
 80041a0:	bf38      	it	cc
 80041a2:	250c      	movcc	r5, #12
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	4606      	mov	r6, r0
 80041a8:	db01      	blt.n	80041ae <_malloc_r+0x1a>
 80041aa:	42a9      	cmp	r1, r5
 80041ac:	d903      	bls.n	80041b6 <_malloc_r+0x22>
 80041ae:	230c      	movs	r3, #12
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	2000      	movs	r0, #0
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	f000 f87d 	bl	80042b4 <__malloc_lock>
 80041ba:	4a21      	ldr	r2, [pc, #132]	; (8004240 <_malloc_r+0xac>)
 80041bc:	6814      	ldr	r4, [r2, #0]
 80041be:	4621      	mov	r1, r4
 80041c0:	b991      	cbnz	r1, 80041e8 <_malloc_r+0x54>
 80041c2:	4c20      	ldr	r4, [pc, #128]	; (8004244 <_malloc_r+0xb0>)
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	b91b      	cbnz	r3, 80041d0 <_malloc_r+0x3c>
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f863 	bl	8004294 <_sbrk_r>
 80041ce:	6020      	str	r0, [r4, #0]
 80041d0:	4629      	mov	r1, r5
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 f85e 	bl	8004294 <_sbrk_r>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d124      	bne.n	8004226 <_malloc_r+0x92>
 80041dc:	230c      	movs	r3, #12
 80041de:	4630      	mov	r0, r6
 80041e0:	6033      	str	r3, [r6, #0]
 80041e2:	f000 f868 	bl	80042b6 <__malloc_unlock>
 80041e6:	e7e4      	b.n	80041b2 <_malloc_r+0x1e>
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	1b5b      	subs	r3, r3, r5
 80041ec:	d418      	bmi.n	8004220 <_malloc_r+0x8c>
 80041ee:	2b0b      	cmp	r3, #11
 80041f0:	d90f      	bls.n	8004212 <_malloc_r+0x7e>
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	18cc      	adds	r4, r1, r3
 80041f6:	50cd      	str	r5, [r1, r3]
 80041f8:	4630      	mov	r0, r6
 80041fa:	f000 f85c 	bl	80042b6 <__malloc_unlock>
 80041fe:	f104 000b 	add.w	r0, r4, #11
 8004202:	1d23      	adds	r3, r4, #4
 8004204:	f020 0007 	bic.w	r0, r0, #7
 8004208:	1ac3      	subs	r3, r0, r3
 800420a:	d0d3      	beq.n	80041b4 <_malloc_r+0x20>
 800420c:	425a      	negs	r2, r3
 800420e:	50e2      	str	r2, [r4, r3]
 8004210:	e7d0      	b.n	80041b4 <_malloc_r+0x20>
 8004212:	684b      	ldr	r3, [r1, #4]
 8004214:	428c      	cmp	r4, r1
 8004216:	bf16      	itet	ne
 8004218:	6063      	strne	r3, [r4, #4]
 800421a:	6013      	streq	r3, [r2, #0]
 800421c:	460c      	movne	r4, r1
 800421e:	e7eb      	b.n	80041f8 <_malloc_r+0x64>
 8004220:	460c      	mov	r4, r1
 8004222:	6849      	ldr	r1, [r1, #4]
 8004224:	e7cc      	b.n	80041c0 <_malloc_r+0x2c>
 8004226:	1cc4      	adds	r4, r0, #3
 8004228:	f024 0403 	bic.w	r4, r4, #3
 800422c:	42a0      	cmp	r0, r4
 800422e:	d005      	beq.n	800423c <_malloc_r+0xa8>
 8004230:	1a21      	subs	r1, r4, r0
 8004232:	4630      	mov	r0, r6
 8004234:	f000 f82e 	bl	8004294 <_sbrk_r>
 8004238:	3001      	adds	r0, #1
 800423a:	d0cf      	beq.n	80041dc <_malloc_r+0x48>
 800423c:	6025      	str	r5, [r4, #0]
 800423e:	e7db      	b.n	80041f8 <_malloc_r+0x64>
 8004240:	20000098 	.word	0x20000098
 8004244:	2000009c 	.word	0x2000009c

08004248 <_realloc_r>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	4607      	mov	r7, r0
 800424c:	4614      	mov	r4, r2
 800424e:	460e      	mov	r6, r1
 8004250:	b921      	cbnz	r1, 800425c <_realloc_r+0x14>
 8004252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004256:	4611      	mov	r1, r2
 8004258:	f7ff bf9c 	b.w	8004194 <_malloc_r>
 800425c:	b922      	cbnz	r2, 8004268 <_realloc_r+0x20>
 800425e:	f7ff ff4d 	bl	80040fc <_free_r>
 8004262:	4625      	mov	r5, r4
 8004264:	4628      	mov	r0, r5
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004268:	f000 f826 	bl	80042b8 <_malloc_usable_size_r>
 800426c:	42a0      	cmp	r0, r4
 800426e:	d20f      	bcs.n	8004290 <_realloc_r+0x48>
 8004270:	4621      	mov	r1, r4
 8004272:	4638      	mov	r0, r7
 8004274:	f7ff ff8e 	bl	8004194 <_malloc_r>
 8004278:	4605      	mov	r5, r0
 800427a:	2800      	cmp	r0, #0
 800427c:	d0f2      	beq.n	8004264 <_realloc_r+0x1c>
 800427e:	4631      	mov	r1, r6
 8004280:	4622      	mov	r2, r4
 8004282:	f7ff ff17 	bl	80040b4 <memcpy>
 8004286:	4631      	mov	r1, r6
 8004288:	4638      	mov	r0, r7
 800428a:	f7ff ff37 	bl	80040fc <_free_r>
 800428e:	e7e9      	b.n	8004264 <_realloc_r+0x1c>
 8004290:	4635      	mov	r5, r6
 8004292:	e7e7      	b.n	8004264 <_realloc_r+0x1c>

08004294 <_sbrk_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	2300      	movs	r3, #0
 8004298:	4c05      	ldr	r4, [pc, #20]	; (80042b0 <_sbrk_r+0x1c>)
 800429a:	4605      	mov	r5, r0
 800429c:	4608      	mov	r0, r1
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	f7ff fb44 	bl	800392c <_sbrk>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_sbrk_r+0x1a>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_sbrk_r+0x1a>
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	20000164 	.word	0x20000164

080042b4 <__malloc_lock>:
 80042b4:	4770      	bx	lr

080042b6 <__malloc_unlock>:
 80042b6:	4770      	bx	lr

080042b8 <_malloc_usable_size_r>:
 80042b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042bc:	1f18      	subs	r0, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfbc      	itt	lt
 80042c2:	580b      	ldrlt	r3, [r1, r0]
 80042c4:	18c0      	addlt	r0, r0, r3
 80042c6:	4770      	bx	lr

080042c8 <_init>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr

080042d4 <_fini>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr
