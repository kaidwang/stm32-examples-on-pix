
SPI_MPU6000_STM32F427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006c58  08006c58  00016c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f50  08006f50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f58  08006f58  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  0800713c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800713c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f875  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002504  00000000  00000000  0002fa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00031f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245a5  00000000  00000000  00033ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c71f  00000000  00000000  00058285  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d97ae  00000000  00000000  000649a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  0013e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c40 	.word	0x08006c40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006c40 	.word	0x08006c40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94d 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f002 ff88 	bl	8003e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f965 	bl	80011fa <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f92d 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004
 8000f68:	20000000 	.word	0x20000000

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000208 	.word	0x20000208

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000208 	.word	0x20000208

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_Delay+0x40>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000004 	.word	0x20000004

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d004      	beq.n	8001230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2205      	movs	r2, #5
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e177      	b.n	8001564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8166 	bne.w	800155e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00b      	beq.n	80012b2 <HAL_GPIO_Init+0x5a>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a6:	2b11      	cmp	r3, #17
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d130      	bne.n	8001314 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 0201 	and.w	r2, r3, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0xfc>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b12      	cmp	r3, #18
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80c0 	beq.w	800155e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_GPIO_Init+0x320>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HAL_GPIO_Init+0x320>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_GPIO_Init+0x320>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_GPIO_Init+0x324>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_GPIO_Init+0x328>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d037      	beq.n	8001496 <HAL_GPIO_Init+0x23e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a56      	ldr	r2, [pc, #344]	; (8001584 <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d031      	beq.n	8001492 <HAL_GPIO_Init+0x23a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a55      	ldr	r2, [pc, #340]	; (8001588 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d02b      	beq.n	800148e <HAL_GPIO_Init+0x236>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a54      	ldr	r2, [pc, #336]	; (800158c <HAL_GPIO_Init+0x334>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x232>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a53      	ldr	r2, [pc, #332]	; (8001590 <HAL_GPIO_Init+0x338>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x22e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_GPIO_Init+0x33c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x22a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a51      	ldr	r2, [pc, #324]	; (8001598 <HAL_GPIO_Init+0x340>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x226>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a50      	ldr	r2, [pc, #320]	; (800159c <HAL_GPIO_Init+0x344>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x222>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_GPIO_Init+0x348>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x21e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <HAL_GPIO_Init+0x34c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x21a>
 800146e:	2309      	movs	r3, #9
 8001470:	e012      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001472:	230a      	movs	r3, #10
 8001474:	e010      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001476:	2308      	movs	r3, #8
 8001478:	e00e      	b.n	8001498 <HAL_GPIO_Init+0x240>
 800147a:	2307      	movs	r3, #7
 800147c:	e00c      	b.n	8001498 <HAL_GPIO_Init+0x240>
 800147e:	2306      	movs	r3, #6
 8001480:	e00a      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001482:	2305      	movs	r3, #5
 8001484:	e008      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001486:	2304      	movs	r3, #4
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x240>
 800148a:	2303      	movs	r3, #3
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x240>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x240>
 8001496:	2300      	movs	r3, #0
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a8:	4934      	ldr	r1, [pc, #208]	; (800157c <HAL_GPIO_Init+0x324>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_GPIO_Init+0x350>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_GPIO_Init+0x350>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_GPIO_Init+0x350>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_GPIO_Init+0x350>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_GPIO_Init+0x350>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_GPIO_Init+0x350>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	f67f ae84 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800156c:	bf00      	nop
 800156e:	3724      	adds	r7, #36	; 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40022400 	.word	0x40022400
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_PWREx_EnableOverDrive+0x90>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_PWREx_EnableOverDrive+0x90>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_PWREx_EnableOverDrive+0x90>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_PWREx_EnableOverDrive+0x94>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800160c:	f7ff fcc2 	bl	8000f94 <HAL_GetTick>
 8001610:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001612:	e009      	b.n	8001628 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001614:	f7ff fcbe 	bl	8000f94 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001622:	d901      	bls.n	8001628 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e01f      	b.n	8001668 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_PWREx_EnableOverDrive+0x98>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d1ee      	bne.n	8001614 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163c:	f7ff fcaa 	bl	8000f94 <HAL_GetTick>
 8001640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001642:	e009      	b.n	8001658 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001644:	f7ff fca6 	bl	8000f94 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001652:	d901      	bls.n	8001658 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e007      	b.n	8001668 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_PWREx_EnableOverDrive+0x98>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001664:	d1ee      	bne.n	8001644 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	420e0040 	.word	0x420e0040
 8001678:	40007000 	.word	0x40007000
 800167c:	420e0044 	.word	0x420e0044

08001680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e25b      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d075      	beq.n	800178a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	4ba3      	ldr	r3, [pc, #652]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4ba0      	ldr	r3, [pc, #640]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b9d      	ldr	r3, [pc, #628]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b99      	ldr	r3, [pc, #612]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e236      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x74>
 80016e6:	4b91      	ldr	r3, [pc, #580]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a90      	ldr	r2, [pc, #576]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a87      	ldr	r2, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001718:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a83      	ldr	r2, [pc, #524]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a80      	ldr	r2, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fc2c 	bl	8000f94 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc28 	bl	8000f94 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1fb      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc18 	bl	8000f94 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fc14 	bl	8000f94 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1e7      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b6c      	ldr	r3, [pc, #432]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0xe8>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1bb      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4952      	ldr	r1, [pc, #328]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_RCC_OscConfig+0x2b0>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fbcd 	bl	8000f94 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fbc9 	bl	8000f94 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e19c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4940      	ldr	r1, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x2b0>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fbac 	bl	8000f94 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fba8 	bl	8000f94 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e17b      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d030      	beq.n	80018cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_OscConfig+0x2b4>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fb8c 	bl	8000f94 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fb88 	bl	8000f94 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e15b      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x200>
 800189e:	e015      	b.n	80018cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x2b4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb75 	bl	8000f94 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb71 	bl	8000f94 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e144      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a0 	beq.w	8001a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d121      	bne.n	800195a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb37 	bl	8000f94 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x2ce>
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	42470000 	.word	0x42470000
 8001934:	42470e80 	.word	0x42470e80
 8001938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193c:	f7ff fb2a 	bl	8000f94 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0fd      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <HAL_RCC_OscConfig+0x4d4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a7c      	ldr	r2, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	e01c      	b.n	80019aa <HAL_RCC_OscConfig+0x32a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001978:	4b77      	ldr	r3, [pc, #476]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a76      	ldr	r2, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a73      	ldr	r2, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	e00b      	b.n	80019aa <HAL_RCC_OscConfig+0x32a>
 8001992:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a70      	ldr	r2, [pc, #448]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b6e      	ldr	r3, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a6d      	ldr	r2, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d015      	beq.n	80019de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff faef 	bl	8000f94 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff faeb 	bl	8000f94 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0bc      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ee      	beq.n	80019ba <HAL_RCC_OscConfig+0x33a>
 80019dc:	e014      	b.n	8001a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff fad9 	bl	8000f94 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff fad5 	bl	8000f94 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0a6      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a51      	ldr	r2, [pc, #324]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8092 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a24:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d05c      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d141      	bne.n	8001abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a38:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff faa9 	bl	8000f94 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff faa5 	bl	8000f94 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e078      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	019b      	lsls	r3, r3, #6
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	4933      	ldr	r1, [pc, #204]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4dc>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fa7e 	bl	8000f94 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff fa7a 	bl	8000f94 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04d      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x41c>
 8001aba:	e045      	b.n	8001b48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_OscConfig+0x4dc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa67 	bl	8000f94 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fa63 	bl	8000f94 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e036      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x44a>
 8001ae8:	e02e      	b.n	8001b48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e029      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_RCC_OscConfig+0x4d8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	42470060 	.word	0x42470060

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0cc      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d90c      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b8      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494d      	ldr	r1, [pc, #308]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d044      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e067      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4934      	ldr	r1, [pc, #208]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f9a0 	bl	8000f94 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f99c 	bl	8000f94 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e032      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4916      	ldr	r1, [pc, #88]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490e      	ldr	r1, [pc, #56]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f821 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001cea:	4601      	mov	r1, r0
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f900 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08006c78 	.word	0x08006c78
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d42:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d007      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x32>
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d008      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x38>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 808d 	bne.w	8001e72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d5a:	60bb      	str	r3, [r7, #8]
       break;
 8001d5c:	e08c      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d60:	60bb      	str	r3, [r7, #8]
      break;
 8001d62:	e089      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d6e:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	f04f 0400 	mov.w	r4, #0
 8001d84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	ea03 0501 	and.w	r5, r3, r1
 8001d90:	ea04 0602 	and.w	r6, r4, r2
 8001d94:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d96:	fb02 f106 	mul.w	r1, r2, r6
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	fb02 f205 	mul.w	r2, r2, r5
 8001da0:	440a      	add	r2, r1
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001da4:	fba5 0101 	umull	r0, r1, r5, r1
 8001da8:	1853      	adds	r3, r2, r1
 8001daa:	4619      	mov	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4623      	mov	r3, r4
 8001db6:	f7fe ff07 	bl	8000bc8 <__aeabi_uldivmod>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e049      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	f04f 0400 	mov.w	r4, #0
 8001dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	ea03 0501 	and.w	r5, r3, r1
 8001dd8:	ea04 0602 	and.w	r6, r4, r2
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4632      	mov	r2, r6
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	f04f 0400 	mov.w	r4, #0
 8001de8:	0154      	lsls	r4, r2, #5
 8001dea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dee:	014b      	lsls	r3, r1, #5
 8001df0:	4619      	mov	r1, r3
 8001df2:	4622      	mov	r2, r4
 8001df4:	1b49      	subs	r1, r1, r5
 8001df6:	eb62 0206 	sbc.w	r2, r2, r6
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	f04f 0400 	mov.w	r4, #0
 8001e02:	0194      	lsls	r4, r2, #6
 8001e04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e08:	018b      	lsls	r3, r1, #6
 8001e0a:	1a5b      	subs	r3, r3, r1
 8001e0c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	00e2      	lsls	r2, r4, #3
 8001e1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e1e:	00d9      	lsls	r1, r3, #3
 8001e20:	460b      	mov	r3, r1
 8001e22:	4614      	mov	r4, r2
 8001e24:	195b      	adds	r3, r3, r5
 8001e26:	eb44 0406 	adc.w	r4, r4, r6
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	02a2      	lsls	r2, r4, #10
 8001e34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e38:	0299      	lsls	r1, r3, #10
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4621      	mov	r1, r4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f04f 0400 	mov.w	r4, #0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	f7fe febc 	bl	8000bc8 <__aeabi_uldivmod>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	3301      	adds	r3, #1
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	60bb      	str	r3, [r7, #8]
      break;
 8001e70:	e002      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e74:	60bb      	str	r3, [r7, #8]
      break;
 8001e76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e78:	68bb      	ldr	r3, [r7, #8]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	016e3600 	.word	0x016e3600

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a9b      	lsrs	r3, r3, #10
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	08006c88 	.word	0x08006c88

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffdc 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0b5b      	lsrs	r3, r3, #13
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4a03      	ldr	r2, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08006c88 	.word	0x08006c88

08001ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e056      	b.n	8001fb8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d106      	bne.n	8001f2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f001 ff9b 	bl	8003e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	ea42 0103 	orr.w	r1, r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	f003 0104 	and.w	r1, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e18a      	b.n	80022fc <HAL_SPI_TransmitReceive+0x33c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fee:	f7fe ffd1 	bl	8000f94 <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800200c:	2b01      	cmp	r3, #1
 800200e:	d00f      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x70>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002016:	d107      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x68>
 8002020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002024:	2b04      	cmp	r3, #4
 8002026:	d003      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002028:	2302      	movs	r3, #2
 800202a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800202e:	e15b      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x82>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x82>
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002048:	e14e      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d007      	beq.n	80020b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ba:	d178      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x10a>
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d166      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ee:	e053      	b.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d11b      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x176>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <HAL_SPI_TransmitReceive+0x176>
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d113      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	1c9a      	adds	r2, r3, #2
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d119      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x1b8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d014      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	b292      	uxth	r2, r2
 800215a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002174:	2301      	movs	r3, #1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002178:	f7fe ff0c 	bl	8000f94 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002184:	429a      	cmp	r2, r3
 8002186:	d807      	bhi.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d003      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002196:	e0a7      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1a6      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x130>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a1      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x130>
 80021ac:	e07c      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1fc>
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d16b      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e2:	e057      	b.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d11c      	bne.n	800222c <HAL_SPI_TransmitReceive+0x26c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <HAL_SPI_TransmitReceive+0x26c>
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d114      	bne.n	800222c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d119      	bne.n	800226e <HAL_SPI_TransmitReceive+0x2ae>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800226a:	2301      	movs	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800226e:	f7fe fe91 	bl	8000f94 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800227a:	429a      	cmp	r2, r3
 800227c:	d803      	bhi.n	8002286 <HAL_SPI_TransmitReceive+0x2c6>
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d102      	bne.n	800228c <HAL_SPI_TransmitReceive+0x2cc>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002292:	e029      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1a2      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x224>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d19d      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f893 	bl	80023d8 <SPI_EndRxTxTransaction>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022c4:	e010      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	e000      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3730      	adds	r7, #48	; 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002314:	e04c      	b.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d048      	beq.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800231e:	f7fe fe39 	bl	8000f94 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d902      	bls.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x30>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d13d      	bne.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234c:	d111      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002356:	d004      	beq.n	8002362 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d107      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d10f      	bne.n	800239c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e00f      	b.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	429a      	cmp	r2, r3
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d1a3      	bne.n	8002316 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <SPI_EndRxTxTransaction+0x7c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <SPI_EndRxTxTransaction+0x80>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0d5b      	lsrs	r3, r3, #21
 80023f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002402:	d112      	bne.n	800242a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff78 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3b01      	subs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d0f2      	beq.n	800242a <SPI_EndRxTxTransaction+0x52>
 8002444:	e000      	b.n	8002448 <SPI_EndRxTxTransaction+0x70>
        break;
 8002446:	bf00      	nop
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008
 8002458:	165e9f81 	.word	0x165e9f81

0800245c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01d      	b.n	80024aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fd34 	bl	8003ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 f910 	bl	80026c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d007      	beq.n	80024e4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	f241 1311 	movw	r3, #4369	; 0x1111
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_TIM_Base_Stop+0x40>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	f240 4344 	movw	r3, #1092	; 0x444
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_TIM_Base_Stop+0x40>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_TIM_ConfigClockSource+0x18>
 8002564:	2302      	movs	r3, #2
 8002566:	e0a6      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x166>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d067      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0x120>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d80b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x6c>
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d073      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d802      	bhi.n	80025b2 <HAL_TIM_ConfigClockSource+0x62>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d06f      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025b0:	e078      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d06c      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
 80025b6:	2b30      	cmp	r3, #48	; 0x30
 80025b8:	d06a      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025ba:	e073      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d00d      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x8c>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d804      	bhi.n	80025ce <HAL_TIM_ConfigClockSource+0x7e>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d033      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0xe0>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d041      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025cc:	e06a      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	d066      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x152>
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d017      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025da:	e063      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f000 f982 	bl	80028f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e04c      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f000 f96b 	bl	80028f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262c:	609a      	str	r2, [r3, #8]
      break;
 800262e:	e039      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	f000 f8df 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2150      	movs	r1, #80	; 0x50
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f938 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800264e:	e029      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f000 f8fe 	bl	800285e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2160      	movs	r1, #96	; 0x60
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f928 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800266e:	e019      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	461a      	mov	r2, r3
 800267e:	f000 f8bf 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f918 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800268e:	e009      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f90f 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80026a0:	e000      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a40      	ldr	r2, [pc, #256]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d00f      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00b      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d027      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d023      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d017      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <TIM_Base_SetConfig+0x128>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <TIM_Base_SetConfig+0x12c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <TIM_Base_SetConfig+0x130>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0x134>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <TIM_Base_SetConfig+0x138>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <TIM_Base_SetConfig+0x13c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xf8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40010400 	.word	0x40010400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40001800 	.word	0x40001800
 80027f8:	40001c00 	.word	0x40001c00
 80027fc:	40002000 	.word	0x40002000

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e05a      	b.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d01d      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40010400 	.word	0x40010400
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40001800 	.word	0x40001800

08002a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03f      	b.n	8002abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f001 fa6c 	bl	8003f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fb4b 	bl	800310c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b088      	sub	sp, #32
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 8083 	bne.w	8002bee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_Transmit+0x2e>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e07b      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Transmit+0x40>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e074      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2221      	movs	r2, #33	; 0x21
 8002b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fa3a 	bl	8000f94 <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b36:	e042      	b.n	8002bbe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d122      	bne.n	8002b96 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f96a 	bl	8002e34 <UART_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e042      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	e017      	b.n	8002bbe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	e013      	b.n	8002bbe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f947 	bl	8002e34 <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e01f      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1b7      	bne.n	8002b38 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f92e 	bl	8002e34 <UART_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e006      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_UART_IRQHandler+0x52>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9e0 	bl	8003008 <UART_Receive_IT>
      return;
 8002c48:	e0d1      	b.n	8002dee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b0 	beq.w	8002db2 <HAL_UART_IRQHandler+0x1ba>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_UART_IRQHandler+0x70>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a5 	beq.w	8002db2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_UART_IRQHandler+0x90>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xb0>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	f043 0202 	orr.w	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_UART_IRQHandler+0xd0>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00f      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xfa>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <HAL_UART_IRQHandler+0xee>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	f043 0208 	orr.w	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d078      	beq.n	8002dec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_UART_IRQHandler+0x11c>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f97a 	bl	8003008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_UART_IRQHandler+0x144>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d031      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f8c3 	bl	8002ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d123      	bne.n	8002d98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_UART_IRQHandler+0x1fc>)
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fa4c 	bl	8001212 <HAL_DMA_Abort_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d016      	beq.n	8002dae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8e:	e00e      	b.n	8002dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f845 	bl	8002e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d96:	e00a      	b.n	8002dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f841 	bl	8002e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9e:	e006      	b.n	8002dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f83d 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dac:	e01e      	b.n	8002dec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dae:	bf00      	nop
    return;
 8002db0:	e01c      	b.n	8002dec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x1d6>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8b0 	bl	8002f2c <UART_Transmit_IT>
    return;
 8002dcc:	e00f      	b.n	8002dee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_UART_IRQHandler+0x1f6>
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8f8 	bl	8002fd8 <UART_EndTransmit_IT>
    return;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <HAL_UART_IRQHandler+0x1f6>
    return;
 8002dec:	bf00      	nop
  }
}
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08002f05 	.word	0x08002f05

08002df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e44:	e02c      	b.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d028      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e54:	f7fe f89e 	bl	8000f94 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d21d      	bcs.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e00f      	b.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d0c3      	beq.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ede:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ff7e 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b21      	cmp	r3, #33	; 0x21
 8002f3e:	d144      	bne.n	8002fca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d11a      	bne.n	8002f80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]
 8002f72:	e00e      	b.n	8002f92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]
 8002f7e:	e008      	b.n	8002f92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	1c59      	adds	r1, r3, #1
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6211      	str	r1, [r2, #32]
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fefd 	bl	8002df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b22      	cmp	r3, #34	; 0x22
 800301a:	d171      	bne.n	8003100 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d123      	bne.n	800306e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10e      	bne.n	8003052 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
 8003050:	e029      	b.n	80030a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	b29b      	uxth	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
 800306c:	e01b      	b.n	80030a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6858      	ldr	r0, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	1c59      	adds	r1, r3, #1
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6291      	str	r1, [r2, #40]	; 0x28
 8003086:	b2c2      	uxtb	r2, r0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e00c      	b.n	80030a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	1c58      	adds	r0, r3, #1
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	6288      	str	r0, [r1, #40]	; 0x28
 800309e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d120      	bne.n	80030fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0220 	bic.w	r2, r2, #32
 80030c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fe8a 	bl	8002e0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e002      	b.n	8003102 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800314e:	f023 030c 	bic.w	r3, r3, #12
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	430b      	orrs	r3, r1
 800315a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	f040 818b 	bne.w	8003494 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4ac1      	ldr	r2, [pc, #772]	; (8003488 <UART_SetConfig+0x37c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d005      	beq.n	8003194 <UART_SetConfig+0x88>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4abf      	ldr	r2, [pc, #764]	; (800348c <UART_SetConfig+0x380>)
 800318e:	4293      	cmp	r3, r2
 8003190:	f040 80bd 	bne.w	800330e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7fe fe9c 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8003198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	461d      	mov	r5, r3
 800319e:	f04f 0600 	mov.w	r6, #0
 80031a2:	46a8      	mov	r8, r5
 80031a4:	46b1      	mov	r9, r6
 80031a6:	eb18 0308 	adds.w	r3, r8, r8
 80031aa:	eb49 0409 	adc.w	r4, r9, r9
 80031ae:	4698      	mov	r8, r3
 80031b0:	46a1      	mov	r9, r4
 80031b2:	eb18 0805 	adds.w	r8, r8, r5
 80031b6:	eb49 0906 	adc.w	r9, r9, r6
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031ce:	4688      	mov	r8, r1
 80031d0:	4691      	mov	r9, r2
 80031d2:	eb18 0005 	adds.w	r0, r8, r5
 80031d6:	eb49 0106 	adc.w	r1, r9, r6
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	461d      	mov	r5, r3
 80031e0:	f04f 0600 	mov.w	r6, #0
 80031e4:	196b      	adds	r3, r5, r5
 80031e6:	eb46 0406 	adc.w	r4, r6, r6
 80031ea:	461a      	mov	r2, r3
 80031ec:	4623      	mov	r3, r4
 80031ee:	f7fd fceb 	bl	8000bc8 <__aeabi_uldivmod>
 80031f2:	4603      	mov	r3, r0
 80031f4:	460c      	mov	r4, r1
 80031f6:	461a      	mov	r2, r3
 80031f8:	4ba5      	ldr	r3, [pc, #660]	; (8003490 <UART_SetConfig+0x384>)
 80031fa:	fba3 2302 	umull	r2, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	461d      	mov	r5, r3
 8003208:	f04f 0600 	mov.w	r6, #0
 800320c:	46a9      	mov	r9, r5
 800320e:	46b2      	mov	sl, r6
 8003210:	eb19 0309 	adds.w	r3, r9, r9
 8003214:	eb4a 040a 	adc.w	r4, sl, sl
 8003218:	4699      	mov	r9, r3
 800321a:	46a2      	mov	sl, r4
 800321c:	eb19 0905 	adds.w	r9, r9, r5
 8003220:	eb4a 0a06 	adc.w	sl, sl, r6
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003238:	4689      	mov	r9, r1
 800323a:	4692      	mov	sl, r2
 800323c:	eb19 0005 	adds.w	r0, r9, r5
 8003240:	eb4a 0106 	adc.w	r1, sl, r6
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	461d      	mov	r5, r3
 800324a:	f04f 0600 	mov.w	r6, #0
 800324e:	196b      	adds	r3, r5, r5
 8003250:	eb46 0406 	adc.w	r4, r6, r6
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	f7fd fcb6 	bl	8000bc8 <__aeabi_uldivmod>
 800325c:	4603      	mov	r3, r0
 800325e:	460c      	mov	r4, r1
 8003260:	461a      	mov	r2, r3
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <UART_SetConfig+0x384>)
 8003264:	fba3 1302 	umull	r1, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	2164      	movs	r1, #100	; 0x64
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	3332      	adds	r3, #50	; 0x32
 8003276:	4a86      	ldr	r2, [pc, #536]	; (8003490 <UART_SetConfig+0x384>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003284:	4498      	add	r8, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	461d      	mov	r5, r3
 800328a:	f04f 0600 	mov.w	r6, #0
 800328e:	46a9      	mov	r9, r5
 8003290:	46b2      	mov	sl, r6
 8003292:	eb19 0309 	adds.w	r3, r9, r9
 8003296:	eb4a 040a 	adc.w	r4, sl, sl
 800329a:	4699      	mov	r9, r3
 800329c:	46a2      	mov	sl, r4
 800329e:	eb19 0905 	adds.w	r9, r9, r5
 80032a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ba:	4689      	mov	r9, r1
 80032bc:	4692      	mov	sl, r2
 80032be:	eb19 0005 	adds.w	r0, r9, r5
 80032c2:	eb4a 0106 	adc.w	r1, sl, r6
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	461d      	mov	r5, r3
 80032cc:	f04f 0600 	mov.w	r6, #0
 80032d0:	196b      	adds	r3, r5, r5
 80032d2:	eb46 0406 	adc.w	r4, r6, r6
 80032d6:	461a      	mov	r2, r3
 80032d8:	4623      	mov	r3, r4
 80032da:	f7fd fc75 	bl	8000bc8 <__aeabi_uldivmod>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <UART_SetConfig+0x384>)
 80032e6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2164      	movs	r1, #100	; 0x64
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a65      	ldr	r2, [pc, #404]	; (8003490 <UART_SetConfig+0x384>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 0207 	and.w	r2, r3, #7
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4442      	add	r2, r8
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e26f      	b.n	80037ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330e:	f7fe fdcb 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8003312:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	461d      	mov	r5, r3
 8003318:	f04f 0600 	mov.w	r6, #0
 800331c:	46a8      	mov	r8, r5
 800331e:	46b1      	mov	r9, r6
 8003320:	eb18 0308 	adds.w	r3, r8, r8
 8003324:	eb49 0409 	adc.w	r4, r9, r9
 8003328:	4698      	mov	r8, r3
 800332a:	46a1      	mov	r9, r4
 800332c:	eb18 0805 	adds.w	r8, r8, r5
 8003330:	eb49 0906 	adc.w	r9, r9, r6
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003340:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003344:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003348:	4688      	mov	r8, r1
 800334a:	4691      	mov	r9, r2
 800334c:	eb18 0005 	adds.w	r0, r8, r5
 8003350:	eb49 0106 	adc.w	r1, r9, r6
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	461d      	mov	r5, r3
 800335a:	f04f 0600 	mov.w	r6, #0
 800335e:	196b      	adds	r3, r5, r5
 8003360:	eb46 0406 	adc.w	r4, r6, r6
 8003364:	461a      	mov	r2, r3
 8003366:	4623      	mov	r3, r4
 8003368:	f7fd fc2e 	bl	8000bc8 <__aeabi_uldivmod>
 800336c:	4603      	mov	r3, r0
 800336e:	460c      	mov	r4, r1
 8003370:	461a      	mov	r2, r3
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <UART_SetConfig+0x384>)
 8003374:	fba3 2302 	umull	r2, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	461d      	mov	r5, r3
 8003382:	f04f 0600 	mov.w	r6, #0
 8003386:	46a9      	mov	r9, r5
 8003388:	46b2      	mov	sl, r6
 800338a:	eb19 0309 	adds.w	r3, r9, r9
 800338e:	eb4a 040a 	adc.w	r4, sl, sl
 8003392:	4699      	mov	r9, r3
 8003394:	46a2      	mov	sl, r4
 8003396:	eb19 0905 	adds.w	r9, r9, r5
 800339a:	eb4a 0a06 	adc.w	sl, sl, r6
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033b2:	4689      	mov	r9, r1
 80033b4:	4692      	mov	sl, r2
 80033b6:	eb19 0005 	adds.w	r0, r9, r5
 80033ba:	eb4a 0106 	adc.w	r1, sl, r6
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	461d      	mov	r5, r3
 80033c4:	f04f 0600 	mov.w	r6, #0
 80033c8:	196b      	adds	r3, r5, r5
 80033ca:	eb46 0406 	adc.w	r4, r6, r6
 80033ce:	461a      	mov	r2, r3
 80033d0:	4623      	mov	r3, r4
 80033d2:	f7fd fbf9 	bl	8000bc8 <__aeabi_uldivmod>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	461a      	mov	r2, r3
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <UART_SetConfig+0x384>)
 80033de:	fba3 1302 	umull	r1, r3, r3, r2
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2164      	movs	r1, #100	; 0x64
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	3332      	adds	r3, #50	; 0x32
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <UART_SetConfig+0x384>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033fe:	4498      	add	r8, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	461d      	mov	r5, r3
 8003404:	f04f 0600 	mov.w	r6, #0
 8003408:	46a9      	mov	r9, r5
 800340a:	46b2      	mov	sl, r6
 800340c:	eb19 0309 	adds.w	r3, r9, r9
 8003410:	eb4a 040a 	adc.w	r4, sl, sl
 8003414:	4699      	mov	r9, r3
 8003416:	46a2      	mov	sl, r4
 8003418:	eb19 0905 	adds.w	r9, r9, r5
 800341c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800342c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003434:	4689      	mov	r9, r1
 8003436:	4692      	mov	sl, r2
 8003438:	eb19 0005 	adds.w	r0, r9, r5
 800343c:	eb4a 0106 	adc.w	r1, sl, r6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	461d      	mov	r5, r3
 8003446:	f04f 0600 	mov.w	r6, #0
 800344a:	196b      	adds	r3, r5, r5
 800344c:	eb46 0406 	adc.w	r4, r6, r6
 8003450:	461a      	mov	r2, r3
 8003452:	4623      	mov	r3, r4
 8003454:	f7fd fbb8 	bl	8000bc8 <__aeabi_uldivmod>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	461a      	mov	r2, r3
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <UART_SetConfig+0x384>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <UART_SetConfig+0x384>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 0207 	and.w	r2, r3, #7
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4442      	add	r2, r8
 8003484:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003486:	e1b2      	b.n	80037ee <UART_SetConfig+0x6e2>
 8003488:	40011000 	.word	0x40011000
 800348c:	40011400 	.word	0x40011400
 8003490:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4ad7      	ldr	r2, [pc, #860]	; (80037f8 <UART_SetConfig+0x6ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d005      	beq.n	80034aa <UART_SetConfig+0x39e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4ad6      	ldr	r2, [pc, #856]	; (80037fc <UART_SetConfig+0x6f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f040 80d1 	bne.w	800364c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80034aa:	f7fe fd11 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 80034ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	469a      	mov	sl, r3
 80034b4:	f04f 0b00 	mov.w	fp, #0
 80034b8:	46d0      	mov	r8, sl
 80034ba:	46d9      	mov	r9, fp
 80034bc:	eb18 0308 	adds.w	r3, r8, r8
 80034c0:	eb49 0409 	adc.w	r4, r9, r9
 80034c4:	4698      	mov	r8, r3
 80034c6:	46a1      	mov	r9, r4
 80034c8:	eb18 080a 	adds.w	r8, r8, sl
 80034cc:	eb49 090b 	adc.w	r9, r9, fp
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034e4:	4688      	mov	r8, r1
 80034e6:	4691      	mov	r9, r2
 80034e8:	eb1a 0508 	adds.w	r5, sl, r8
 80034ec:	eb4b 0609 	adc.w	r6, fp, r9
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	f04f 0400 	mov.w	r4, #0
 8003502:	0094      	lsls	r4, r2, #2
 8003504:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003508:	008b      	lsls	r3, r1, #2
 800350a:	461a      	mov	r2, r3
 800350c:	4623      	mov	r3, r4
 800350e:	4628      	mov	r0, r5
 8003510:	4631      	mov	r1, r6
 8003512:	f7fd fb59 	bl	8000bc8 <__aeabi_uldivmod>
 8003516:	4603      	mov	r3, r0
 8003518:	460c      	mov	r4, r1
 800351a:	461a      	mov	r2, r3
 800351c:	4bb8      	ldr	r3, [pc, #736]	; (8003800 <UART_SetConfig+0x6f4>)
 800351e:	fba3 2302 	umull	r2, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	469b      	mov	fp, r3
 800352c:	f04f 0c00 	mov.w	ip, #0
 8003530:	46d9      	mov	r9, fp
 8003532:	46e2      	mov	sl, ip
 8003534:	eb19 0309 	adds.w	r3, r9, r9
 8003538:	eb4a 040a 	adc.w	r4, sl, sl
 800353c:	4699      	mov	r9, r3
 800353e:	46a2      	mov	sl, r4
 8003540:	eb19 090b 	adds.w	r9, r9, fp
 8003544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800355c:	4689      	mov	r9, r1
 800355e:	4692      	mov	sl, r2
 8003560:	eb1b 0509 	adds.w	r5, fp, r9
 8003564:	eb4c 060a 	adc.w	r6, ip, sl
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4619      	mov	r1, r3
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	f04f 0400 	mov.w	r4, #0
 800357a:	0094      	lsls	r4, r2, #2
 800357c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	461a      	mov	r2, r3
 8003584:	4623      	mov	r3, r4
 8003586:	4628      	mov	r0, r5
 8003588:	4631      	mov	r1, r6
 800358a:	f7fd fb1d 	bl	8000bc8 <__aeabi_uldivmod>
 800358e:	4603      	mov	r3, r0
 8003590:	460c      	mov	r4, r1
 8003592:	461a      	mov	r2, r3
 8003594:	4b9a      	ldr	r3, [pc, #616]	; (8003800 <UART_SetConfig+0x6f4>)
 8003596:	fba3 1302 	umull	r1, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2164      	movs	r1, #100	; 0x64
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a95      	ldr	r2, [pc, #596]	; (8003800 <UART_SetConfig+0x6f4>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b4:	4498      	add	r8, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	469b      	mov	fp, r3
 80035ba:	f04f 0c00 	mov.w	ip, #0
 80035be:	46d9      	mov	r9, fp
 80035c0:	46e2      	mov	sl, ip
 80035c2:	eb19 0309 	adds.w	r3, r9, r9
 80035c6:	eb4a 040a 	adc.w	r4, sl, sl
 80035ca:	4699      	mov	r9, r3
 80035cc:	46a2      	mov	sl, r4
 80035ce:	eb19 090b 	adds.w	r9, r9, fp
 80035d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ea:	4689      	mov	r9, r1
 80035ec:	4692      	mov	sl, r2
 80035ee:	eb1b 0509 	adds.w	r5, fp, r9
 80035f2:	eb4c 060a 	adc.w	r6, ip, sl
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	0094      	lsls	r4, r2, #2
 800360a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800360e:	008b      	lsls	r3, r1, #2
 8003610:	461a      	mov	r2, r3
 8003612:	4623      	mov	r3, r4
 8003614:	4628      	mov	r0, r5
 8003616:	4631      	mov	r1, r6
 8003618:	f7fd fad6 	bl	8000bc8 <__aeabi_uldivmod>
 800361c:	4603      	mov	r3, r0
 800361e:	460c      	mov	r4, r1
 8003620:	461a      	mov	r2, r3
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <UART_SetConfig+0x6f4>)
 8003624:	fba3 1302 	umull	r1, r3, r3, r2
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	2164      	movs	r1, #100	; 0x64
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	3332      	adds	r3, #50	; 0x32
 8003636:	4a72      	ldr	r2, [pc, #456]	; (8003800 <UART_SetConfig+0x6f4>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	f003 020f 	and.w	r2, r3, #15
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4442      	add	r2, r8
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e0d0      	b.n	80037ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7fe fc2c 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8003650:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	469a      	mov	sl, r3
 8003656:	f04f 0b00 	mov.w	fp, #0
 800365a:	46d0      	mov	r8, sl
 800365c:	46d9      	mov	r9, fp
 800365e:	eb18 0308 	adds.w	r3, r8, r8
 8003662:	eb49 0409 	adc.w	r4, r9, r9
 8003666:	4698      	mov	r8, r3
 8003668:	46a1      	mov	r9, r4
 800366a:	eb18 080a 	adds.w	r8, r8, sl
 800366e:	eb49 090b 	adc.w	r9, r9, fp
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800367e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003682:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003686:	4688      	mov	r8, r1
 8003688:	4691      	mov	r9, r2
 800368a:	eb1a 0508 	adds.w	r5, sl, r8
 800368e:	eb4b 0609 	adc.w	r6, fp, r9
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	f04f 0400 	mov.w	r4, #0
 80036a4:	0094      	lsls	r4, r2, #2
 80036a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036aa:	008b      	lsls	r3, r1, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4623      	mov	r3, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	4631      	mov	r1, r6
 80036b4:	f7fd fa88 	bl	8000bc8 <__aeabi_uldivmod>
 80036b8:	4603      	mov	r3, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	461a      	mov	r2, r3
 80036be:	4b50      	ldr	r3, [pc, #320]	; (8003800 <UART_SetConfig+0x6f4>)
 80036c0:	fba3 2302 	umull	r2, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	469b      	mov	fp, r3
 80036ce:	f04f 0c00 	mov.w	ip, #0
 80036d2:	46d9      	mov	r9, fp
 80036d4:	46e2      	mov	sl, ip
 80036d6:	eb19 0309 	adds.w	r3, r9, r9
 80036da:	eb4a 040a 	adc.w	r4, sl, sl
 80036de:	4699      	mov	r9, r3
 80036e0:	46a2      	mov	sl, r4
 80036e2:	eb19 090b 	adds.w	r9, r9, fp
 80036e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036fe:	4689      	mov	r9, r1
 8003700:	4692      	mov	sl, r2
 8003702:	eb1b 0509 	adds.w	r5, fp, r9
 8003706:	eb4c 060a 	adc.w	r6, ip, sl
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	f04f 0400 	mov.w	r4, #0
 800371c:	0094      	lsls	r4, r2, #2
 800371e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003722:	008b      	lsls	r3, r1, #2
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	4628      	mov	r0, r5
 800372a:	4631      	mov	r1, r6
 800372c:	f7fd fa4c 	bl	8000bc8 <__aeabi_uldivmod>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	461a      	mov	r2, r3
 8003736:	4b32      	ldr	r3, [pc, #200]	; (8003800 <UART_SetConfig+0x6f4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <UART_SetConfig+0x6f4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003756:	4498      	add	r8, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	469b      	mov	fp, r3
 800375c:	f04f 0c00 	mov.w	ip, #0
 8003760:	46d9      	mov	r9, fp
 8003762:	46e2      	mov	sl, ip
 8003764:	eb19 0309 	adds.w	r3, r9, r9
 8003768:	eb4a 040a 	adc.w	r4, sl, sl
 800376c:	4699      	mov	r9, r3
 800376e:	46a2      	mov	sl, r4
 8003770:	eb19 090b 	adds.w	r9, r9, fp
 8003774:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800378c:	4689      	mov	r9, r1
 800378e:	4692      	mov	sl, r2
 8003790:	eb1b 0509 	adds.w	r5, fp, r9
 8003794:	eb4c 060a 	adc.w	r6, ip, sl
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4619      	mov	r1, r3
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0094      	lsls	r4, r2, #2
 80037ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037b0:	008b      	lsls	r3, r1, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	4623      	mov	r3, r4
 80037b6:	4628      	mov	r0, r5
 80037b8:	4631      	mov	r1, r6
 80037ba:	f7fd fa05 	bl	8000bc8 <__aeabi_uldivmod>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <UART_SetConfig+0x6f4>)
 80037c6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2164      	movs	r1, #100	; 0x64
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	3332      	adds	r3, #50	; 0x32
 80037d8:	4a09      	ldr	r2, [pc, #36]	; (8003800 <UART_SetConfig+0x6f4>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	f003 020f 	and.w	r2, r3, #15
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4442      	add	r2, r8
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	e7ff      	b.n	80037ee <UART_SetConfig+0x6e2>
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40011400 	.word	0x40011400
 8003800:	51eb851f 	.word	0x51eb851f

08003804 <MPU6000_Init>:
#define MPU_G_s1000dps           ((float)0.0305185f)  //dps/LSB
#define MPU_G_s2000dps           ((float)0.0610370f)  //dps/LSB

//初始化MPU6000
void MPU6000_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_1, 0x80);
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	206b      	movs	r0, #107	; 0x6b
 800380c:	f000 faca 	bl	8003da4 <Spi_GyroSingleWrite>
	HAL_Delay(50);
 8003810:	2032      	movs	r0, #50	; 0x32
 8003812:	f7fd fbcb 	bl	8000fac <HAL_Delay>

	Spi_GyroSingleWrite(MPU_RA_SIGNAL_PATH_RESET, BIT_GYRO | BIT_ACC | BIT_TEMP);
 8003816:	2103      	movs	r1, #3
 8003818:	2068      	movs	r0, #104	; 0x68
 800381a:	f000 fac3 	bl	8003da4 <Spi_GyroSingleWrite>
	HAL_Delay(50);
 800381e:	2032      	movs	r0, #50	; 0x32
 8003820:	f7fd fbc4 	bl	8000fac <HAL_Delay>

	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_1, 0x00);
 8003824:	2100      	movs	r1, #0
 8003826:	206b      	movs	r0, #107	; 0x6b
 8003828:	f000 fabc 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 800382c:	2005      	movs	r0, #5
 800382e:	f000 f8ab 	bl	8003988 <SoftDelayUs>

	Spi_GyroSingleWrite(MPU_RA_USER_CTRL, 0x10);
 8003832:	2110      	movs	r1, #16
 8003834:	206a      	movs	r0, #106	; 0x6a
 8003836:	f000 fab5 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 800383a:	2005      	movs	r0, #5
 800383c:	f000 f8a4 	bl	8003988 <SoftDelayUs>

	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_2, 0x00);
 8003840:	2100      	movs	r1, #0
 8003842:	206c      	movs	r0, #108	; 0x6c
 8003844:	f000 faae 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003848:	2005      	movs	r0, #5
 800384a:	f000 f89d 	bl	8003988 <SoftDelayUs>

	//陀螺仪采样率0x00(1000Hz)   采样率 = 陀螺仪的输出率 / (1 + SMPLRT_DIV)
	Spi_GyroSingleWrite(MPU_RA_SMPLRT_DIV, (1000/1000 - 1));
 800384e:	2100      	movs	r1, #0
 8003850:	2019      	movs	r0, #25
 8003852:	f000 faa7 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003856:	2005      	movs	r0, #5
 8003858:	f000 f896 	bl	8003988 <SoftDelayUs>

	//i2c旁路模式
	// INT_PIN_CFG   -- INT_LEVEL_HIGH, INT_OPEN_DIS, LATCH_INT_DIS, INT_RD_CLEAR_DIS, FSYNC_INT_LEVEL_HIGH, FSYNC_INT_DIS, I2C_BYPASS_EN, CLOCK_DIS
	Spi_GyroSingleWrite(MPU_RA_INT_PIN_CFG, 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2 | 1 << 1 | 0 << 0);
 800385c:	2102      	movs	r1, #2
 800385e:	2037      	movs	r0, #55	; 0x37
 8003860:	f000 faa0 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003864:	2005      	movs	r0, #5
 8003866:	f000 f88f 	bl	8003988 <SoftDelayUs>

	//低通滤波频率
	Spi_GyroSingleWrite(MPU_RA_CONFIG, MPU_LPF_42HZ);
 800386a:	2103      	movs	r1, #3
 800386c:	201a      	movs	r0, #26
 800386e:	f000 fa99 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003872:	2005      	movs	r0, #5
 8003874:	f000 f888 	bl	8003988 <SoftDelayUs>

	//陀螺仪自检及测量范围，典型值0x18(不自检，2000deg/s) (0x10 1000deg/s) (0x10 1000deg/s) (0x08 500deg/s)
	Spi_GyroSingleWrite(MPU_RA_GYRO_CONFIG, 0x10);
 8003878:	2110      	movs	r1, #16
 800387a:	201b      	movs	r0, #27
 800387c:	f000 fa92 	bl	8003da4 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003880:	2005      	movs	r0, #5
 8003882:	f000 f881 	bl	8003988 <SoftDelayUs>

	//加速度自检、测量范围(不自检，+-8G)
	Spi_GyroSingleWrite(MPU_RA_ACCEL_CONFIG, 2 << 3);
 8003886:	2110      	movs	r1, #16
 8003888:	201c      	movs	r0, #28
 800388a:	f000 fa8b 	bl	8003da4 <Spi_GyroSingleWrite>
	HAL_Delay(5);
 800388e:	2005      	movs	r0, #5
 8003890:	f7fd fb8c 	bl	8000fac <HAL_Delay>
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}

08003898 <MPU6000_ReadTemp>:
*功能说明: MPU6000读取温度传感器
*形    参: 读出数据指针
*返 回 值: 无
**********************************************************************************************************/
void MPU6000_ReadTemp(float* temp)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	printf("into the read function.");
 80038a0:	4817      	ldr	r0, [pc, #92]	; (8003900 <MPU6000_ReadTemp+0x68>)
 80038a2:	f001 f947 	bl	8004b34 <iprintf>

	static int16_t temperature_temp;

	Spi_GyroMultiRead(MPU_RA_TEMP_OUT_H, buffer, 2);
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2202      	movs	r2, #2
 80038ac:	4619      	mov	r1, r3
 80038ae:	2041      	movs	r0, #65	; 0x41
 80038b0:	f000 fa90 	bl	8003dd4 <Spi_GyroMultiRead>
	temperature_temp = ((((int16_t)buffer[0]) << 8) | buffer[1]);
 80038b4:	7b3b      	ldrb	r3, [r7, #12]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	7b7b      	ldrb	r3, [r7, #13]
 80038bc:	b21b      	sxth	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <MPU6000_ReadTemp+0x6c>)
 80038c4:	801a      	strh	r2, [r3, #0]
	*temp = 36.53f + (float)temperature_temp / 340;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MPU6000_ReadTemp+0x6c>)
 80038c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003908 <MPU6000_ReadTemp+0x70>
 80038d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038dc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800390c <MPU6000_ReadTemp+0x74>
 80038e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	edc3 7a00 	vstr	s15, [r3]
	printf("into the read function.");
 80038ea:	4805      	ldr	r0, [pc, #20]	; (8003900 <MPU6000_ReadTemp+0x68>)
 80038ec:	f001 f922 	bl	8004b34 <iprintf>
    SoftDelayUs(1);
 80038f0:	2001      	movs	r0, #1
 80038f2:	f000 f849 	bl	8003988 <SoftDelayUs>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	08006c58 	.word	0x08006c58
 8003904:	200001f8 	.word	0x200001f8
 8003908:	43aa0000 	.word	0x43aa0000
 800390c:	42121eb8 	.word	0x42121eb8

08003910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003924:	463b      	mov	r3, r7
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_TIM2_Init+0x74>)
 800392e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_TIM2_Init+0x74>)
 8003936:	2259      	movs	r2, #89	; 0x59
 8003938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <MX_TIM2_Init+0x74>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <MX_TIM2_Init+0x74>)
 8003942:	2201      	movs	r2, #1
 8003944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003946:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <MX_TIM2_Init+0x74>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <MX_TIM2_Init+0x74>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003952:	480c      	ldr	r0, [pc, #48]	; (8003984 <MX_TIM2_Init+0x74>)
 8003954:	f7fe fd82 	bl	800245c <HAL_TIM_Base_Init>
  {
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800395e:	f107 0308 	add.w	r3, r7, #8
 8003962:	4619      	mov	r1, r3
 8003964:	4807      	ldr	r0, [pc, #28]	; (8003984 <MX_TIM2_Init+0x74>)
 8003966:	f7fe fdf3 	bl	8002550 <HAL_TIM_ConfigClockSource>
  {
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003972:	463b      	mov	r3, r7
 8003974:	4619      	mov	r1, r3
 8003976:	4803      	ldr	r0, [pc, #12]	; (8003984 <MX_TIM2_Init+0x74>)
 8003978:	f7fe ffdc 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000020c 	.word	0x2000020c

08003988 <SoftDelayUs>:
void SoftDelayUs(uint32_t us)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    uint16_t differ=0xffff-us-5;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	b29a      	uxth	r2, r3
 8003994:	f06f 0305 	mvn.w	r3, #5
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	81fb      	strh	r3, [r7, #14]
    HAL_TIM_Base_Start(&htim2);
 800399c:	480b      	ldr	r0, [pc, #44]	; (80039cc <SoftDelayUs+0x44>)
 800399e:	f7fe fd88 	bl	80024b2 <HAL_TIM_Base_Start>
 	__HAL_TIM_SetCounter(&htim2,differ);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <SoftDelayUs+0x44>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	89fa      	ldrh	r2, [r7, #14]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
    while(differ < 0xffff-5)
 80039aa:	e003      	b.n	80039b4 <SoftDelayUs+0x2c>
   {
        differ = __HAL_TIM_GetCounter(&htim2);
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <SoftDelayUs+0x44>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	81fb      	strh	r3, [r7, #14]
    while(differ < 0xffff-5)
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d9f6      	bls.n	80039ac <SoftDelayUs+0x24>
    }
   HAL_TIM_Base_Stop(&htim2);
 80039be:	4803      	ldr	r0, [pc, #12]	; (80039cc <SoftDelayUs+0x44>)
 80039c0:	f7fe fd9b 	bl	80024fa <HAL_TIM_Base_Stop>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000020c 	.word	0x2000020c

080039d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, 0xFFFF);
 80039d8:	1d39      	adds	r1, r7, #4
 80039da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039de:	2201      	movs	r2, #1
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <__io_putchar+0x20>)
 80039e2:	f7ff f870 	bl	8002ac6 <HAL_UART_Transmit>
    return ch;
 80039e6:	687b      	ldr	r3, [r7, #4]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	2000024c 	.word	0x2000024c

080039f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039fa:	f7fd fa65 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039fe:	f000 f82f 	bl	8003a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a02:	f000 f8c7 	bl	8003b94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003a06:	f000 f947 	bl	8003c98 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003a0a:	f000 f899 	bl	8003b40 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003a0e:	f7ff ff7f 	bl	8003910 <MX_TIM2_Init>
  MPU6000_Init();
 8003a12:	f7ff fef7 	bl	8003804 <MPU6000_Init>
  {
	//每一秒，输出一次温度的数据
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float temp=1.5;
 8003a16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a1a:	607b      	str	r3, [r7, #4]
	  //HAL_Delay(1000);
	  MPU6000_ReadTemp(&temp);
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff3a 	bl	8003898 <MPU6000_ReadTemp>
	  uint8_t pData[4]="";
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
	  sprintf(pData,"%.1f",temp);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fd9c 	bl	8000568 <__aeabi_f2d>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	4638      	mov	r0, r7
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	4907      	ldr	r1, [pc, #28]	; (8003a58 <main+0x64>)
 8003a3c:	f001 f892 	bl	8004b64 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)pData,sizeof(pData),100);//不断通过串口3发送，pData中的数据，sizeof计算pData中的字节数
 8003a40:	4639      	mov	r1, r7
 8003a42:	2364      	movs	r3, #100	; 0x64
 8003a44:	2204      	movs	r2, #4
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <main+0x68>)
 8003a48:	f7ff f83d 	bl	8002ac6 <HAL_UART_Transmit>
	  //printf("Enter while(1) section :%f",temp);
	  HAL_Delay(1000);
 8003a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a50:	f7fd faac 	bl	8000fac <HAL_Delay>
  {
 8003a54:	e7df      	b.n	8003a16 <main+0x22>
 8003a56:	bf00      	nop
 8003a58:	08006c70 	.word	0x08006c70
 8003a5c:	2000024c 	.word	0x2000024c

08003a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b094      	sub	sp, #80	; 0x50
 8003a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a66:	f107 0320 	add.w	r3, r7, #32
 8003a6a:	2230      	movs	r2, #48	; 0x30
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fbfc 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <SystemClock_Config+0xd8>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <SystemClock_Config+0xd8>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <SystemClock_Config+0xd8>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <SystemClock_Config+0xdc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <SystemClock_Config+0xdc>)
 8003aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <SystemClock_Config+0xdc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003ad4:	23b4      	movs	r3, #180	; 0xb4
 8003ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003adc:	2304      	movs	r3, #4
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae0:	f107 0320 	add.w	r3, r7, #32
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fdcb 	bl	8001680 <HAL_RCC_OscConfig>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003af0:	f000 f8ca 	bl	8003c88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003af4:	f7fd fd74 	bl	80015e0 <HAL_PWREx_EnableOverDrive>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003afe:	f000 f8c3 	bl	8003c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b02:	230f      	movs	r3, #15
 8003b04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b06:	2302      	movs	r3, #2
 8003b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2105      	movs	r1, #5
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe f81d 	bl	8001b60 <HAL_RCC_ClockConfig>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003b2c:	f000 f8ac 	bl	8003c88 <Error_Handler>
  }
}
 8003b30:	bf00      	nop
 8003b32:	3750      	adds	r7, #80	; 0x50
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40007000 	.word	0x40007000

08003b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <MX_USART3_UART_Init+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003b70:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b78:	4804      	ldr	r0, [pc, #16]	; (8003b8c <MX_USART3_UART_Init+0x4c>)
 8003b7a:	f7fe ff57 	bl	8002a2c <HAL_UART_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8003b84:	f000 f880 	bl	8003c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000024c 	.word	0x2000024c
 8003b90:	40004800 	.word	0x40004800

08003b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <MX_GPIO_Init+0xe8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4811      	ldr	r0, [pc, #68]	; (8003c80 <MX_GPIO_Init+0xec>)
 8003c3c:	f7fd fcb6 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c40:	2304      	movs	r3, #4
 8003c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c44:	2301      	movs	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	4619      	mov	r1, r3
 8003c56:	480a      	ldr	r0, [pc, #40]	; (8003c80 <MX_GPIO_Init+0xec>)
 8003c58:	f7fd fafe 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <MX_GPIO_Init+0xf0>)
 8003c70:	f7fd faf2 	bl	8001258 <HAL_GPIO_Init>

}
 8003c74:	bf00      	nop
 8003c76:	3728      	adds	r7, #40	; 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40020800 	.word	0x40020800
 8003c84:	40020400 	.word	0x40020400

08003c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <MX_SPI1_Init+0x60>)
 8003ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <MX_SPI1_Init+0x5c>)
 8003cea:	f7fe f905 	bl	8001ef8 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000028c 	.word	0x2000028c
 8003cf8:	40013000 	.word	0x40013000

08003cfc <Spi_GyroEnable>:
*功能说明: 陀螺仪CS脚使能
*形    参: 无
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroEnable(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003d00:	2200      	movs	r2, #0
 8003d02:	2104      	movs	r1, #4
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <Spi_GyroEnable+0x14>)
 8003d06:	f7fd fc51 	bl	80015ac <HAL_GPIO_WritePin>
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40020800 	.word	0x40020800

08003d14 <Spi_GyroDisable>:
*功能说明: 陀螺仪CS脚失能
*形    参: 无
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroDisable(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <Spi_GyroDisable+0x14>)
 8003d1e:	f7fd fc45 	bl	80015ac <HAL_GPIO_WritePin>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40020800 	.word	0x40020800

08003d2c <SPI_SingleReadandWrite>:

//单字节的通过SPI的读写函数
uint8_t SPI_SingleReadandWrite(uint8_t TxData)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata;
	HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 8003d36:	f107 020f 	add.w	r2, r7, #15
 8003d3a:	1df9      	adds	r1, r7, #7
 8003d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2301      	movs	r3, #1
 8003d44:	4803      	ldr	r0, [pc, #12]	; (8003d54 <SPI_SingleReadandWrite+0x28>)
 8003d46:	f7fe f93b 	bl	8001fc0 <HAL_SPI_TransmitReceive>
	return Rxdata;          		    //返回收到的数据
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	2000028c 	.word	0x2000028c

08003d58 <SPI_MultiWriteAndRead>:

//多个字节通过SPI的读写函数
void SPI_MultiWriteAndRead( uint8_t Txdata, uint8_t *Rxdata, int len)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	4603      	mov	r3, r0
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	73fb      	strb	r3, [r7, #15]

	uint8_t b;
	while(len--)
 8003d66:	e009      	b.n	8003d7c <SPI_MultiWriteAndRead+0x24>
	{
		HAL_SPI_TransmitReceive(&hspi1,&Txdata,&b,1, 50);
 8003d68:	f107 0217 	add.w	r2, r7, #23
 8003d6c:	f107 010f 	add.w	r1, r7, #15
 8003d70:	2332      	movs	r3, #50	; 0x32
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2301      	movs	r3, #1
 8003d76:	480a      	ldr	r0, [pc, #40]	; (8003da0 <SPI_MultiWriteAndRead+0x48>)
 8003d78:	f7fe f922 	bl	8001fc0 <HAL_SPI_TransmitReceive>
	while(len--)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <SPI_MultiWriteAndRead+0x10>
	}
	if(Rxdata)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <SPI_MultiWriteAndRead+0x3e>
	{
		*(Rxdata++) = b;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	7dfa      	ldrb	r2, [r7, #23]
 8003d94:	701a      	strb	r2, [r3, #0]
	}
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000028c 	.word	0x2000028c

08003da4 <Spi_GyroSingleWrite>:
*功能说明: 陀螺仪单个寄存器写入
*形    参: 寄存器地址 写入值
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroSingleWrite(uint8_t reg, uint8_t value)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	460a      	mov	r2, r1
 8003dae:	71fb      	strb	r3, [r7, #7]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71bb      	strb	r3, [r7, #6]
	Spi_GyroEnable();
 8003db4:	f7ff ffa2 	bl	8003cfc <Spi_GyroEnable>
	//Spi_SingleWirteAndRead(GYRO_SPI, reg);
	SPI_SingleReadandWrite(reg);
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffb6 	bl	8003d2c <SPI_SingleReadandWrite>
	SPI_SingleReadandWrite(value);
 8003dc0:	79bb      	ldrb	r3, [r7, #6]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ffb2 	bl	8003d2c <SPI_SingleReadandWrite>
	//Spi_SingleWirteAndRead(GYRO_SPI, value);
	Spi_GyroDisable();
 8003dc8:	f7ff ffa4 	bl	8003d14 <Spi_GyroDisable>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <Spi_GyroMultiRead>:
*功能说明: 陀螺仪多个寄存器读出
*形    参: 寄存器地址 读出缓冲区 读出长度
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroMultiRead(uint8_t reg,uint8_t *data, uint8_t length)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	4613      	mov	r3, r2
 8003de2:	71bb      	strb	r3, [r7, #6]
	Spi_GyroEnable();
 8003de4:	f7ff ff8a 	bl	8003cfc <Spi_GyroEnable>
	//Spi_SingleWirteAndRead(GYRO_SPI, reg | 0x80);
	SPI_SingleReadandWrite(reg|0x80);
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff9b 	bl	8003d2c <SPI_SingleReadandWrite>
	SPI_MultiWriteAndRead(reg,data,length);
 8003df6:	79ba      	ldrb	r2, [r7, #6]
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ffab 	bl	8003d58 <SPI_MultiWriteAndRead>
	//SPI_MultiWriteAndRead(GYRO_SPI, data, NULL, length);
	Spi_GyroDisable();
 8003e02:	f7ff ff87 	bl	8003d14 <Spi_GyroDisable>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	; 0x44
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_MspInit+0x4c>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800

08003e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_SPI_MspInit+0x84>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d12b      	bne.n	8003eda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e90:	6453      	str	r3, [r2, #68]	; 0x44
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_SPI_MspInit+0x88>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003eba:	23e0      	movs	r3, #224	; 0xe0
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003eca:	2305      	movs	r3, #5
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4805      	ldr	r0, [pc, #20]	; (8003eec <HAL_SPI_MspInit+0x8c>)
 8003ed6:	f7fd f9bf 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003eda:	bf00      	nop
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40013000 	.word	0x40013000
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020000 	.word	0x40020000

08003ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d10d      	bne.n	8003f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_TIM_Base_MspInit+0x3c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_TIM_Base_MspInit+0x3c>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_TIM_Base_MspInit+0x3c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_UART_MspInit+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d145      	bne.n	8003fde <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a24      	ldr	r2, [pc, #144]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_UART_MspInit+0xbc>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_CTS
    PD12     ------> USART3_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f94:	2301      	movs	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f9c:	2307      	movs	r3, #7
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4812      	ldr	r0, [pc, #72]	; (8003ff0 <HAL_UART_MspInit+0xc0>)
 8003fa8:	f7fd f956 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003fac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <HAL_UART_MspInit+0xc0>)
 8003fca:	f7fd f945 	bl	8001258 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2027      	movs	r0, #39	; 0x27
 8003fd4:	f7fd f8e7 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fd8:	2027      	movs	r0, #39	; 0x27
 8003fda:	f7fd f900 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fde:	bf00      	nop
 8003fe0:	3728      	adds	r7, #40	; 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40020c00 	.word	0x40020c00

08003ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <HardFault_Handler+0x4>

08004008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800400c:	e7fe      	b.n	800400c <MemManage_Handler+0x4>

0800400e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <BusFault_Handler+0x4>

08004014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004018:	e7fe      	b.n	8004018 <UsageFault_Handler+0x4>

0800401a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004048:	f7fc ff90 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}

08004050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <USART3_IRQHandler+0x10>)
 8004056:	f7fe fdcf 	bl	8002bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000024c 	.word	0x2000024c

08004064 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e00a      	b.n	800408c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004076:	f3af 8000 	nop.w
 800407a:	4601      	mov	r1, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	60ba      	str	r2, [r7, #8]
 8004082:	b2ca      	uxtb	r2, r1
 8004084:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3301      	adds	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	dbf0      	blt.n	8004076 <_read+0x12>
	}

return len;
 8004094:	687b      	ldr	r3, [r7, #4]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e009      	b.n	80040c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	60ba      	str	r2, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fc89 	bl	80039d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3301      	adds	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	dbf1      	blt.n	80040b0 <_write+0x12>
	}
	return len;
 80040cc:	687b      	ldr	r3, [r7, #4]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <_close>:

int _close(int file)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
	return -1;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040fe:	605a      	str	r2, [r3, #4]
	return 0;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_isatty>:

int _isatty(int file)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
	return 1;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
	return 0;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <_sbrk+0x50>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <_sbrk+0x16>
		heap_end = &end;
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <_sbrk+0x50>)
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <_sbrk+0x54>)
 8004154:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <_sbrk+0x50>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <_sbrk+0x50>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	466a      	mov	r2, sp
 8004166:	4293      	cmp	r3, r2
 8004168:	d907      	bls.n	800417a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800416a:	f000 f855 	bl	8004218 <__errno>
 800416e:	4602      	mov	r2, r0
 8004170:	230c      	movs	r3, #12
 8004172:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	e006      	b.n	8004188 <_sbrk+0x48>
	}

	heap_end += incr;
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <_sbrk+0x50>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	4a03      	ldr	r2, [pc, #12]	; (8004190 <_sbrk+0x50>)
 8004184:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004186:	68fb      	ldr	r3, [r7, #12]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200001fc 	.word	0x200001fc
 8004194:	200002e8 	.word	0x200002e8

08004198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <SystemInit+0x28>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <SystemInit+0x28>)
 80041a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <SystemInit+0x28>)
 80041ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041b2:	609a      	str	r2, [r3, #8]
#endif
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ca:	e003      	b.n	80041d4 <LoopCopyDataInit>

080041cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041d2:	3104      	adds	r1, #4

080041d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041d4:	480b      	ldr	r0, [pc, #44]	; (8004204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041dc:	d3f6      	bcc.n	80041cc <CopyDataInit>
  ldr  r2, =_sbss
 80041de:	4a0b      	ldr	r2, [pc, #44]	; (800420c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041e0:	e002      	b.n	80041e8 <LoopFillZerobss>

080041e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041e4:	f842 3b04 	str.w	r3, [r2], #4

080041e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041ec:	d3f9      	bcc.n	80041e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041ee:	f7ff ffd3 	bl	8004198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041f2:	f000 f817 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041f6:	f7ff fbfd 	bl	80039f4 <main>
  bx  lr    
 80041fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004200:	08006f60 	.word	0x08006f60
  ldr  r0, =_sdata
 8004204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004208:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800420c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004210:	200002e8 	.word	0x200002e8

08004214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004214:	e7fe      	b.n	8004214 <ADC_IRQHandler>
	...

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0d      	ldr	r6, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1ba4      	subs	r4, r4, r6
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2500      	movs	r5, #0
 8004230:	42a5      	cmp	r5, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4e0b      	ldr	r6, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f002 fd02 	bl	8006c40 <_init>
 800423c:	1ba4      	subs	r4, r4, r6
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2500      	movs	r5, #0
 8004242:	42a5      	cmp	r5, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424c:	4798      	blx	r3
 800424e:	3501      	adds	r5, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004256:	4798      	blx	r3
 8004258:	3501      	adds	r5, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	08006f58 	.word	0x08006f58
 8004260:	08006f58 	.word	0x08006f58
 8004264:	08006f58 	.word	0x08006f58
 8004268:	08006f5c 	.word	0x08006f5c

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__cvt>:
 800427c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	ec55 4b10 	vmov	r4, r5, d0
 8004284:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004286:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800428a:	2d00      	cmp	r5, #0
 800428c:	460e      	mov	r6, r1
 800428e:	4691      	mov	r9, r2
 8004290:	4619      	mov	r1, r3
 8004292:	bfb8      	it	lt
 8004294:	4622      	movlt	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	f027 0720 	bic.w	r7, r7, #32
 800429c:	bfbb      	ittet	lt
 800429e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042a2:	461d      	movlt	r5, r3
 80042a4:	2300      	movge	r3, #0
 80042a6:	232d      	movlt	r3, #45	; 0x2d
 80042a8:	bfb8      	it	lt
 80042aa:	4614      	movlt	r4, r2
 80042ac:	2f46      	cmp	r7, #70	; 0x46
 80042ae:	700b      	strb	r3, [r1, #0]
 80042b0:	d004      	beq.n	80042bc <__cvt+0x40>
 80042b2:	2f45      	cmp	r7, #69	; 0x45
 80042b4:	d100      	bne.n	80042b8 <__cvt+0x3c>
 80042b6:	3601      	adds	r6, #1
 80042b8:	2102      	movs	r1, #2
 80042ba:	e000      	b.n	80042be <__cvt+0x42>
 80042bc:	2103      	movs	r1, #3
 80042be:	ab03      	add	r3, sp, #12
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	ab02      	add	r3, sp, #8
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	4632      	mov	r2, r6
 80042c8:	4653      	mov	r3, sl
 80042ca:	ec45 4b10 	vmov	d0, r4, r5
 80042ce:	f000 fcf7 	bl	8004cc0 <_dtoa_r>
 80042d2:	2f47      	cmp	r7, #71	; 0x47
 80042d4:	4680      	mov	r8, r0
 80042d6:	d102      	bne.n	80042de <__cvt+0x62>
 80042d8:	f019 0f01 	tst.w	r9, #1
 80042dc:	d026      	beq.n	800432c <__cvt+0xb0>
 80042de:	2f46      	cmp	r7, #70	; 0x46
 80042e0:	eb08 0906 	add.w	r9, r8, r6
 80042e4:	d111      	bne.n	800430a <__cvt+0x8e>
 80042e6:	f898 3000 	ldrb.w	r3, [r8]
 80042ea:	2b30      	cmp	r3, #48	; 0x30
 80042ec:	d10a      	bne.n	8004304 <__cvt+0x88>
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
 80042f2:	4620      	mov	r0, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	f7fc fbf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80042fa:	b918      	cbnz	r0, 8004304 <__cvt+0x88>
 80042fc:	f1c6 0601 	rsb	r6, r6, #1
 8004300:	f8ca 6000 	str.w	r6, [sl]
 8004304:	f8da 3000 	ldr.w	r3, [sl]
 8004308:	4499      	add	r9, r3
 800430a:	2200      	movs	r2, #0
 800430c:	2300      	movs	r3, #0
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f7fc fbe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004316:	b938      	cbnz	r0, 8004328 <__cvt+0xac>
 8004318:	2230      	movs	r2, #48	; 0x30
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	454b      	cmp	r3, r9
 800431e:	d205      	bcs.n	800432c <__cvt+0xb0>
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	9103      	str	r1, [sp, #12]
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e7f8      	b.n	800431a <__cvt+0x9e>
 8004328:	f8cd 900c 	str.w	r9, [sp, #12]
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004330:	eba3 0308 	sub.w	r3, r3, r8
 8004334:	4640      	mov	r0, r8
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	b004      	add	sp, #16
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800433e <__exponent>:
 800433e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004340:	2900      	cmp	r1, #0
 8004342:	4604      	mov	r4, r0
 8004344:	bfba      	itte	lt
 8004346:	4249      	neglt	r1, r1
 8004348:	232d      	movlt	r3, #45	; 0x2d
 800434a:	232b      	movge	r3, #43	; 0x2b
 800434c:	2909      	cmp	r1, #9
 800434e:	f804 2b02 	strb.w	r2, [r4], #2
 8004352:	7043      	strb	r3, [r0, #1]
 8004354:	dd20      	ble.n	8004398 <__exponent+0x5a>
 8004356:	f10d 0307 	add.w	r3, sp, #7
 800435a:	461f      	mov	r7, r3
 800435c:	260a      	movs	r6, #10
 800435e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004362:	fb06 1115 	mls	r1, r6, r5, r1
 8004366:	3130      	adds	r1, #48	; 0x30
 8004368:	2d09      	cmp	r5, #9
 800436a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800436e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004372:	4629      	mov	r1, r5
 8004374:	dc09      	bgt.n	800438a <__exponent+0x4c>
 8004376:	3130      	adds	r1, #48	; 0x30
 8004378:	3b02      	subs	r3, #2
 800437a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800437e:	42bb      	cmp	r3, r7
 8004380:	4622      	mov	r2, r4
 8004382:	d304      	bcc.n	800438e <__exponent+0x50>
 8004384:	1a10      	subs	r0, r2, r0
 8004386:	b003      	add	sp, #12
 8004388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438a:	4613      	mov	r3, r2
 800438c:	e7e7      	b.n	800435e <__exponent+0x20>
 800438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004392:	f804 2b01 	strb.w	r2, [r4], #1
 8004396:	e7f2      	b.n	800437e <__exponent+0x40>
 8004398:	2330      	movs	r3, #48	; 0x30
 800439a:	4419      	add	r1, r3
 800439c:	7083      	strb	r3, [r0, #2]
 800439e:	1d02      	adds	r2, r0, #4
 80043a0:	70c1      	strb	r1, [r0, #3]
 80043a2:	e7ef      	b.n	8004384 <__exponent+0x46>

080043a4 <_printf_float>:
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b08d      	sub	sp, #52	; 0x34
 80043aa:	460c      	mov	r4, r1
 80043ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043b0:	4616      	mov	r6, r2
 80043b2:	461f      	mov	r7, r3
 80043b4:	4605      	mov	r5, r0
 80043b6:	f001 fb05 	bl	80059c4 <_localeconv_r>
 80043ba:	6803      	ldr	r3, [r0, #0]
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fb ff16 	bl	80001f0 <strlen>
 80043c4:	2300      	movs	r3, #0
 80043c6:	930a      	str	r3, [sp, #40]	; 0x28
 80043c8:	f8d8 3000 	ldr.w	r3, [r8]
 80043cc:	9005      	str	r0, [sp, #20]
 80043ce:	3307      	adds	r3, #7
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	f103 0208 	add.w	r2, r3, #8
 80043d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043dc:	f8d4 b000 	ldr.w	fp, [r4]
 80043e0:	f8c8 2000 	str.w	r2, [r8]
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043f4:	9307      	str	r3, [sp, #28]
 80043f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295
 80043fe:	4ba7      	ldr	r3, [pc, #668]	; (800469c <_printf_float+0x2f8>)
 8004400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004404:	f7fc fba2 	bl	8000b4c <__aeabi_dcmpun>
 8004408:	bb70      	cbnz	r0, 8004468 <_printf_float+0xc4>
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	4ba3      	ldr	r3, [pc, #652]	; (800469c <_printf_float+0x2f8>)
 8004410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004414:	f7fc fb7c 	bl	8000b10 <__aeabi_dcmple>
 8004418:	bb30      	cbnz	r0, 8004468 <_printf_float+0xc4>
 800441a:	2200      	movs	r2, #0
 800441c:	2300      	movs	r3, #0
 800441e:	4640      	mov	r0, r8
 8004420:	4649      	mov	r1, r9
 8004422:	f7fc fb6b 	bl	8000afc <__aeabi_dcmplt>
 8004426:	b110      	cbz	r0, 800442e <_printf_float+0x8a>
 8004428:	232d      	movs	r3, #45	; 0x2d
 800442a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442e:	4a9c      	ldr	r2, [pc, #624]	; (80046a0 <_printf_float+0x2fc>)
 8004430:	4b9c      	ldr	r3, [pc, #624]	; (80046a4 <_printf_float+0x300>)
 8004432:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004436:	bf8c      	ite	hi
 8004438:	4690      	movhi	r8, r2
 800443a:	4698      	movls	r8, r3
 800443c:	2303      	movs	r3, #3
 800443e:	f02b 0204 	bic.w	r2, fp, #4
 8004442:	6123      	str	r3, [r4, #16]
 8004444:	6022      	str	r2, [r4, #0]
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	9700      	str	r7, [sp, #0]
 800444c:	4633      	mov	r3, r6
 800444e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004450:	4621      	mov	r1, r4
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f9e6 	bl	8004824 <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	f040 808d 	bne.w	8004578 <_printf_float+0x1d4>
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	b00d      	add	sp, #52	; 0x34
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	4640      	mov	r0, r8
 800446e:	4649      	mov	r1, r9
 8004470:	f7fc fb6c 	bl	8000b4c <__aeabi_dcmpun>
 8004474:	b110      	cbz	r0, 800447c <_printf_float+0xd8>
 8004476:	4a8c      	ldr	r2, [pc, #560]	; (80046a8 <_printf_float+0x304>)
 8004478:	4b8c      	ldr	r3, [pc, #560]	; (80046ac <_printf_float+0x308>)
 800447a:	e7da      	b.n	8004432 <_printf_float+0x8e>
 800447c:	6861      	ldr	r1, [r4, #4]
 800447e:	1c4b      	adds	r3, r1, #1
 8004480:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004484:	a80a      	add	r0, sp, #40	; 0x28
 8004486:	d13e      	bne.n	8004506 <_printf_float+0x162>
 8004488:	2306      	movs	r3, #6
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	2300      	movs	r3, #0
 800448e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004492:	ab09      	add	r3, sp, #36	; 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	ec49 8b10 	vmov	d0, r8, r9
 800449a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	f8cd a004 	str.w	sl, [sp, #4]
 80044a4:	6861      	ldr	r1, [r4, #4]
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7ff fee8 	bl	800427c <__cvt>
 80044ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044b0:	2b47      	cmp	r3, #71	; 0x47
 80044b2:	4680      	mov	r8, r0
 80044b4:	d109      	bne.n	80044ca <_printf_float+0x126>
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	1cd8      	adds	r0, r3, #3
 80044ba:	db02      	blt.n	80044c2 <_printf_float+0x11e>
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	4293      	cmp	r3, r2
 80044c0:	dd47      	ble.n	8004552 <_printf_float+0x1ae>
 80044c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80044c6:	fa5f fa8a 	uxtb.w	sl, sl
 80044ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044d0:	d824      	bhi.n	800451c <_printf_float+0x178>
 80044d2:	3901      	subs	r1, #1
 80044d4:	4652      	mov	r2, sl
 80044d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044da:	9109      	str	r1, [sp, #36]	; 0x24
 80044dc:	f7ff ff2f 	bl	800433e <__exponent>
 80044e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e2:	1813      	adds	r3, r2, r0
 80044e4:	2a01      	cmp	r2, #1
 80044e6:	4681      	mov	r9, r0
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	dc02      	bgt.n	80044f2 <_printf_float+0x14e>
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	07d1      	lsls	r1, r2, #31
 80044f0:	d501      	bpl.n	80044f6 <_printf_float+0x152>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0a5      	beq.n	800444a <_printf_float+0xa6>
 80044fe:	232d      	movs	r3, #45	; 0x2d
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004504:	e7a1      	b.n	800444a <_printf_float+0xa6>
 8004506:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800450a:	f000 8177 	beq.w	80047fc <_printf_float+0x458>
 800450e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004512:	d1bb      	bne.n	800448c <_printf_float+0xe8>
 8004514:	2900      	cmp	r1, #0
 8004516:	d1b9      	bne.n	800448c <_printf_float+0xe8>
 8004518:	2301      	movs	r3, #1
 800451a:	e7b6      	b.n	800448a <_printf_float+0xe6>
 800451c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004520:	d119      	bne.n	8004556 <_printf_float+0x1b2>
 8004522:	2900      	cmp	r1, #0
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	dd0c      	ble.n	8004542 <_printf_float+0x19e>
 8004528:	6121      	str	r1, [r4, #16]
 800452a:	b913      	cbnz	r3, 8004532 <_printf_float+0x18e>
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	07d2      	lsls	r2, r2, #31
 8004530:	d502      	bpl.n	8004538 <_printf_float+0x194>
 8004532:	3301      	adds	r3, #1
 8004534:	440b      	add	r3, r1
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453a:	65a3      	str	r3, [r4, #88]	; 0x58
 800453c:	f04f 0900 	mov.w	r9, #0
 8004540:	e7d9      	b.n	80044f6 <_printf_float+0x152>
 8004542:	b913      	cbnz	r3, 800454a <_printf_float+0x1a6>
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	07d0      	lsls	r0, r2, #31
 8004548:	d501      	bpl.n	800454e <_printf_float+0x1aa>
 800454a:	3302      	adds	r3, #2
 800454c:	e7f3      	b.n	8004536 <_printf_float+0x192>
 800454e:	2301      	movs	r3, #1
 8004550:	e7f1      	b.n	8004536 <_printf_float+0x192>
 8004552:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004556:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800455a:	4293      	cmp	r3, r2
 800455c:	db05      	blt.n	800456a <_printf_float+0x1c6>
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	6123      	str	r3, [r4, #16]
 8004562:	07d1      	lsls	r1, r2, #31
 8004564:	d5e8      	bpl.n	8004538 <_printf_float+0x194>
 8004566:	3301      	adds	r3, #1
 8004568:	e7e5      	b.n	8004536 <_printf_float+0x192>
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfd4      	ite	le
 800456e:	f1c3 0302 	rsble	r3, r3, #2
 8004572:	2301      	movgt	r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	e7de      	b.n	8004536 <_printf_float+0x192>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	055a      	lsls	r2, r3, #21
 800457c:	d407      	bmi.n	800458e <_printf_float+0x1ea>
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	4642      	mov	r2, r8
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	d12b      	bne.n	80045e4 <_printf_float+0x240>
 800458c:	e767      	b.n	800445e <_printf_float+0xba>
 800458e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004592:	f240 80dc 	bls.w	800474e <_printf_float+0x3aa>
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800459e:	f7fc faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d033      	beq.n	800460e <_printf_float+0x26a>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <_printf_float+0x30c>)
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	f43f af54 	beq.w	800445e <_printf_float+0xba>
 80045b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045ba:	429a      	cmp	r2, r3
 80045bc:	db02      	blt.n	80045c4 <_printf_float+0x220>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	07d8      	lsls	r0, r3, #31
 80045c2:	d50f      	bpl.n	80045e4 <_printf_float+0x240>
 80045c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	f43f af45 	beq.w	800445e <_printf_float+0xba>
 80045d4:	f04f 0800 	mov.w	r8, #0
 80045d8:	f104 091a 	add.w	r9, r4, #26
 80045dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	4543      	cmp	r3, r8
 80045e2:	dc09      	bgt.n	80045f8 <_printf_float+0x254>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	079b      	lsls	r3, r3, #30
 80045e8:	f100 8103 	bmi.w	80047f2 <_printf_float+0x44e>
 80045ec:	68e0      	ldr	r0, [r4, #12]
 80045ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f0:	4298      	cmp	r0, r3
 80045f2:	bfb8      	it	lt
 80045f4:	4618      	movlt	r0, r3
 80045f6:	e734      	b.n	8004462 <_printf_float+0xbe>
 80045f8:	2301      	movs	r3, #1
 80045fa:	464a      	mov	r2, r9
 80045fc:	4631      	mov	r1, r6
 80045fe:	4628      	mov	r0, r5
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	f43f af2b 	beq.w	800445e <_printf_float+0xba>
 8004608:	f108 0801 	add.w	r8, r8, #1
 800460c:	e7e6      	b.n	80045dc <_printf_float+0x238>
 800460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	dc2b      	bgt.n	800466c <_printf_float+0x2c8>
 8004614:	2301      	movs	r3, #1
 8004616:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <_printf_float+0x30c>)
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f af1d 	beq.w	800445e <_printf_float+0xba>
 8004624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004626:	b923      	cbnz	r3, 8004632 <_printf_float+0x28e>
 8004628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462a:	b913      	cbnz	r3, 8004632 <_printf_float+0x28e>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	07d9      	lsls	r1, r3, #31
 8004630:	d5d8      	bpl.n	80045e4 <_printf_float+0x240>
 8004632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	47b8      	blx	r7
 800463c:	3001      	adds	r0, #1
 800463e:	f43f af0e 	beq.w	800445e <_printf_float+0xba>
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	f104 0a1a 	add.w	sl, r4, #26
 800464a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464c:	425b      	negs	r3, r3
 800464e:	454b      	cmp	r3, r9
 8004650:	dc01      	bgt.n	8004656 <_printf_float+0x2b2>
 8004652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004654:	e794      	b.n	8004580 <_printf_float+0x1dc>
 8004656:	2301      	movs	r3, #1
 8004658:	4652      	mov	r2, sl
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	f43f aefc 	beq.w	800445e <_printf_float+0xba>
 8004666:	f109 0901 	add.w	r9, r9, #1
 800466a:	e7ee      	b.n	800464a <_printf_float+0x2a6>
 800466c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800466e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004670:	429a      	cmp	r2, r3
 8004672:	bfa8      	it	ge
 8004674:	461a      	movge	r2, r3
 8004676:	2a00      	cmp	r2, #0
 8004678:	4691      	mov	r9, r2
 800467a:	dd07      	ble.n	800468c <_printf_float+0x2e8>
 800467c:	4613      	mov	r3, r2
 800467e:	4631      	mov	r1, r6
 8004680:	4642      	mov	r2, r8
 8004682:	4628      	mov	r0, r5
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	f43f aee9 	beq.w	800445e <_printf_float+0xba>
 800468c:	f104 031a 	add.w	r3, r4, #26
 8004690:	f04f 0b00 	mov.w	fp, #0
 8004694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004698:	9306      	str	r3, [sp, #24]
 800469a:	e015      	b.n	80046c8 <_printf_float+0x324>
 800469c:	7fefffff 	.word	0x7fefffff
 80046a0:	08006c98 	.word	0x08006c98
 80046a4:	08006c94 	.word	0x08006c94
 80046a8:	08006ca0 	.word	0x08006ca0
 80046ac:	08006c9c 	.word	0x08006c9c
 80046b0:	08006ca4 	.word	0x08006ca4
 80046b4:	2301      	movs	r3, #1
 80046b6:	9a06      	ldr	r2, [sp, #24]
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	f43f aecd 	beq.w	800445e <_printf_float+0xba>
 80046c4:	f10b 0b01 	add.w	fp, fp, #1
 80046c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046cc:	ebaa 0309 	sub.w	r3, sl, r9
 80046d0:	455b      	cmp	r3, fp
 80046d2:	dcef      	bgt.n	80046b4 <_printf_float+0x310>
 80046d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d8:	429a      	cmp	r2, r3
 80046da:	44d0      	add	r8, sl
 80046dc:	db15      	blt.n	800470a <_printf_float+0x366>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	07da      	lsls	r2, r3, #31
 80046e2:	d412      	bmi.n	800470a <_printf_float+0x366>
 80046e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046e8:	eba3 020a 	sub.w	r2, r3, sl
 80046ec:	eba3 0a01 	sub.w	sl, r3, r1
 80046f0:	4592      	cmp	sl, r2
 80046f2:	bfa8      	it	ge
 80046f4:	4692      	movge	sl, r2
 80046f6:	f1ba 0f00 	cmp.w	sl, #0
 80046fa:	dc0e      	bgt.n	800471a <_printf_float+0x376>
 80046fc:	f04f 0800 	mov.w	r8, #0
 8004700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004704:	f104 091a 	add.w	r9, r4, #26
 8004708:	e019      	b.n	800473e <_printf_float+0x39a>
 800470a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	d1e5      	bne.n	80046e4 <_printf_float+0x340>
 8004718:	e6a1      	b.n	800445e <_printf_float+0xba>
 800471a:	4653      	mov	r3, sl
 800471c:	4642      	mov	r2, r8
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	d1e9      	bne.n	80046fc <_printf_float+0x358>
 8004728:	e699      	b.n	800445e <_printf_float+0xba>
 800472a:	2301      	movs	r3, #1
 800472c:	464a      	mov	r2, r9
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f ae92 	beq.w	800445e <_printf_float+0xba>
 800473a:	f108 0801 	add.w	r8, r8, #1
 800473e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	eba3 030a 	sub.w	r3, r3, sl
 8004748:	4543      	cmp	r3, r8
 800474a:	dcee      	bgt.n	800472a <_printf_float+0x386>
 800474c:	e74a      	b.n	80045e4 <_printf_float+0x240>
 800474e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004750:	2a01      	cmp	r2, #1
 8004752:	dc01      	bgt.n	8004758 <_printf_float+0x3b4>
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d53a      	bpl.n	80047ce <_printf_float+0x42a>
 8004758:	2301      	movs	r3, #1
 800475a:	4642      	mov	r2, r8
 800475c:	4631      	mov	r1, r6
 800475e:	4628      	mov	r0, r5
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	f43f ae7b 	beq.w	800445e <_printf_float+0xba>
 8004768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f108 0801 	add.w	r8, r8, #1
 8004778:	f43f ae71 	beq.w	800445e <_printf_float+0xba>
 800477c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	f103 3aff 	add.w	sl, r3, #4294967295
 8004784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004788:	2300      	movs	r3, #0
 800478a:	f7fc f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800478e:	b9c8      	cbnz	r0, 80047c4 <_printf_float+0x420>
 8004790:	4653      	mov	r3, sl
 8004792:	4642      	mov	r2, r8
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	d10e      	bne.n	80047bc <_printf_float+0x418>
 800479e:	e65e      	b.n	800445e <_printf_float+0xba>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4652      	mov	r2, sl
 80047a4:	4631      	mov	r1, r6
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f ae57 	beq.w	800445e <_printf_float+0xba>
 80047b0:	f108 0801 	add.w	r8, r8, #1
 80047b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4543      	cmp	r3, r8
 80047ba:	dcf1      	bgt.n	80047a0 <_printf_float+0x3fc>
 80047bc:	464b      	mov	r3, r9
 80047be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047c2:	e6de      	b.n	8004582 <_printf_float+0x1de>
 80047c4:	f04f 0800 	mov.w	r8, #0
 80047c8:	f104 0a1a 	add.w	sl, r4, #26
 80047cc:	e7f2      	b.n	80047b4 <_printf_float+0x410>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e7df      	b.n	8004792 <_printf_float+0x3ee>
 80047d2:	2301      	movs	r3, #1
 80047d4:	464a      	mov	r2, r9
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	47b8      	blx	r7
 80047dc:	3001      	adds	r0, #1
 80047de:	f43f ae3e 	beq.w	800445e <_printf_float+0xba>
 80047e2:	f108 0801 	add.w	r8, r8, #1
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	4543      	cmp	r3, r8
 80047ee:	dcf0      	bgt.n	80047d2 <_printf_float+0x42e>
 80047f0:	e6fc      	b.n	80045ec <_printf_float+0x248>
 80047f2:	f04f 0800 	mov.w	r8, #0
 80047f6:	f104 0919 	add.w	r9, r4, #25
 80047fa:	e7f4      	b.n	80047e6 <_printf_float+0x442>
 80047fc:	2900      	cmp	r1, #0
 80047fe:	f43f ae8b 	beq.w	8004518 <_printf_float+0x174>
 8004802:	2300      	movs	r3, #0
 8004804:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004808:	ab09      	add	r3, sp, #36	; 0x24
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	ec49 8b10 	vmov	d0, r8, r9
 8004810:	6022      	str	r2, [r4, #0]
 8004812:	f8cd a004 	str.w	sl, [sp, #4]
 8004816:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800481a:	4628      	mov	r0, r5
 800481c:	f7ff fd2e 	bl	800427c <__cvt>
 8004820:	4680      	mov	r8, r0
 8004822:	e648      	b.n	80044b6 <_printf_float+0x112>

08004824 <_printf_common>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	4691      	mov	r9, r2
 800482a:	461f      	mov	r7, r3
 800482c:	688a      	ldr	r2, [r1, #8]
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004834:	4293      	cmp	r3, r2
 8004836:	bfb8      	it	lt
 8004838:	4613      	movlt	r3, r2
 800483a:	f8c9 3000 	str.w	r3, [r9]
 800483e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004842:	4606      	mov	r6, r0
 8004844:	460c      	mov	r4, r1
 8004846:	b112      	cbz	r2, 800484e <_printf_common+0x2a>
 8004848:	3301      	adds	r3, #1
 800484a:	f8c9 3000 	str.w	r3, [r9]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	0699      	lsls	r1, r3, #26
 8004852:	bf42      	ittt	mi
 8004854:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004858:	3302      	addmi	r3, #2
 800485a:	f8c9 3000 	strmi.w	r3, [r9]
 800485e:	6825      	ldr	r5, [r4, #0]
 8004860:	f015 0506 	ands.w	r5, r5, #6
 8004864:	d107      	bne.n	8004876 <_printf_common+0x52>
 8004866:	f104 0a19 	add.w	sl, r4, #25
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	f8d9 2000 	ldr.w	r2, [r9]
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	42ab      	cmp	r3, r5
 8004874:	dc28      	bgt.n	80048c8 <_printf_common+0xa4>
 8004876:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	3300      	adds	r3, #0
 800487e:	bf18      	it	ne
 8004880:	2301      	movne	r3, #1
 8004882:	0692      	lsls	r2, r2, #26
 8004884:	d42d      	bmi.n	80048e2 <_printf_common+0xbe>
 8004886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488a:	4639      	mov	r1, r7
 800488c:	4630      	mov	r0, r6
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d020      	beq.n	80048d6 <_printf_common+0xb2>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	68e5      	ldr	r5, [r4, #12]
 8004898:	f8d9 2000 	ldr.w	r2, [r9]
 800489c:	f003 0306 	and.w	r3, r3, #6
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	bf08      	it	eq
 80048a4:	1aad      	subeq	r5, r5, r2
 80048a6:	68a3      	ldr	r3, [r4, #8]
 80048a8:	6922      	ldr	r2, [r4, #16]
 80048aa:	bf0c      	ite	eq
 80048ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b0:	2500      	movne	r5, #0
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bfc4      	itt	gt
 80048b6:	1a9b      	subgt	r3, r3, r2
 80048b8:	18ed      	addgt	r5, r5, r3
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	341a      	adds	r4, #26
 80048c0:	454d      	cmp	r5, r9
 80048c2:	d11a      	bne.n	80048fa <_printf_common+0xd6>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e008      	b.n	80048da <_printf_common+0xb6>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4652      	mov	r2, sl
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	47c0      	blx	r8
 80048d2:	3001      	adds	r0, #1
 80048d4:	d103      	bne.n	80048de <_printf_common+0xba>
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048de:	3501      	adds	r5, #1
 80048e0:	e7c3      	b.n	800486a <_printf_common+0x46>
 80048e2:	18e1      	adds	r1, r4, r3
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	2030      	movs	r0, #48	; 0x30
 80048e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ec:	4422      	add	r2, r4
 80048ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f6:	3302      	adds	r3, #2
 80048f8:	e7c5      	b.n	8004886 <_printf_common+0x62>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4622      	mov	r2, r4
 80048fe:	4639      	mov	r1, r7
 8004900:	4630      	mov	r0, r6
 8004902:	47c0      	blx	r8
 8004904:	3001      	adds	r0, #1
 8004906:	d0e6      	beq.n	80048d6 <_printf_common+0xb2>
 8004908:	f109 0901 	add.w	r9, r9, #1
 800490c:	e7d8      	b.n	80048c0 <_printf_common+0x9c>
	...

08004910 <_printf_i>:
 8004910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004914:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004918:	460c      	mov	r4, r1
 800491a:	7e09      	ldrb	r1, [r1, #24]
 800491c:	b085      	sub	sp, #20
 800491e:	296e      	cmp	r1, #110	; 0x6e
 8004920:	4617      	mov	r7, r2
 8004922:	4606      	mov	r6, r0
 8004924:	4698      	mov	r8, r3
 8004926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004928:	f000 80b3 	beq.w	8004a92 <_printf_i+0x182>
 800492c:	d822      	bhi.n	8004974 <_printf_i+0x64>
 800492e:	2963      	cmp	r1, #99	; 0x63
 8004930:	d036      	beq.n	80049a0 <_printf_i+0x90>
 8004932:	d80a      	bhi.n	800494a <_printf_i+0x3a>
 8004934:	2900      	cmp	r1, #0
 8004936:	f000 80b9 	beq.w	8004aac <_printf_i+0x19c>
 800493a:	2958      	cmp	r1, #88	; 0x58
 800493c:	f000 8083 	beq.w	8004a46 <_printf_i+0x136>
 8004940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004944:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004948:	e032      	b.n	80049b0 <_printf_i+0xa0>
 800494a:	2964      	cmp	r1, #100	; 0x64
 800494c:	d001      	beq.n	8004952 <_printf_i+0x42>
 800494e:	2969      	cmp	r1, #105	; 0x69
 8004950:	d1f6      	bne.n	8004940 <_printf_i+0x30>
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	0605      	lsls	r5, r0, #24
 8004958:	f103 0104 	add.w	r1, r3, #4
 800495c:	d52a      	bpl.n	80049b4 <_printf_i+0xa4>
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	da03      	bge.n	800496e <_printf_i+0x5e>
 8004966:	222d      	movs	r2, #45	; 0x2d
 8004968:	425b      	negs	r3, r3
 800496a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800496e:	486f      	ldr	r0, [pc, #444]	; (8004b2c <_printf_i+0x21c>)
 8004970:	220a      	movs	r2, #10
 8004972:	e039      	b.n	80049e8 <_printf_i+0xd8>
 8004974:	2973      	cmp	r1, #115	; 0x73
 8004976:	f000 809d 	beq.w	8004ab4 <_printf_i+0x1a4>
 800497a:	d808      	bhi.n	800498e <_printf_i+0x7e>
 800497c:	296f      	cmp	r1, #111	; 0x6f
 800497e:	d020      	beq.n	80049c2 <_printf_i+0xb2>
 8004980:	2970      	cmp	r1, #112	; 0x70
 8004982:	d1dd      	bne.n	8004940 <_printf_i+0x30>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	e003      	b.n	8004996 <_printf_i+0x86>
 800498e:	2975      	cmp	r1, #117	; 0x75
 8004990:	d017      	beq.n	80049c2 <_printf_i+0xb2>
 8004992:	2978      	cmp	r1, #120	; 0x78
 8004994:	d1d4      	bne.n	8004940 <_printf_i+0x30>
 8004996:	2378      	movs	r3, #120	; 0x78
 8004998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800499c:	4864      	ldr	r0, [pc, #400]	; (8004b30 <_printf_i+0x220>)
 800499e:	e055      	b.n	8004a4c <_printf_i+0x13c>
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	1d19      	adds	r1, r3, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6011      	str	r1, [r2, #0]
 80049a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b0:	2301      	movs	r3, #1
 80049b2:	e08c      	b.n	8004ace <_printf_i+0x1be>
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6011      	str	r1, [r2, #0]
 80049b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049bc:	bf18      	it	ne
 80049be:	b21b      	sxthne	r3, r3
 80049c0:	e7cf      	b.n	8004962 <_printf_i+0x52>
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	1d18      	adds	r0, r3, #4
 80049c8:	6010      	str	r0, [r2, #0]
 80049ca:	0628      	lsls	r0, r5, #24
 80049cc:	d501      	bpl.n	80049d2 <_printf_i+0xc2>
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	e002      	b.n	80049d8 <_printf_i+0xc8>
 80049d2:	0668      	lsls	r0, r5, #25
 80049d4:	d5fb      	bpl.n	80049ce <_printf_i+0xbe>
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	4854      	ldr	r0, [pc, #336]	; (8004b2c <_printf_i+0x21c>)
 80049da:	296f      	cmp	r1, #111	; 0x6f
 80049dc:	bf14      	ite	ne
 80049de:	220a      	movne	r2, #10
 80049e0:	2208      	moveq	r2, #8
 80049e2:	2100      	movs	r1, #0
 80049e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e8:	6865      	ldr	r5, [r4, #4]
 80049ea:	60a5      	str	r5, [r4, #8]
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	f2c0 8095 	blt.w	8004b1c <_printf_i+0x20c>
 80049f2:	6821      	ldr	r1, [r4, #0]
 80049f4:	f021 0104 	bic.w	r1, r1, #4
 80049f8:	6021      	str	r1, [r4, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13d      	bne.n	8004a7a <_printf_i+0x16a>
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	f040 808e 	bne.w	8004b20 <_printf_i+0x210>
 8004a04:	4665      	mov	r5, ip
 8004a06:	2a08      	cmp	r2, #8
 8004a08:	d10b      	bne.n	8004a22 <_printf_i+0x112>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	07db      	lsls	r3, r3, #31
 8004a0e:	d508      	bpl.n	8004a22 <_printf_i+0x112>
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	bfde      	ittt	le
 8004a18:	2330      	movle	r3, #48	; 0x30
 8004a1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a22:	ebac 0305 	sub.w	r3, ip, r5
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	f8cd 8000 	str.w	r8, [sp]
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	aa03      	add	r2, sp, #12
 8004a30:	4621      	mov	r1, r4
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff fef6 	bl	8004824 <_printf_common>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d14d      	bne.n	8004ad8 <_printf_i+0x1c8>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	b005      	add	sp, #20
 8004a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a46:	4839      	ldr	r0, [pc, #228]	; (8004b2c <_printf_i+0x21c>)
 8004a48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a4c:	6813      	ldr	r3, [r2, #0]
 8004a4e:	6821      	ldr	r1, [r4, #0]
 8004a50:	1d1d      	adds	r5, r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6015      	str	r5, [r2, #0]
 8004a56:	060a      	lsls	r2, r1, #24
 8004a58:	d50b      	bpl.n	8004a72 <_printf_i+0x162>
 8004a5a:	07ca      	lsls	r2, r1, #31
 8004a5c:	bf44      	itt	mi
 8004a5e:	f041 0120 	orrmi.w	r1, r1, #32
 8004a62:	6021      	strmi	r1, [r4, #0]
 8004a64:	b91b      	cbnz	r3, 8004a6e <_printf_i+0x15e>
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	f022 0220 	bic.w	r2, r2, #32
 8004a6c:	6022      	str	r2, [r4, #0]
 8004a6e:	2210      	movs	r2, #16
 8004a70:	e7b7      	b.n	80049e2 <_printf_i+0xd2>
 8004a72:	064d      	lsls	r5, r1, #25
 8004a74:	bf48      	it	mi
 8004a76:	b29b      	uxthmi	r3, r3
 8004a78:	e7ef      	b.n	8004a5a <_printf_i+0x14a>
 8004a7a:	4665      	mov	r5, ip
 8004a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a80:	fb02 3311 	mls	r3, r2, r1, r3
 8004a84:	5cc3      	ldrb	r3, [r0, r3]
 8004a86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d1f5      	bne.n	8004a7c <_printf_i+0x16c>
 8004a90:	e7b9      	b.n	8004a06 <_printf_i+0xf6>
 8004a92:	6813      	ldr	r3, [r2, #0]
 8004a94:	6825      	ldr	r5, [r4, #0]
 8004a96:	6961      	ldr	r1, [r4, #20]
 8004a98:	1d18      	adds	r0, r3, #4
 8004a9a:	6010      	str	r0, [r2, #0]
 8004a9c:	0628      	lsls	r0, r5, #24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0x196>
 8004aa2:	6019      	str	r1, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <_printf_i+0x19c>
 8004aa6:	066a      	lsls	r2, r5, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0x192>
 8004aaa:	8019      	strh	r1, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	4665      	mov	r5, ip
 8004ab2:	e7b9      	b.n	8004a28 <_printf_i+0x118>
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	1d19      	adds	r1, r3, #4
 8004ab8:	6011      	str	r1, [r2, #0]
 8004aba:	681d      	ldr	r5, [r3, #0]
 8004abc:	6862      	ldr	r2, [r4, #4]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f7fb fb9d 	bl	8000200 <memchr>
 8004ac6:	b108      	cbz	r0, 8004acc <_printf_i+0x1bc>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	e7a7      	b.n	8004a28 <_printf_i+0x118>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4639      	mov	r1, r7
 8004ade:	4630      	mov	r0, r6
 8004ae0:	47c0      	blx	r8
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d0aa      	beq.n	8004a3c <_printf_i+0x12c>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d413      	bmi.n	8004b14 <_printf_i+0x204>
 8004aec:	68e0      	ldr	r0, [r4, #12]
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	4298      	cmp	r0, r3
 8004af2:	bfb8      	it	lt
 8004af4:	4618      	movlt	r0, r3
 8004af6:	e7a3      	b.n	8004a40 <_printf_i+0x130>
 8004af8:	2301      	movs	r3, #1
 8004afa:	464a      	mov	r2, r9
 8004afc:	4639      	mov	r1, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d09a      	beq.n	8004a3c <_printf_i+0x12c>
 8004b06:	3501      	adds	r5, #1
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	9a03      	ldr	r2, [sp, #12]
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dcf2      	bgt.n	8004af8 <_printf_i+0x1e8>
 8004b12:	e7eb      	b.n	8004aec <_printf_i+0x1dc>
 8004b14:	2500      	movs	r5, #0
 8004b16:	f104 0919 	add.w	r9, r4, #25
 8004b1a:	e7f5      	b.n	8004b08 <_printf_i+0x1f8>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ac      	bne.n	8004a7a <_printf_i+0x16a>
 8004b20:	7803      	ldrb	r3, [r0, #0]
 8004b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b2a:	e76c      	b.n	8004a06 <_printf_i+0xf6>
 8004b2c:	08006ca6 	.word	0x08006ca6
 8004b30:	08006cb7 	.word	0x08006cb7

08004b34 <iprintf>:
 8004b34:	b40f      	push	{r0, r1, r2, r3}
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <iprintf+0x2c>)
 8004b38:	b513      	push	{r0, r1, r4, lr}
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	b124      	cbz	r4, 8004b48 <iprintf+0x14>
 8004b3e:	69a3      	ldr	r3, [r4, #24]
 8004b40:	b913      	cbnz	r3, 8004b48 <iprintf+0x14>
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 feb4 	bl	80058b0 <__sinit>
 8004b48:	ab05      	add	r3, sp, #20
 8004b4a:	9a04      	ldr	r2, [sp, #16]
 8004b4c:	68a1      	ldr	r1, [r4, #8]
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f001 fc65 	bl	8006420 <_vfiprintf_r>
 8004b56:	b002      	add	sp, #8
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	b004      	add	sp, #16
 8004b5e:	4770      	bx	lr
 8004b60:	2000000c 	.word	0x2000000c

08004b64 <siprintf>:
 8004b64:	b40e      	push	{r1, r2, r3}
 8004b66:	b500      	push	{lr}
 8004b68:	b09c      	sub	sp, #112	; 0x70
 8004b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9006      	str	r0, [sp, #24]
 8004b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b74:	4809      	ldr	r0, [pc, #36]	; (8004b9c <siprintf+0x38>)
 8004b76:	9107      	str	r1, [sp, #28]
 8004b78:	9104      	str	r1, [sp, #16]
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <siprintf+0x3c>)
 8004b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	6800      	ldr	r0, [r0, #0]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	a902      	add	r1, sp, #8
 8004b88:	f001 fb28 	bl	80061dc <_svfiprintf_r>
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	b01c      	add	sp, #112	; 0x70
 8004b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b98:	b003      	add	sp, #12
 8004b9a:	4770      	bx	lr
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	ffff0208 	.word	0xffff0208

08004ba4 <quorem>:
 8004ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	6903      	ldr	r3, [r0, #16]
 8004baa:	690c      	ldr	r4, [r1, #16]
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	4680      	mov	r8, r0
 8004bb0:	f2c0 8082 	blt.w	8004cb8 <quorem+0x114>
 8004bb4:	3c01      	subs	r4, #1
 8004bb6:	f101 0714 	add.w	r7, r1, #20
 8004bba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bbe:	f100 0614 	add.w	r6, r0, #20
 8004bc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004bc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004bca:	eb06 030c 	add.w	r3, r6, ip
 8004bce:	3501      	adds	r5, #1
 8004bd0:	eb07 090c 	add.w	r9, r7, ip
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	fbb0 f5f5 	udiv	r5, r0, r5
 8004bda:	b395      	cbz	r5, 8004c42 <quorem+0x9e>
 8004bdc:	f04f 0a00 	mov.w	sl, #0
 8004be0:	4638      	mov	r0, r7
 8004be2:	46b6      	mov	lr, r6
 8004be4:	46d3      	mov	fp, sl
 8004be6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bea:	b293      	uxth	r3, r2
 8004bec:	fb05 a303 	mla	r3, r5, r3, sl
 8004bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ebab 0303 	sub.w	r3, fp, r3
 8004bfa:	0c12      	lsrs	r2, r2, #16
 8004bfc:	f8de b000 	ldr.w	fp, [lr]
 8004c00:	fb05 a202 	mla	r2, r5, r2, sl
 8004c04:	fa13 f38b 	uxtah	r3, r3, fp
 8004c08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c0c:	fa1f fb82 	uxth.w	fp, r2
 8004c10:	f8de 2000 	ldr.w	r2, [lr]
 8004c14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c22:	4581      	cmp	r9, r0
 8004c24:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c28:	f84e 3b04 	str.w	r3, [lr], #4
 8004c2c:	d2db      	bcs.n	8004be6 <quorem+0x42>
 8004c2e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c32:	b933      	cbnz	r3, 8004c42 <quorem+0x9e>
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	3b04      	subs	r3, #4
 8004c38:	429e      	cmp	r6, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	d330      	bcc.n	8004ca0 <quorem+0xfc>
 8004c3e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c42:	4640      	mov	r0, r8
 8004c44:	f001 f8f4 	bl	8005e30 <__mcmp>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	db25      	blt.n	8004c98 <quorem+0xf4>
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f04f 0c00 	mov.w	ip, #0
 8004c54:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c58:	f8d0 e000 	ldr.w	lr, [r0]
 8004c5c:	b293      	uxth	r3, r2
 8004c5e:	ebac 0303 	sub.w	r3, ip, r3
 8004c62:	0c12      	lsrs	r2, r2, #16
 8004c64:	fa13 f38e 	uxtah	r3, r3, lr
 8004c68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c76:	45b9      	cmp	r9, r7
 8004c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c7c:	f840 3b04 	str.w	r3, [r0], #4
 8004c80:	d2e8      	bcs.n	8004c54 <quorem+0xb0>
 8004c82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c8a:	b92a      	cbnz	r2, 8004c98 <quorem+0xf4>
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	429e      	cmp	r6, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	d30b      	bcc.n	8004cac <quorem+0x108>
 8004c94:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c98:	4628      	mov	r0, r5
 8004c9a:	b003      	add	sp, #12
 8004c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	2a00      	cmp	r2, #0
 8004ca6:	d1ca      	bne.n	8004c3e <quorem+0x9a>
 8004ca8:	3c01      	subs	r4, #1
 8004caa:	e7c5      	b.n	8004c38 <quorem+0x94>
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	2a00      	cmp	r2, #0
 8004cb2:	d1ef      	bne.n	8004c94 <quorem+0xf0>
 8004cb4:	3c01      	subs	r4, #1
 8004cb6:	e7ea      	b.n	8004c8e <quorem+0xea>
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e7ee      	b.n	8004c9a <quorem+0xf6>
 8004cbc:	0000      	movs	r0, r0
	...

08004cc0 <_dtoa_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	ec57 6b10 	vmov	r6, r7, d0
 8004cc8:	b097      	sub	sp, #92	; 0x5c
 8004cca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ccc:	9106      	str	r1, [sp, #24]
 8004cce:	4604      	mov	r4, r0
 8004cd0:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cd2:	9312      	str	r3, [sp, #72]	; 0x48
 8004cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004cd8:	e9cd 6700 	strd	r6, r7, [sp]
 8004cdc:	b93d      	cbnz	r5, 8004cee <_dtoa_r+0x2e>
 8004cde:	2010      	movs	r0, #16
 8004ce0:	f000 fe7e 	bl	80059e0 <malloc>
 8004ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8004ce6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cea:	6005      	str	r5, [r0, #0]
 8004cec:	60c5      	str	r5, [r0, #12]
 8004cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	b151      	cbz	r1, 8004d0a <_dtoa_r+0x4a>
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	604a      	str	r2, [r1, #4]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4093      	lsls	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 feb5 	bl	8005a6e <_Bfree>
 8004d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	1e3b      	subs	r3, r7, #0
 8004d0c:	bfbb      	ittet	lt
 8004d0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	9301      	strlt	r3, [sp, #4]
 8004d14:	2300      	movge	r3, #0
 8004d16:	2201      	movlt	r2, #1
 8004d18:	bfac      	ite	ge
 8004d1a:	f8c8 3000 	strge.w	r3, [r8]
 8004d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d22:	4baf      	ldr	r3, [pc, #700]	; (8004fe0 <_dtoa_r+0x320>)
 8004d24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d28:	ea33 0308 	bics.w	r3, r3, r8
 8004d2c:	d114      	bne.n	8004d58 <_dtoa_r+0x98>
 8004d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	9b00      	ldr	r3, [sp, #0]
 8004d38:	b923      	cbnz	r3, 8004d44 <_dtoa_r+0x84>
 8004d3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f000 8542 	beq.w	80057c8 <_dtoa_r+0xb08>
 8004d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004ff4 <_dtoa_r+0x334>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8544 	beq.w	80057d8 <_dtoa_r+0xb18>
 8004d50:	f10b 0303 	add.w	r3, fp, #3
 8004d54:	f000 bd3e 	b.w	80057d4 <_dtoa_r+0xb14>
 8004d58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2300      	movs	r3, #0
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	f7fb fec0 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d68:	4681      	mov	r9, r0
 8004d6a:	b168      	cbz	r0, 8004d88 <_dtoa_r+0xc8>
 8004d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d6e:	2301      	movs	r3, #1
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8524 	beq.w	80057c2 <_dtoa_r+0xb02>
 8004d7a:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <_dtoa_r+0x324>)
 8004d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	f000 bd28 	b.w	80057d8 <_dtoa_r+0xb18>
 8004d88:	aa14      	add	r2, sp, #80	; 0x50
 8004d8a:	a915      	add	r1, sp, #84	; 0x54
 8004d8c:	ec47 6b10 	vmov	d0, r6, r7
 8004d90:	4620      	mov	r0, r4
 8004d92:	f001 f8c4 	bl	8005f1e <__d2b>
 8004d96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d9a:	9004      	str	r0, [sp, #16]
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	d07c      	beq.n	8004e9a <_dtoa_r+0x1da>
 8004da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004da4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004da8:	46b2      	mov	sl, r6
 8004daa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004db2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004db6:	2200      	movs	r2, #0
 8004db8:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <_dtoa_r+0x328>)
 8004dba:	4650      	mov	r0, sl
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	f7fb fa73 	bl	80002a8 <__aeabi_dsub>
 8004dc2:	a381      	add	r3, pc, #516	; (adr r3, 8004fc8 <_dtoa_r+0x308>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fc26 	bl	8000618 <__aeabi_dmul>
 8004dcc:	a380      	add	r3, pc, #512	; (adr r3, 8004fd0 <_dtoa_r+0x310>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fa6b 	bl	80002ac <__adddf3>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	4628      	mov	r0, r5
 8004dda:	460f      	mov	r7, r1
 8004ddc:	f7fb fbb2 	bl	8000544 <__aeabi_i2d>
 8004de0:	a37d      	add	r3, pc, #500	; (adr r3, 8004fd8 <_dtoa_r+0x318>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fc17 	bl	8000618 <__aeabi_dmul>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fa5b 	bl	80002ac <__adddf3>
 8004df6:	4606      	mov	r6, r0
 8004df8:	460f      	mov	r7, r1
 8004dfa:	f7fb febd 	bl	8000b78 <__aeabi_d2iz>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4682      	mov	sl, r0
 8004e02:	2300      	movs	r3, #0
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fe78 	bl	8000afc <__aeabi_dcmplt>
 8004e0c:	b148      	cbz	r0, 8004e22 <_dtoa_r+0x162>
 8004e0e:	4650      	mov	r0, sl
 8004e10:	f7fb fb98 	bl	8000544 <__aeabi_i2d>
 8004e14:	4632      	mov	r2, r6
 8004e16:	463b      	mov	r3, r7
 8004e18:	f7fb fe66 	bl	8000ae8 <__aeabi_dcmpeq>
 8004e1c:	b908      	cbnz	r0, 8004e22 <_dtoa_r+0x162>
 8004e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e22:	f1ba 0f16 	cmp.w	sl, #22
 8004e26:	d859      	bhi.n	8004edc <_dtoa_r+0x21c>
 8004e28:	4970      	ldr	r1, [pc, #448]	; (8004fec <_dtoa_r+0x32c>)
 8004e2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e36:	f7fb fe7f 	bl	8000b38 <__aeabi_dcmpgt>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d050      	beq.n	8004ee0 <_dtoa_r+0x220>
 8004e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e42:	2300      	movs	r3, #0
 8004e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e48:	1b5d      	subs	r5, r3, r5
 8004e4a:	f1b5 0801 	subs.w	r8, r5, #1
 8004e4e:	bf49      	itett	mi
 8004e50:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e54:	2300      	movpl	r3, #0
 8004e56:	9305      	strmi	r3, [sp, #20]
 8004e58:	f04f 0800 	movmi.w	r8, #0
 8004e5c:	bf58      	it	pl
 8004e5e:	9305      	strpl	r3, [sp, #20]
 8004e60:	f1ba 0f00 	cmp.w	sl, #0
 8004e64:	db3e      	blt.n	8004ee4 <_dtoa_r+0x224>
 8004e66:	2300      	movs	r3, #0
 8004e68:	44d0      	add	r8, sl
 8004e6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	f200 8090 	bhi.w	8004f98 <_dtoa_r+0x2d8>
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	bfc4      	itt	gt
 8004e7c:	3b04      	subgt	r3, #4
 8004e7e:	9306      	strgt	r3, [sp, #24]
 8004e80:	9b06      	ldr	r3, [sp, #24]
 8004e82:	f1a3 0302 	sub.w	r3, r3, #2
 8004e86:	bfcc      	ite	gt
 8004e88:	2500      	movgt	r5, #0
 8004e8a:	2501      	movle	r5, #1
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	f200 808f 	bhi.w	8004fb0 <_dtoa_r+0x2f0>
 8004e92:	e8df f003 	tbb	[pc, r3]
 8004e96:	7f7d      	.short	0x7f7d
 8004e98:	7131      	.short	0x7131
 8004e9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e9e:	441d      	add	r5, r3
 8004ea0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ea4:	2820      	cmp	r0, #32
 8004ea6:	dd13      	ble.n	8004ed0 <_dtoa_r+0x210>
 8004ea8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	fa08 f800 	lsl.w	r8, r8, r0
 8004eb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004eb6:	fa23 f000 	lsr.w	r0, r3, r0
 8004eba:	ea48 0000 	orr.w	r0, r8, r0
 8004ebe:	f7fb fb31 	bl	8000524 <__aeabi_ui2d>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4682      	mov	sl, r0
 8004ec6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004eca:	3d01      	subs	r5, #1
 8004ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ece:	e772      	b.n	8004db6 <_dtoa_r+0xf6>
 8004ed0:	9b00      	ldr	r3, [sp, #0]
 8004ed2:	f1c0 0020 	rsb	r0, r0, #32
 8004ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eda:	e7f0      	b.n	8004ebe <_dtoa_r+0x1fe>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e7b1      	b.n	8004e44 <_dtoa_r+0x184>
 8004ee0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ee2:	e7b0      	b.n	8004e46 <_dtoa_r+0x186>
 8004ee4:	9b05      	ldr	r3, [sp, #20]
 8004ee6:	eba3 030a 	sub.w	r3, r3, sl
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	f1ca 0300 	rsb	r3, sl, #0
 8004ef0:	9307      	str	r3, [sp, #28]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ef6:	e7bb      	b.n	8004e70 <_dtoa_r+0x1b0>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	930a      	str	r3, [sp, #40]	; 0x28
 8004efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd59      	ble.n	8004fb6 <_dtoa_r+0x2f6>
 8004f02:	9302      	str	r3, [sp, #8]
 8004f04:	4699      	mov	r9, r3
 8004f06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f08:	2200      	movs	r2, #0
 8004f0a:	6072      	str	r2, [r6, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	f102 0014 	add.w	r0, r2, #20
 8004f12:	4298      	cmp	r0, r3
 8004f14:	6871      	ldr	r1, [r6, #4]
 8004f16:	d953      	bls.n	8004fc0 <_dtoa_r+0x300>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 fd74 	bl	8005a06 <_Balloc>
 8004f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f20:	6030      	str	r0, [r6, #0]
 8004f22:	f1b9 0f0e 	cmp.w	r9, #14
 8004f26:	f8d3 b000 	ldr.w	fp, [r3]
 8004f2a:	f200 80e6 	bhi.w	80050fa <_dtoa_r+0x43a>
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	f000 80e3 	beq.w	80050fa <_dtoa_r+0x43a>
 8004f34:	ed9d 7b00 	vldr	d7, [sp]
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f40:	dd74      	ble.n	800502c <_dtoa_r+0x36c>
 8004f42:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <_dtoa_r+0x32c>)
 8004f44:	f00a 030f 	and.w	r3, sl, #15
 8004f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f4c:	ed93 7b00 	vldr	d7, [r3]
 8004f50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f54:	06f0      	lsls	r0, r6, #27
 8004f56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f5a:	d565      	bpl.n	8005028 <_dtoa_r+0x368>
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <_dtoa_r+0x330>)
 8004f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f66:	f7fb fc81 	bl	800086c <__aeabi_ddiv>
 8004f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f6e:	f006 060f 	and.w	r6, r6, #15
 8004f72:	2503      	movs	r5, #3
 8004f74:	4f1e      	ldr	r7, [pc, #120]	; (8004ff0 <_dtoa_r+0x330>)
 8004f76:	e04c      	b.n	8005012 <_dtoa_r+0x352>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f7e:	4453      	add	r3, sl
 8004f80:	f103 0901 	add.w	r9, r3, #1
 8004f84:	9302      	str	r3, [sp, #8]
 8004f86:	464b      	mov	r3, r9
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	bfb8      	it	lt
 8004f8c:	2301      	movlt	r3, #1
 8004f8e:	e7ba      	b.n	8004f06 <_dtoa_r+0x246>
 8004f90:	2300      	movs	r3, #0
 8004f92:	e7b2      	b.n	8004efa <_dtoa_r+0x23a>
 8004f94:	2300      	movs	r3, #0
 8004f96:	e7f0      	b.n	8004f7a <_dtoa_r+0x2ba>
 8004f98:	2501      	movs	r5, #1
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	950a      	str	r5, [sp, #40]	; 0x28
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	9302      	str	r3, [sp, #8]
 8004fa6:	4699      	mov	r9, r3
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2312      	movs	r3, #18
 8004fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fae:	e7aa      	b.n	8004f06 <_dtoa_r+0x246>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb4:	e7f4      	b.n	8004fa0 <_dtoa_r+0x2e0>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	4699      	mov	r9, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	e7f5      	b.n	8004fac <_dtoa_r+0x2ec>
 8004fc0:	3101      	adds	r1, #1
 8004fc2:	6071      	str	r1, [r6, #4]
 8004fc4:	0052      	lsls	r2, r2, #1
 8004fc6:	e7a2      	b.n	8004f0e <_dtoa_r+0x24e>
 8004fc8:	636f4361 	.word	0x636f4361
 8004fcc:	3fd287a7 	.word	0x3fd287a7
 8004fd0:	8b60c8b3 	.word	0x8b60c8b3
 8004fd4:	3fc68a28 	.word	0x3fc68a28
 8004fd8:	509f79fb 	.word	0x509f79fb
 8004fdc:	3fd34413 	.word	0x3fd34413
 8004fe0:	7ff00000 	.word	0x7ff00000
 8004fe4:	08006ca5 	.word	0x08006ca5
 8004fe8:	3ff80000 	.word	0x3ff80000
 8004fec:	08006d60 	.word	0x08006d60
 8004ff0:	08006d38 	.word	0x08006d38
 8004ff4:	08006cd1 	.word	0x08006cd1
 8004ff8:	07f1      	lsls	r1, r6, #31
 8004ffa:	d508      	bpl.n	800500e <_dtoa_r+0x34e>
 8004ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005004:	f7fb fb08 	bl	8000618 <__aeabi_dmul>
 8005008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800500c:	3501      	adds	r5, #1
 800500e:	1076      	asrs	r6, r6, #1
 8005010:	3708      	adds	r7, #8
 8005012:	2e00      	cmp	r6, #0
 8005014:	d1f0      	bne.n	8004ff8 <_dtoa_r+0x338>
 8005016:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800501a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800501e:	f7fb fc25 	bl	800086c <__aeabi_ddiv>
 8005022:	e9cd 0100 	strd	r0, r1, [sp]
 8005026:	e01a      	b.n	800505e <_dtoa_r+0x39e>
 8005028:	2502      	movs	r5, #2
 800502a:	e7a3      	b.n	8004f74 <_dtoa_r+0x2b4>
 800502c:	f000 80a0 	beq.w	8005170 <_dtoa_r+0x4b0>
 8005030:	f1ca 0600 	rsb	r6, sl, #0
 8005034:	4b9f      	ldr	r3, [pc, #636]	; (80052b4 <_dtoa_r+0x5f4>)
 8005036:	4fa0      	ldr	r7, [pc, #640]	; (80052b8 <_dtoa_r+0x5f8>)
 8005038:	f006 020f 	and.w	r2, r6, #15
 800503c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005048:	f7fb fae6 	bl	8000618 <__aeabi_dmul>
 800504c:	e9cd 0100 	strd	r0, r1, [sp]
 8005050:	1136      	asrs	r6, r6, #4
 8005052:	2300      	movs	r3, #0
 8005054:	2502      	movs	r5, #2
 8005056:	2e00      	cmp	r6, #0
 8005058:	d17f      	bne.n	800515a <_dtoa_r+0x49a>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e1      	bne.n	8005022 <_dtoa_r+0x362>
 800505e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8087 	beq.w	8005174 <_dtoa_r+0x4b4>
 8005066:	e9dd 6700 	ldrd	r6, r7, [sp]
 800506a:	2200      	movs	r2, #0
 800506c:	4b93      	ldr	r3, [pc, #588]	; (80052bc <_dtoa_r+0x5fc>)
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fd43 	bl	8000afc <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	d07c      	beq.n	8005174 <_dtoa_r+0x4b4>
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	d079      	beq.n	8005174 <_dtoa_r+0x4b4>
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	dd35      	ble.n	80050f2 <_dtoa_r+0x432>
 8005086:	f10a 33ff 	add.w	r3, sl, #4294967295
 800508a:	9308      	str	r3, [sp, #32]
 800508c:	4639      	mov	r1, r7
 800508e:	2200      	movs	r2, #0
 8005090:	4b8b      	ldr	r3, [pc, #556]	; (80052c0 <_dtoa_r+0x600>)
 8005092:	4630      	mov	r0, r6
 8005094:	f7fb fac0 	bl	8000618 <__aeabi_dmul>
 8005098:	e9cd 0100 	strd	r0, r1, [sp]
 800509c:	9f02      	ldr	r7, [sp, #8]
 800509e:	3501      	adds	r5, #1
 80050a0:	4628      	mov	r0, r5
 80050a2:	f7fb fa4f 	bl	8000544 <__aeabi_i2d>
 80050a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050aa:	f7fb fab5 	bl	8000618 <__aeabi_dmul>
 80050ae:	2200      	movs	r2, #0
 80050b0:	4b84      	ldr	r3, [pc, #528]	; (80052c4 <_dtoa_r+0x604>)
 80050b2:	f7fb f8fb 	bl	80002ac <__adddf3>
 80050b6:	4605      	mov	r5, r0
 80050b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050bc:	2f00      	cmp	r7, #0
 80050be:	d15d      	bne.n	800517c <_dtoa_r+0x4bc>
 80050c0:	2200      	movs	r2, #0
 80050c2:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <_dtoa_r+0x608>)
 80050c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050c8:	f7fb f8ee 	bl	80002a8 <__aeabi_dsub>
 80050cc:	462a      	mov	r2, r5
 80050ce:	4633      	mov	r3, r6
 80050d0:	e9cd 0100 	strd	r0, r1, [sp]
 80050d4:	f7fb fd30 	bl	8000b38 <__aeabi_dcmpgt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f040 8288 	bne.w	80055ee <_dtoa_r+0x92e>
 80050de:	462a      	mov	r2, r5
 80050e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e8:	f7fb fd08 	bl	8000afc <__aeabi_dcmplt>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f040 827c 	bne.w	80055ea <_dtoa_r+0x92a>
 80050f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050f6:	e9cd 2300 	strd	r2, r3, [sp]
 80050fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f2c0 8150 	blt.w	80053a2 <_dtoa_r+0x6e2>
 8005102:	f1ba 0f0e 	cmp.w	sl, #14
 8005106:	f300 814c 	bgt.w	80053a2 <_dtoa_r+0x6e2>
 800510a:	4b6a      	ldr	r3, [pc, #424]	; (80052b4 <_dtoa_r+0x5f4>)
 800510c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005110:	ed93 7b00 	vldr	d7, [r3]
 8005114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800511c:	f280 80d8 	bge.w	80052d0 <_dtoa_r+0x610>
 8005120:	f1b9 0f00 	cmp.w	r9, #0
 8005124:	f300 80d4 	bgt.w	80052d0 <_dtoa_r+0x610>
 8005128:	f040 825e 	bne.w	80055e8 <_dtoa_r+0x928>
 800512c:	2200      	movs	r2, #0
 800512e:	4b66      	ldr	r3, [pc, #408]	; (80052c8 <_dtoa_r+0x608>)
 8005130:	ec51 0b17 	vmov	r0, r1, d7
 8005134:	f7fb fa70 	bl	8000618 <__aeabi_dmul>
 8005138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800513c:	f7fb fcf2 	bl	8000b24 <__aeabi_dcmpge>
 8005140:	464f      	mov	r7, r9
 8005142:	464e      	mov	r6, r9
 8005144:	2800      	cmp	r0, #0
 8005146:	f040 8234 	bne.w	80055b2 <_dtoa_r+0x8f2>
 800514a:	2331      	movs	r3, #49	; 0x31
 800514c:	f10b 0501 	add.w	r5, fp, #1
 8005150:	f88b 3000 	strb.w	r3, [fp]
 8005154:	f10a 0a01 	add.w	sl, sl, #1
 8005158:	e22f      	b.n	80055ba <_dtoa_r+0x8fa>
 800515a:	07f2      	lsls	r2, r6, #31
 800515c:	d505      	bpl.n	800516a <_dtoa_r+0x4aa>
 800515e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005162:	f7fb fa59 	bl	8000618 <__aeabi_dmul>
 8005166:	3501      	adds	r5, #1
 8005168:	2301      	movs	r3, #1
 800516a:	1076      	asrs	r6, r6, #1
 800516c:	3708      	adds	r7, #8
 800516e:	e772      	b.n	8005056 <_dtoa_r+0x396>
 8005170:	2502      	movs	r5, #2
 8005172:	e774      	b.n	800505e <_dtoa_r+0x39e>
 8005174:	f8cd a020 	str.w	sl, [sp, #32]
 8005178:	464f      	mov	r7, r9
 800517a:	e791      	b.n	80050a0 <_dtoa_r+0x3e0>
 800517c:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <_dtoa_r+0x5f4>)
 800517e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005182:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d047      	beq.n	800521c <_dtoa_r+0x55c>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	2000      	movs	r0, #0
 8005192:	494e      	ldr	r1, [pc, #312]	; (80052cc <_dtoa_r+0x60c>)
 8005194:	f7fb fb6a 	bl	800086c <__aeabi_ddiv>
 8005198:	462a      	mov	r2, r5
 800519a:	4633      	mov	r3, r6
 800519c:	f7fb f884 	bl	80002a8 <__aeabi_dsub>
 80051a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051a4:	465d      	mov	r5, fp
 80051a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051aa:	f7fb fce5 	bl	8000b78 <__aeabi_d2iz>
 80051ae:	4606      	mov	r6, r0
 80051b0:	f7fb f9c8 	bl	8000544 <__aeabi_i2d>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051bc:	f7fb f874 	bl	80002a8 <__aeabi_dsub>
 80051c0:	3630      	adds	r6, #48	; 0x30
 80051c2:	f805 6b01 	strb.w	r6, [r5], #1
 80051c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051ca:	e9cd 0100 	strd	r0, r1, [sp]
 80051ce:	f7fb fc95 	bl	8000afc <__aeabi_dcmplt>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d163      	bne.n	800529e <_dtoa_r+0x5de>
 80051d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051da:	2000      	movs	r0, #0
 80051dc:	4937      	ldr	r1, [pc, #220]	; (80052bc <_dtoa_r+0x5fc>)
 80051de:	f7fb f863 	bl	80002a8 <__aeabi_dsub>
 80051e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051e6:	f7fb fc89 	bl	8000afc <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	f040 80b7 	bne.w	800535e <_dtoa_r+0x69e>
 80051f0:	eba5 030b 	sub.w	r3, r5, fp
 80051f4:	429f      	cmp	r7, r3
 80051f6:	f77f af7c 	ble.w	80050f2 <_dtoa_r+0x432>
 80051fa:	2200      	movs	r2, #0
 80051fc:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <_dtoa_r+0x600>)
 80051fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005202:	f7fb fa09 	bl	8000618 <__aeabi_dmul>
 8005206:	2200      	movs	r2, #0
 8005208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800520c:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <_dtoa_r+0x600>)
 800520e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005212:	f7fb fa01 	bl	8000618 <__aeabi_dmul>
 8005216:	e9cd 0100 	strd	r0, r1, [sp]
 800521a:	e7c4      	b.n	80051a6 <_dtoa_r+0x4e6>
 800521c:	462a      	mov	r2, r5
 800521e:	4633      	mov	r3, r6
 8005220:	f7fb f9fa 	bl	8000618 <__aeabi_dmul>
 8005224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005228:	eb0b 0507 	add.w	r5, fp, r7
 800522c:	465e      	mov	r6, fp
 800522e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005232:	f7fb fca1 	bl	8000b78 <__aeabi_d2iz>
 8005236:	4607      	mov	r7, r0
 8005238:	f7fb f984 	bl	8000544 <__aeabi_i2d>
 800523c:	3730      	adds	r7, #48	; 0x30
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005246:	f7fb f82f 	bl	80002a8 <__aeabi_dsub>
 800524a:	f806 7b01 	strb.w	r7, [r6], #1
 800524e:	42ae      	cmp	r6, r5
 8005250:	e9cd 0100 	strd	r0, r1, [sp]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	d126      	bne.n	80052a8 <_dtoa_r+0x5e8>
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <_dtoa_r+0x60c>)
 800525c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005260:	f7fb f824 	bl	80002ac <__adddf3>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800526c:	f7fb fc64 	bl	8000b38 <__aeabi_dcmpgt>
 8005270:	2800      	cmp	r0, #0
 8005272:	d174      	bne.n	800535e <_dtoa_r+0x69e>
 8005274:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005278:	2000      	movs	r0, #0
 800527a:	4914      	ldr	r1, [pc, #80]	; (80052cc <_dtoa_r+0x60c>)
 800527c:	f7fb f814 	bl	80002a8 <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005288:	f7fb fc38 	bl	8000afc <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f43f af30 	beq.w	80050f2 <_dtoa_r+0x432>
 8005292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005296:	2b30      	cmp	r3, #48	; 0x30
 8005298:	f105 32ff 	add.w	r2, r5, #4294967295
 800529c:	d002      	beq.n	80052a4 <_dtoa_r+0x5e4>
 800529e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052a2:	e04a      	b.n	800533a <_dtoa_r+0x67a>
 80052a4:	4615      	mov	r5, r2
 80052a6:	e7f4      	b.n	8005292 <_dtoa_r+0x5d2>
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <_dtoa_r+0x600>)
 80052aa:	f7fb f9b5 	bl	8000618 <__aeabi_dmul>
 80052ae:	e9cd 0100 	strd	r0, r1, [sp]
 80052b2:	e7bc      	b.n	800522e <_dtoa_r+0x56e>
 80052b4:	08006d60 	.word	0x08006d60
 80052b8:	08006d38 	.word	0x08006d38
 80052bc:	3ff00000 	.word	0x3ff00000
 80052c0:	40240000 	.word	0x40240000
 80052c4:	401c0000 	.word	0x401c0000
 80052c8:	40140000 	.word	0x40140000
 80052cc:	3fe00000 	.word	0x3fe00000
 80052d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052d4:	465d      	mov	r5, fp
 80052d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052da:	4630      	mov	r0, r6
 80052dc:	4639      	mov	r1, r7
 80052de:	f7fb fac5 	bl	800086c <__aeabi_ddiv>
 80052e2:	f7fb fc49 	bl	8000b78 <__aeabi_d2iz>
 80052e6:	4680      	mov	r8, r0
 80052e8:	f7fb f92c 	bl	8000544 <__aeabi_i2d>
 80052ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052f0:	f7fb f992 	bl	8000618 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005300:	f7fa ffd2 	bl	80002a8 <__aeabi_dsub>
 8005304:	f805 6b01 	strb.w	r6, [r5], #1
 8005308:	eba5 060b 	sub.w	r6, r5, fp
 800530c:	45b1      	cmp	r9, r6
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	d139      	bne.n	8005388 <_dtoa_r+0x6c8>
 8005314:	f7fa ffca 	bl	80002ac <__adddf3>
 8005318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	f7fb fc0a 	bl	8000b38 <__aeabi_dcmpgt>
 8005324:	b9c8      	cbnz	r0, 800535a <_dtoa_r+0x69a>
 8005326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fb fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005332:	b110      	cbz	r0, 800533a <_dtoa_r+0x67a>
 8005334:	f018 0f01 	tst.w	r8, #1
 8005338:	d10f      	bne.n	800535a <_dtoa_r+0x69a>
 800533a:	9904      	ldr	r1, [sp, #16]
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fb96 	bl	8005a6e <_Bfree>
 8005342:	2300      	movs	r3, #0
 8005344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005346:	702b      	strb	r3, [r5, #0]
 8005348:	f10a 0301 	add.w	r3, sl, #1
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8241 	beq.w	80057d8 <_dtoa_r+0xb18>
 8005356:	601d      	str	r5, [r3, #0]
 8005358:	e23e      	b.n	80057d8 <_dtoa_r+0xb18>
 800535a:	f8cd a020 	str.w	sl, [sp, #32]
 800535e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005362:	2a39      	cmp	r2, #57	; 0x39
 8005364:	f105 33ff 	add.w	r3, r5, #4294967295
 8005368:	d108      	bne.n	800537c <_dtoa_r+0x6bc>
 800536a:	459b      	cmp	fp, r3
 800536c:	d10a      	bne.n	8005384 <_dtoa_r+0x6c4>
 800536e:	9b08      	ldr	r3, [sp, #32]
 8005370:	3301      	adds	r3, #1
 8005372:	9308      	str	r3, [sp, #32]
 8005374:	2330      	movs	r3, #48	; 0x30
 8005376:	f88b 3000 	strb.w	r3, [fp]
 800537a:	465b      	mov	r3, fp
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	3201      	adds	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e78c      	b.n	800529e <_dtoa_r+0x5de>
 8005384:	461d      	mov	r5, r3
 8005386:	e7ea      	b.n	800535e <_dtoa_r+0x69e>
 8005388:	2200      	movs	r2, #0
 800538a:	4b9b      	ldr	r3, [pc, #620]	; (80055f8 <_dtoa_r+0x938>)
 800538c:	f7fb f944 	bl	8000618 <__aeabi_dmul>
 8005390:	2200      	movs	r2, #0
 8005392:	2300      	movs	r3, #0
 8005394:	4606      	mov	r6, r0
 8005396:	460f      	mov	r7, r1
 8005398:	f7fb fba6 	bl	8000ae8 <__aeabi_dcmpeq>
 800539c:	2800      	cmp	r0, #0
 800539e:	d09a      	beq.n	80052d6 <_dtoa_r+0x616>
 80053a0:	e7cb      	b.n	800533a <_dtoa_r+0x67a>
 80053a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	f000 808b 	beq.w	80054c0 <_dtoa_r+0x800>
 80053aa:	9a06      	ldr	r2, [sp, #24]
 80053ac:	2a01      	cmp	r2, #1
 80053ae:	dc6e      	bgt.n	800548e <_dtoa_r+0x7ce>
 80053b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d067      	beq.n	8005486 <_dtoa_r+0x7c6>
 80053b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ba:	9f07      	ldr	r7, [sp, #28]
 80053bc:	9d05      	ldr	r5, [sp, #20]
 80053be:	9a05      	ldr	r2, [sp, #20]
 80053c0:	2101      	movs	r1, #1
 80053c2:	441a      	add	r2, r3
 80053c4:	4620      	mov	r0, r4
 80053c6:	9205      	str	r2, [sp, #20]
 80053c8:	4498      	add	r8, r3
 80053ca:	f000 fbf0 	bl	8005bae <__i2b>
 80053ce:	4606      	mov	r6, r0
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	dd0c      	ble.n	80053ee <_dtoa_r+0x72e>
 80053d4:	f1b8 0f00 	cmp.w	r8, #0
 80053d8:	dd09      	ble.n	80053ee <_dtoa_r+0x72e>
 80053da:	4545      	cmp	r5, r8
 80053dc:	9a05      	ldr	r2, [sp, #20]
 80053de:	462b      	mov	r3, r5
 80053e0:	bfa8      	it	ge
 80053e2:	4643      	movge	r3, r8
 80053e4:	1ad2      	subs	r2, r2, r3
 80053e6:	9205      	str	r2, [sp, #20]
 80053e8:	1aed      	subs	r5, r5, r3
 80053ea:	eba8 0803 	sub.w	r8, r8, r3
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	b1eb      	cbz	r3, 800542e <_dtoa_r+0x76e>
 80053f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d067      	beq.n	80054c8 <_dtoa_r+0x808>
 80053f8:	b18f      	cbz	r7, 800541e <_dtoa_r+0x75e>
 80053fa:	4631      	mov	r1, r6
 80053fc:	463a      	mov	r2, r7
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 fc74 	bl	8005cec <__pow5mult>
 8005404:	9a04      	ldr	r2, [sp, #16]
 8005406:	4601      	mov	r1, r0
 8005408:	4606      	mov	r6, r0
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fbd8 	bl	8005bc0 <__multiply>
 8005410:	9904      	ldr	r1, [sp, #16]
 8005412:	9008      	str	r0, [sp, #32]
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fb2a 	bl	8005a6e <_Bfree>
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	9b07      	ldr	r3, [sp, #28]
 8005420:	1bda      	subs	r2, r3, r7
 8005422:	d004      	beq.n	800542e <_dtoa_r+0x76e>
 8005424:	9904      	ldr	r1, [sp, #16]
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fc60 	bl	8005cec <__pow5mult>
 800542c:	9004      	str	r0, [sp, #16]
 800542e:	2101      	movs	r1, #1
 8005430:	4620      	mov	r0, r4
 8005432:	f000 fbbc 	bl	8005bae <__i2b>
 8005436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005438:	4607      	mov	r7, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 81d0 	beq.w	80057e0 <_dtoa_r+0xb20>
 8005440:	461a      	mov	r2, r3
 8005442:	4601      	mov	r1, r0
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fc51 	bl	8005cec <__pow5mult>
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	2b01      	cmp	r3, #1
 800544e:	4607      	mov	r7, r0
 8005450:	dc40      	bgt.n	80054d4 <_dtoa_r+0x814>
 8005452:	9b00      	ldr	r3, [sp, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d139      	bne.n	80054cc <_dtoa_r+0x80c>
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800545e:	2b00      	cmp	r3, #0
 8005460:	d136      	bne.n	80054d0 <_dtoa_r+0x810>
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	051b      	lsls	r3, r3, #20
 800546c:	b12b      	cbz	r3, 800547a <_dtoa_r+0x7ba>
 800546e:	9b05      	ldr	r3, [sp, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	f108 0801 	add.w	r8, r8, #1
 8005478:	2301      	movs	r3, #1
 800547a:	9307      	str	r3, [sp, #28]
 800547c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800547e:	2b00      	cmp	r3, #0
 8005480:	d12a      	bne.n	80054d8 <_dtoa_r+0x818>
 8005482:	2001      	movs	r0, #1
 8005484:	e030      	b.n	80054e8 <_dtoa_r+0x828>
 8005486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800548c:	e795      	b.n	80053ba <_dtoa_r+0x6fa>
 800548e:	9b07      	ldr	r3, [sp, #28]
 8005490:	f109 37ff 	add.w	r7, r9, #4294967295
 8005494:	42bb      	cmp	r3, r7
 8005496:	bfbf      	itttt	lt
 8005498:	9b07      	ldrlt	r3, [sp, #28]
 800549a:	9707      	strlt	r7, [sp, #28]
 800549c:	1afa      	sublt	r2, r7, r3
 800549e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054a0:	bfbb      	ittet	lt
 80054a2:	189b      	addlt	r3, r3, r2
 80054a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054a6:	1bdf      	subge	r7, r3, r7
 80054a8:	2700      	movlt	r7, #0
 80054aa:	f1b9 0f00 	cmp.w	r9, #0
 80054ae:	bfb5      	itete	lt
 80054b0:	9b05      	ldrlt	r3, [sp, #20]
 80054b2:	9d05      	ldrge	r5, [sp, #20]
 80054b4:	eba3 0509 	sublt.w	r5, r3, r9
 80054b8:	464b      	movge	r3, r9
 80054ba:	bfb8      	it	lt
 80054bc:	2300      	movlt	r3, #0
 80054be:	e77e      	b.n	80053be <_dtoa_r+0x6fe>
 80054c0:	9f07      	ldr	r7, [sp, #28]
 80054c2:	9d05      	ldr	r5, [sp, #20]
 80054c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054c6:	e783      	b.n	80053d0 <_dtoa_r+0x710>
 80054c8:	9a07      	ldr	r2, [sp, #28]
 80054ca:	e7ab      	b.n	8005424 <_dtoa_r+0x764>
 80054cc:	2300      	movs	r3, #0
 80054ce:	e7d4      	b.n	800547a <_dtoa_r+0x7ba>
 80054d0:	9b00      	ldr	r3, [sp, #0]
 80054d2:	e7d2      	b.n	800547a <_dtoa_r+0x7ba>
 80054d4:	2300      	movs	r3, #0
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80054de:	6918      	ldr	r0, [r3, #16]
 80054e0:	f000 fb17 	bl	8005b12 <__hi0bits>
 80054e4:	f1c0 0020 	rsb	r0, r0, #32
 80054e8:	4440      	add	r0, r8
 80054ea:	f010 001f 	ands.w	r0, r0, #31
 80054ee:	d047      	beq.n	8005580 <_dtoa_r+0x8c0>
 80054f0:	f1c0 0320 	rsb	r3, r0, #32
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	dd3b      	ble.n	8005570 <_dtoa_r+0x8b0>
 80054f8:	9b05      	ldr	r3, [sp, #20]
 80054fa:	f1c0 001c 	rsb	r0, r0, #28
 80054fe:	4403      	add	r3, r0
 8005500:	9305      	str	r3, [sp, #20]
 8005502:	4405      	add	r5, r0
 8005504:	4480      	add	r8, r0
 8005506:	9b05      	ldr	r3, [sp, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	dd05      	ble.n	8005518 <_dtoa_r+0x858>
 800550c:	461a      	mov	r2, r3
 800550e:	9904      	ldr	r1, [sp, #16]
 8005510:	4620      	mov	r0, r4
 8005512:	f000 fc39 	bl	8005d88 <__lshift>
 8005516:	9004      	str	r0, [sp, #16]
 8005518:	f1b8 0f00 	cmp.w	r8, #0
 800551c:	dd05      	ble.n	800552a <_dtoa_r+0x86a>
 800551e:	4639      	mov	r1, r7
 8005520:	4642      	mov	r2, r8
 8005522:	4620      	mov	r0, r4
 8005524:	f000 fc30 	bl	8005d88 <__lshift>
 8005528:	4607      	mov	r7, r0
 800552a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800552c:	b353      	cbz	r3, 8005584 <_dtoa_r+0x8c4>
 800552e:	4639      	mov	r1, r7
 8005530:	9804      	ldr	r0, [sp, #16]
 8005532:	f000 fc7d 	bl	8005e30 <__mcmp>
 8005536:	2800      	cmp	r0, #0
 8005538:	da24      	bge.n	8005584 <_dtoa_r+0x8c4>
 800553a:	2300      	movs	r3, #0
 800553c:	220a      	movs	r2, #10
 800553e:	9904      	ldr	r1, [sp, #16]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 faab 	bl	8005a9c <__multadd>
 8005546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005548:	9004      	str	r0, [sp, #16]
 800554a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 814d 	beq.w	80057ee <_dtoa_r+0xb2e>
 8005554:	2300      	movs	r3, #0
 8005556:	4631      	mov	r1, r6
 8005558:	220a      	movs	r2, #10
 800555a:	4620      	mov	r0, r4
 800555c:	f000 fa9e 	bl	8005a9c <__multadd>
 8005560:	9b02      	ldr	r3, [sp, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	4606      	mov	r6, r0
 8005566:	dc4f      	bgt.n	8005608 <_dtoa_r+0x948>
 8005568:	9b06      	ldr	r3, [sp, #24]
 800556a:	2b02      	cmp	r3, #2
 800556c:	dd4c      	ble.n	8005608 <_dtoa_r+0x948>
 800556e:	e011      	b.n	8005594 <_dtoa_r+0x8d4>
 8005570:	d0c9      	beq.n	8005506 <_dtoa_r+0x846>
 8005572:	9a05      	ldr	r2, [sp, #20]
 8005574:	331c      	adds	r3, #28
 8005576:	441a      	add	r2, r3
 8005578:	9205      	str	r2, [sp, #20]
 800557a:	441d      	add	r5, r3
 800557c:	4498      	add	r8, r3
 800557e:	e7c2      	b.n	8005506 <_dtoa_r+0x846>
 8005580:	4603      	mov	r3, r0
 8005582:	e7f6      	b.n	8005572 <_dtoa_r+0x8b2>
 8005584:	f1b9 0f00 	cmp.w	r9, #0
 8005588:	dc38      	bgt.n	80055fc <_dtoa_r+0x93c>
 800558a:	9b06      	ldr	r3, [sp, #24]
 800558c:	2b02      	cmp	r3, #2
 800558e:	dd35      	ble.n	80055fc <_dtoa_r+0x93c>
 8005590:	f8cd 9008 	str.w	r9, [sp, #8]
 8005594:	9b02      	ldr	r3, [sp, #8]
 8005596:	b963      	cbnz	r3, 80055b2 <_dtoa_r+0x8f2>
 8005598:	4639      	mov	r1, r7
 800559a:	2205      	movs	r2, #5
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fa7d 	bl	8005a9c <__multadd>
 80055a2:	4601      	mov	r1, r0
 80055a4:	4607      	mov	r7, r0
 80055a6:	9804      	ldr	r0, [sp, #16]
 80055a8:	f000 fc42 	bl	8005e30 <__mcmp>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f73f adcc 	bgt.w	800514a <_dtoa_r+0x48a>
 80055b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055b4:	465d      	mov	r5, fp
 80055b6:	ea6f 0a03 	mvn.w	sl, r3
 80055ba:	f04f 0900 	mov.w	r9, #0
 80055be:	4639      	mov	r1, r7
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fa54 	bl	8005a6e <_Bfree>
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	f43f aeb7 	beq.w	800533a <_dtoa_r+0x67a>
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	d005      	beq.n	80055de <_dtoa_r+0x91e>
 80055d2:	45b1      	cmp	r9, r6
 80055d4:	d003      	beq.n	80055de <_dtoa_r+0x91e>
 80055d6:	4649      	mov	r1, r9
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fa48 	bl	8005a6e <_Bfree>
 80055de:	4631      	mov	r1, r6
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fa44 	bl	8005a6e <_Bfree>
 80055e6:	e6a8      	b.n	800533a <_dtoa_r+0x67a>
 80055e8:	2700      	movs	r7, #0
 80055ea:	463e      	mov	r6, r7
 80055ec:	e7e1      	b.n	80055b2 <_dtoa_r+0x8f2>
 80055ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80055f2:	463e      	mov	r6, r7
 80055f4:	e5a9      	b.n	800514a <_dtoa_r+0x48a>
 80055f6:	bf00      	nop
 80055f8:	40240000 	.word	0x40240000
 80055fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80fa 	beq.w	80057fc <_dtoa_r+0xb3c>
 8005608:	2d00      	cmp	r5, #0
 800560a:	dd05      	ble.n	8005618 <_dtoa_r+0x958>
 800560c:	4631      	mov	r1, r6
 800560e:	462a      	mov	r2, r5
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fbb9 	bl	8005d88 <__lshift>
 8005616:	4606      	mov	r6, r0
 8005618:	9b07      	ldr	r3, [sp, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d04c      	beq.n	80056b8 <_dtoa_r+0x9f8>
 800561e:	6871      	ldr	r1, [r6, #4]
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f9f0 	bl	8005a06 <_Balloc>
 8005626:	6932      	ldr	r2, [r6, #16]
 8005628:	3202      	adds	r2, #2
 800562a:	4605      	mov	r5, r0
 800562c:	0092      	lsls	r2, r2, #2
 800562e:	f106 010c 	add.w	r1, r6, #12
 8005632:	300c      	adds	r0, #12
 8005634:	f000 f9dc 	bl	80059f0 <memcpy>
 8005638:	2201      	movs	r2, #1
 800563a:	4629      	mov	r1, r5
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fba3 	bl	8005d88 <__lshift>
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	f8cd b014 	str.w	fp, [sp, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	46b1      	mov	r9, r6
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	4606      	mov	r6, r0
 8005652:	4639      	mov	r1, r7
 8005654:	9804      	ldr	r0, [sp, #16]
 8005656:	f7ff faa5 	bl	8004ba4 <quorem>
 800565a:	4649      	mov	r1, r9
 800565c:	4605      	mov	r5, r0
 800565e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005662:	9804      	ldr	r0, [sp, #16]
 8005664:	f000 fbe4 	bl	8005e30 <__mcmp>
 8005668:	4632      	mov	r2, r6
 800566a:	9000      	str	r0, [sp, #0]
 800566c:	4639      	mov	r1, r7
 800566e:	4620      	mov	r0, r4
 8005670:	f000 fbf8 	bl	8005e64 <__mdiff>
 8005674:	68c3      	ldr	r3, [r0, #12]
 8005676:	4602      	mov	r2, r0
 8005678:	bb03      	cbnz	r3, 80056bc <_dtoa_r+0x9fc>
 800567a:	4601      	mov	r1, r0
 800567c:	9008      	str	r0, [sp, #32]
 800567e:	9804      	ldr	r0, [sp, #16]
 8005680:	f000 fbd6 	bl	8005e30 <__mcmp>
 8005684:	9a08      	ldr	r2, [sp, #32]
 8005686:	4603      	mov	r3, r0
 8005688:	4611      	mov	r1, r2
 800568a:	4620      	mov	r0, r4
 800568c:	9308      	str	r3, [sp, #32]
 800568e:	f000 f9ee 	bl	8005a6e <_Bfree>
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	b9a3      	cbnz	r3, 80056c0 <_dtoa_r+0xa00>
 8005696:	9a06      	ldr	r2, [sp, #24]
 8005698:	b992      	cbnz	r2, 80056c0 <_dtoa_r+0xa00>
 800569a:	9a07      	ldr	r2, [sp, #28]
 800569c:	b982      	cbnz	r2, 80056c0 <_dtoa_r+0xa00>
 800569e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056a2:	d029      	beq.n	80056f8 <_dtoa_r+0xa38>
 80056a4:	9b00      	ldr	r3, [sp, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd01      	ble.n	80056ae <_dtoa_r+0x9ee>
 80056aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80056ae:	9b05      	ldr	r3, [sp, #20]
 80056b0:	1c5d      	adds	r5, r3, #1
 80056b2:	f883 8000 	strb.w	r8, [r3]
 80056b6:	e782      	b.n	80055be <_dtoa_r+0x8fe>
 80056b8:	4630      	mov	r0, r6
 80056ba:	e7c2      	b.n	8005642 <_dtoa_r+0x982>
 80056bc:	2301      	movs	r3, #1
 80056be:	e7e3      	b.n	8005688 <_dtoa_r+0x9c8>
 80056c0:	9a00      	ldr	r2, [sp, #0]
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	db04      	blt.n	80056d0 <_dtoa_r+0xa10>
 80056c6:	d125      	bne.n	8005714 <_dtoa_r+0xa54>
 80056c8:	9a06      	ldr	r2, [sp, #24]
 80056ca:	bb1a      	cbnz	r2, 8005714 <_dtoa_r+0xa54>
 80056cc:	9a07      	ldr	r2, [sp, #28]
 80056ce:	bb0a      	cbnz	r2, 8005714 <_dtoa_r+0xa54>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	ddec      	ble.n	80056ae <_dtoa_r+0x9ee>
 80056d4:	2201      	movs	r2, #1
 80056d6:	9904      	ldr	r1, [sp, #16]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fb55 	bl	8005d88 <__lshift>
 80056de:	4639      	mov	r1, r7
 80056e0:	9004      	str	r0, [sp, #16]
 80056e2:	f000 fba5 	bl	8005e30 <__mcmp>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	dc03      	bgt.n	80056f2 <_dtoa_r+0xa32>
 80056ea:	d1e0      	bne.n	80056ae <_dtoa_r+0x9ee>
 80056ec:	f018 0f01 	tst.w	r8, #1
 80056f0:	d0dd      	beq.n	80056ae <_dtoa_r+0x9ee>
 80056f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056f6:	d1d8      	bne.n	80056aa <_dtoa_r+0x9ea>
 80056f8:	9b05      	ldr	r3, [sp, #20]
 80056fa:	9a05      	ldr	r2, [sp, #20]
 80056fc:	1c5d      	adds	r5, r3, #1
 80056fe:	2339      	movs	r3, #57	; 0x39
 8005700:	7013      	strb	r3, [r2, #0]
 8005702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005706:	2b39      	cmp	r3, #57	; 0x39
 8005708:	f105 32ff 	add.w	r2, r5, #4294967295
 800570c:	d04f      	beq.n	80057ae <_dtoa_r+0xaee>
 800570e:	3301      	adds	r3, #1
 8005710:	7013      	strb	r3, [r2, #0]
 8005712:	e754      	b.n	80055be <_dtoa_r+0x8fe>
 8005714:	9a05      	ldr	r2, [sp, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f102 0501 	add.w	r5, r2, #1
 800571c:	dd06      	ble.n	800572c <_dtoa_r+0xa6c>
 800571e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005722:	d0e9      	beq.n	80056f8 <_dtoa_r+0xa38>
 8005724:	f108 0801 	add.w	r8, r8, #1
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	e7c2      	b.n	80056b2 <_dtoa_r+0x9f2>
 800572c:	9a02      	ldr	r2, [sp, #8]
 800572e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005732:	eba5 030b 	sub.w	r3, r5, fp
 8005736:	4293      	cmp	r3, r2
 8005738:	d021      	beq.n	800577e <_dtoa_r+0xabe>
 800573a:	2300      	movs	r3, #0
 800573c:	220a      	movs	r2, #10
 800573e:	9904      	ldr	r1, [sp, #16]
 8005740:	4620      	mov	r0, r4
 8005742:	f000 f9ab 	bl	8005a9c <__multadd>
 8005746:	45b1      	cmp	r9, r6
 8005748:	9004      	str	r0, [sp, #16]
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	f04f 020a 	mov.w	r2, #10
 8005752:	4649      	mov	r1, r9
 8005754:	4620      	mov	r0, r4
 8005756:	d105      	bne.n	8005764 <_dtoa_r+0xaa4>
 8005758:	f000 f9a0 	bl	8005a9c <__multadd>
 800575c:	4681      	mov	r9, r0
 800575e:	4606      	mov	r6, r0
 8005760:	9505      	str	r5, [sp, #20]
 8005762:	e776      	b.n	8005652 <_dtoa_r+0x992>
 8005764:	f000 f99a 	bl	8005a9c <__multadd>
 8005768:	4631      	mov	r1, r6
 800576a:	4681      	mov	r9, r0
 800576c:	2300      	movs	r3, #0
 800576e:	220a      	movs	r2, #10
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f993 	bl	8005a9c <__multadd>
 8005776:	4606      	mov	r6, r0
 8005778:	e7f2      	b.n	8005760 <_dtoa_r+0xaa0>
 800577a:	f04f 0900 	mov.w	r9, #0
 800577e:	2201      	movs	r2, #1
 8005780:	9904      	ldr	r1, [sp, #16]
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fb00 	bl	8005d88 <__lshift>
 8005788:	4639      	mov	r1, r7
 800578a:	9004      	str	r0, [sp, #16]
 800578c:	f000 fb50 	bl	8005e30 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	dcb6      	bgt.n	8005702 <_dtoa_r+0xa42>
 8005794:	d102      	bne.n	800579c <_dtoa_r+0xadc>
 8005796:	f018 0f01 	tst.w	r8, #1
 800579a:	d1b2      	bne.n	8005702 <_dtoa_r+0xa42>
 800579c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80057a6:	f47f af0a 	bne.w	80055be <_dtoa_r+0x8fe>
 80057aa:	4615      	mov	r5, r2
 80057ac:	e7f6      	b.n	800579c <_dtoa_r+0xadc>
 80057ae:	4593      	cmp	fp, r2
 80057b0:	d105      	bne.n	80057be <_dtoa_r+0xafe>
 80057b2:	2331      	movs	r3, #49	; 0x31
 80057b4:	f10a 0a01 	add.w	sl, sl, #1
 80057b8:	f88b 3000 	strb.w	r3, [fp]
 80057bc:	e6ff      	b.n	80055be <_dtoa_r+0x8fe>
 80057be:	4615      	mov	r5, r2
 80057c0:	e79f      	b.n	8005702 <_dtoa_r+0xa42>
 80057c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005828 <_dtoa_r+0xb68>
 80057c6:	e007      	b.n	80057d8 <_dtoa_r+0xb18>
 80057c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800582c <_dtoa_r+0xb6c>
 80057ce:	b11b      	cbz	r3, 80057d8 <_dtoa_r+0xb18>
 80057d0:	f10b 0308 	add.w	r3, fp, #8
 80057d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4658      	mov	r0, fp
 80057da:	b017      	add	sp, #92	; 0x5c
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e0:	9b06      	ldr	r3, [sp, #24]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	f77f ae35 	ble.w	8005452 <_dtoa_r+0x792>
 80057e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ea:	9307      	str	r3, [sp, #28]
 80057ec:	e649      	b.n	8005482 <_dtoa_r+0x7c2>
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dc03      	bgt.n	80057fc <_dtoa_r+0xb3c>
 80057f4:	9b06      	ldr	r3, [sp, #24]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	f73f aecc 	bgt.w	8005594 <_dtoa_r+0x8d4>
 80057fc:	465d      	mov	r5, fp
 80057fe:	4639      	mov	r1, r7
 8005800:	9804      	ldr	r0, [sp, #16]
 8005802:	f7ff f9cf 	bl	8004ba4 <quorem>
 8005806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800580a:	f805 8b01 	strb.w	r8, [r5], #1
 800580e:	9a02      	ldr	r2, [sp, #8]
 8005810:	eba5 030b 	sub.w	r3, r5, fp
 8005814:	429a      	cmp	r2, r3
 8005816:	ddb0      	ble.n	800577a <_dtoa_r+0xaba>
 8005818:	2300      	movs	r3, #0
 800581a:	220a      	movs	r2, #10
 800581c:	9904      	ldr	r1, [sp, #16]
 800581e:	4620      	mov	r0, r4
 8005820:	f000 f93c 	bl	8005a9c <__multadd>
 8005824:	9004      	str	r0, [sp, #16]
 8005826:	e7ea      	b.n	80057fe <_dtoa_r+0xb3e>
 8005828:	08006ca4 	.word	0x08006ca4
 800582c:	08006cc8 	.word	0x08006cc8

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	6083      	str	r3, [r0, #8]
 800583c:	8181      	strh	r1, [r0, #12]
 800583e:	6643      	str	r3, [r0, #100]	; 0x64
 8005840:	81c2      	strh	r2, [r0, #14]
 8005842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	; 0x5c
 800584e:	f7fe fd0d 	bl	800426c <memset>
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std+0x38>)
 8005854:	6263      	str	r3, [r4, #36]	; 0x24
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x3c>)
 8005858:	62a3      	str	r3, [r4, #40]	; 0x28
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x40>)
 800585c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <std+0x44>)
 8005860:	6224      	str	r4, [r4, #32]
 8005862:	6323      	str	r3, [r4, #48]	; 0x30
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	0800666d 	.word	0x0800666d
 800586c:	0800668f 	.word	0x0800668f
 8005870:	080066c7 	.word	0x080066c7
 8005874:	080066eb 	.word	0x080066eb

08005878 <_cleanup_r>:
 8005878:	4901      	ldr	r1, [pc, #4]	; (8005880 <_cleanup_r+0x8>)
 800587a:	f000 b885 	b.w	8005988 <_fwalk_reent>
 800587e:	bf00      	nop
 8005880:	080069c5 	.word	0x080069c5

08005884 <__sfmoreglue>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	1e4a      	subs	r2, r1, #1
 8005888:	2568      	movs	r5, #104	; 0x68
 800588a:	4355      	muls	r5, r2
 800588c:	460e      	mov	r6, r1
 800588e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005892:	f000 fbef 	bl	8006074 <_malloc_r>
 8005896:	4604      	mov	r4, r0
 8005898:	b140      	cbz	r0, 80058ac <__sfmoreglue+0x28>
 800589a:	2100      	movs	r1, #0
 800589c:	e9c0 1600 	strd	r1, r6, [r0]
 80058a0:	300c      	adds	r0, #12
 80058a2:	60a0      	str	r0, [r4, #8]
 80058a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058a8:	f7fe fce0 	bl	800426c <memset>
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}

080058b0 <__sinit>:
 80058b0:	6983      	ldr	r3, [r0, #24]
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	bb33      	cbnz	r3, 8005906 <__sinit+0x56>
 80058b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058bc:	6503      	str	r3, [r0, #80]	; 0x50
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <__sinit+0x58>)
 80058c0:	4a12      	ldr	r2, [pc, #72]	; (800590c <__sinit+0x5c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6282      	str	r2, [r0, #40]	; 0x28
 80058c6:	4298      	cmp	r0, r3
 80058c8:	bf04      	itt	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	6183      	streq	r3, [r0, #24]
 80058ce:	f000 f81f 	bl	8005910 <__sfp>
 80058d2:	6060      	str	r0, [r4, #4]
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f81b 	bl	8005910 <__sfp>
 80058da:	60a0      	str	r0, [r4, #8]
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f817 	bl	8005910 <__sfp>
 80058e2:	2200      	movs	r2, #0
 80058e4:	60e0      	str	r0, [r4, #12]
 80058e6:	2104      	movs	r1, #4
 80058e8:	6860      	ldr	r0, [r4, #4]
 80058ea:	f7ff ffa1 	bl	8005830 <std>
 80058ee:	2201      	movs	r2, #1
 80058f0:	2109      	movs	r1, #9
 80058f2:	68a0      	ldr	r0, [r4, #8]
 80058f4:	f7ff ff9c 	bl	8005830 <std>
 80058f8:	2202      	movs	r2, #2
 80058fa:	2112      	movs	r1, #18
 80058fc:	68e0      	ldr	r0, [r4, #12]
 80058fe:	f7ff ff97 	bl	8005830 <std>
 8005902:	2301      	movs	r3, #1
 8005904:	61a3      	str	r3, [r4, #24]
 8005906:	bd10      	pop	{r4, pc}
 8005908:	08006c90 	.word	0x08006c90
 800590c:	08005879 	.word	0x08005879

08005910 <__sfp>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <__sfp+0x70>)
 8005914:	681e      	ldr	r6, [r3, #0]
 8005916:	69b3      	ldr	r3, [r6, #24]
 8005918:	4607      	mov	r7, r0
 800591a:	b913      	cbnz	r3, 8005922 <__sfp+0x12>
 800591c:	4630      	mov	r0, r6
 800591e:	f7ff ffc7 	bl	80058b0 <__sinit>
 8005922:	3648      	adds	r6, #72	; 0x48
 8005924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005928:	3b01      	subs	r3, #1
 800592a:	d503      	bpl.n	8005934 <__sfp+0x24>
 800592c:	6833      	ldr	r3, [r6, #0]
 800592e:	b133      	cbz	r3, 800593e <__sfp+0x2e>
 8005930:	6836      	ldr	r6, [r6, #0]
 8005932:	e7f7      	b.n	8005924 <__sfp+0x14>
 8005934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005938:	b16d      	cbz	r5, 8005956 <__sfp+0x46>
 800593a:	3468      	adds	r4, #104	; 0x68
 800593c:	e7f4      	b.n	8005928 <__sfp+0x18>
 800593e:	2104      	movs	r1, #4
 8005940:	4638      	mov	r0, r7
 8005942:	f7ff ff9f 	bl	8005884 <__sfmoreglue>
 8005946:	6030      	str	r0, [r6, #0]
 8005948:	2800      	cmp	r0, #0
 800594a:	d1f1      	bne.n	8005930 <__sfp+0x20>
 800594c:	230c      	movs	r3, #12
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	4604      	mov	r4, r0
 8005952:	4620      	mov	r0, r4
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <__sfp+0x74>)
 8005958:	6665      	str	r5, [r4, #100]	; 0x64
 800595a:	e9c4 5500 	strd	r5, r5, [r4]
 800595e:	60a5      	str	r5, [r4, #8]
 8005960:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005964:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005968:	2208      	movs	r2, #8
 800596a:	4629      	mov	r1, r5
 800596c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005970:	f7fe fc7c 	bl	800426c <memset>
 8005974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800597c:	e7e9      	b.n	8005952 <__sfp+0x42>
 800597e:	bf00      	nop
 8005980:	08006c90 	.word	0x08006c90
 8005984:	ffff0001 	.word	0xffff0001

08005988 <_fwalk_reent>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	4680      	mov	r8, r0
 800598e:	4689      	mov	r9, r1
 8005990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005994:	2600      	movs	r6, #0
 8005996:	b914      	cbnz	r4, 800599e <_fwalk_reent+0x16>
 8005998:	4630      	mov	r0, r6
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059a2:	3f01      	subs	r7, #1
 80059a4:	d501      	bpl.n	80059aa <_fwalk_reent+0x22>
 80059a6:	6824      	ldr	r4, [r4, #0]
 80059a8:	e7f5      	b.n	8005996 <_fwalk_reent+0xe>
 80059aa:	89ab      	ldrh	r3, [r5, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d907      	bls.n	80059c0 <_fwalk_reent+0x38>
 80059b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059b4:	3301      	adds	r3, #1
 80059b6:	d003      	beq.n	80059c0 <_fwalk_reent+0x38>
 80059b8:	4629      	mov	r1, r5
 80059ba:	4640      	mov	r0, r8
 80059bc:	47c8      	blx	r9
 80059be:	4306      	orrs	r6, r0
 80059c0:	3568      	adds	r5, #104	; 0x68
 80059c2:	e7ee      	b.n	80059a2 <_fwalk_reent+0x1a>

080059c4 <_localeconv_r>:
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <_localeconv_r+0x14>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a18      	ldr	r0, [r3, #32]
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <_localeconv_r+0x18>)
 80059cc:	2800      	cmp	r0, #0
 80059ce:	bf08      	it	eq
 80059d0:	4618      	moveq	r0, r3
 80059d2:	30f0      	adds	r0, #240	; 0xf0
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000000c 	.word	0x2000000c
 80059dc:	20000070 	.word	0x20000070

080059e0 <malloc>:
 80059e0:	4b02      	ldr	r3, [pc, #8]	; (80059ec <malloc+0xc>)
 80059e2:	4601      	mov	r1, r0
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	f000 bb45 	b.w	8006074 <_malloc_r>
 80059ea:	bf00      	nop
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <memcpy>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	1e43      	subs	r3, r0, #1
 80059f4:	440a      	add	r2, r1
 80059f6:	4291      	cmp	r1, r2
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	bd10      	pop	{r4, pc}
 80059fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a04:	e7f7      	b.n	80059f6 <memcpy+0x6>

08005a06 <_Balloc>:
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	b93d      	cbnz	r5, 8005a20 <_Balloc+0x1a>
 8005a10:	2010      	movs	r0, #16
 8005a12:	f7ff ffe5 	bl	80059e0 <malloc>
 8005a16:	6260      	str	r0, [r4, #36]	; 0x24
 8005a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a1c:	6005      	str	r5, [r0, #0]
 8005a1e:	60c5      	str	r5, [r0, #12]
 8005a20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a22:	68eb      	ldr	r3, [r5, #12]
 8005a24:	b183      	cbz	r3, 8005a48 <_Balloc+0x42>
 8005a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a2e:	b9b8      	cbnz	r0, 8005a60 <_Balloc+0x5a>
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f506 	lsl.w	r5, r1, r6
 8005a36:	1d6a      	adds	r2, r5, #5
 8005a38:	0092      	lsls	r2, r2, #2
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 fabe 	bl	8005fbc <_calloc_r>
 8005a40:	b160      	cbz	r0, 8005a5c <_Balloc+0x56>
 8005a42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a46:	e00e      	b.n	8005a66 <_Balloc+0x60>
 8005a48:	2221      	movs	r2, #33	; 0x21
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fab5 	bl	8005fbc <_calloc_r>
 8005a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a54:	60e8      	str	r0, [r5, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e4      	bne.n	8005a26 <_Balloc+0x20>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	6802      	ldr	r2, [r0, #0]
 8005a62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a66:	2300      	movs	r3, #0
 8005a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a6c:	e7f7      	b.n	8005a5e <_Balloc+0x58>

08005a6e <_Bfree>:
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a72:	4606      	mov	r6, r0
 8005a74:	460d      	mov	r5, r1
 8005a76:	b93c      	cbnz	r4, 8005a88 <_Bfree+0x1a>
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f7ff ffb1 	bl	80059e0 <malloc>
 8005a7e:	6270      	str	r0, [r6, #36]	; 0x24
 8005a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a84:	6004      	str	r4, [r0, #0]
 8005a86:	60c4      	str	r4, [r0, #12]
 8005a88:	b13d      	cbz	r5, 8005a9a <_Bfree+0x2c>
 8005a8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a8c:	686a      	ldr	r2, [r5, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a94:	6029      	str	r1, [r5, #0]
 8005a96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}

08005a9c <__multadd>:
 8005a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa0:	690d      	ldr	r5, [r1, #16]
 8005aa2:	461f      	mov	r7, r3
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	f101 0c14 	add.w	ip, r1, #20
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8dc 0000 	ldr.w	r0, [ip]
 8005ab2:	b281      	uxth	r1, r0
 8005ab4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ab8:	0c0f      	lsrs	r7, r1, #16
 8005aba:	0c00      	lsrs	r0, r0, #16
 8005abc:	fb02 7000 	mla	r0, r2, r0, r7
 8005ac0:	b289      	uxth	r1, r1
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ac8:	429d      	cmp	r5, r3
 8005aca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ace:	f84c 1b04 	str.w	r1, [ip], #4
 8005ad2:	dcec      	bgt.n	8005aae <__multadd+0x12>
 8005ad4:	b1d7      	cbz	r7, 8005b0c <__multadd+0x70>
 8005ad6:	68a3      	ldr	r3, [r4, #8]
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc12      	bgt.n	8005b02 <__multadd+0x66>
 8005adc:	6861      	ldr	r1, [r4, #4]
 8005ade:	4630      	mov	r0, r6
 8005ae0:	3101      	adds	r1, #1
 8005ae2:	f7ff ff90 	bl	8005a06 <_Balloc>
 8005ae6:	6922      	ldr	r2, [r4, #16]
 8005ae8:	3202      	adds	r2, #2
 8005aea:	f104 010c 	add.w	r1, r4, #12
 8005aee:	4680      	mov	r8, r0
 8005af0:	0092      	lsls	r2, r2, #2
 8005af2:	300c      	adds	r0, #12
 8005af4:	f7ff ff7c 	bl	80059f0 <memcpy>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7ff ffb7 	bl	8005a6e <_Bfree>
 8005b00:	4644      	mov	r4, r8
 8005b02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b06:	3501      	adds	r5, #1
 8005b08:	615f      	str	r7, [r3, #20]
 8005b0a:	6125      	str	r5, [r4, #16]
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b12 <__hi0bits>:
 8005b12:	0c02      	lsrs	r2, r0, #16
 8005b14:	0412      	lsls	r2, r2, #16
 8005b16:	4603      	mov	r3, r0
 8005b18:	b9b2      	cbnz	r2, 8005b48 <__hi0bits+0x36>
 8005b1a:	0403      	lsls	r3, r0, #16
 8005b1c:	2010      	movs	r0, #16
 8005b1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b22:	bf04      	itt	eq
 8005b24:	021b      	lsleq	r3, r3, #8
 8005b26:	3008      	addeq	r0, #8
 8005b28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b2c:	bf04      	itt	eq
 8005b2e:	011b      	lsleq	r3, r3, #4
 8005b30:	3004      	addeq	r0, #4
 8005b32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b36:	bf04      	itt	eq
 8005b38:	009b      	lsleq	r3, r3, #2
 8005b3a:	3002      	addeq	r0, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	db06      	blt.n	8005b4e <__hi0bits+0x3c>
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	d503      	bpl.n	8005b4c <__hi0bits+0x3a>
 8005b44:	3001      	adds	r0, #1
 8005b46:	4770      	bx	lr
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7e8      	b.n	8005b1e <__hi0bits+0xc>
 8005b4c:	2020      	movs	r0, #32
 8005b4e:	4770      	bx	lr

08005b50 <__lo0bits>:
 8005b50:	6803      	ldr	r3, [r0, #0]
 8005b52:	f013 0207 	ands.w	r2, r3, #7
 8005b56:	4601      	mov	r1, r0
 8005b58:	d00b      	beq.n	8005b72 <__lo0bits+0x22>
 8005b5a:	07da      	lsls	r2, r3, #31
 8005b5c:	d423      	bmi.n	8005ba6 <__lo0bits+0x56>
 8005b5e:	0798      	lsls	r0, r3, #30
 8005b60:	bf49      	itett	mi
 8005b62:	085b      	lsrmi	r3, r3, #1
 8005b64:	089b      	lsrpl	r3, r3, #2
 8005b66:	2001      	movmi	r0, #1
 8005b68:	600b      	strmi	r3, [r1, #0]
 8005b6a:	bf5c      	itt	pl
 8005b6c:	600b      	strpl	r3, [r1, #0]
 8005b6e:	2002      	movpl	r0, #2
 8005b70:	4770      	bx	lr
 8005b72:	b298      	uxth	r0, r3
 8005b74:	b9a8      	cbnz	r0, 8005ba2 <__lo0bits+0x52>
 8005b76:	0c1b      	lsrs	r3, r3, #16
 8005b78:	2010      	movs	r0, #16
 8005b7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b7e:	bf04      	itt	eq
 8005b80:	0a1b      	lsreq	r3, r3, #8
 8005b82:	3008      	addeq	r0, #8
 8005b84:	071a      	lsls	r2, r3, #28
 8005b86:	bf04      	itt	eq
 8005b88:	091b      	lsreq	r3, r3, #4
 8005b8a:	3004      	addeq	r0, #4
 8005b8c:	079a      	lsls	r2, r3, #30
 8005b8e:	bf04      	itt	eq
 8005b90:	089b      	lsreq	r3, r3, #2
 8005b92:	3002      	addeq	r0, #2
 8005b94:	07da      	lsls	r2, r3, #31
 8005b96:	d402      	bmi.n	8005b9e <__lo0bits+0x4e>
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	d006      	beq.n	8005baa <__lo0bits+0x5a>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	e7e9      	b.n	8005b7a <__lo0bits+0x2a>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	4770      	bx	lr
 8005baa:	2020      	movs	r0, #32
 8005bac:	4770      	bx	lr

08005bae <__i2b>:
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	f7ff ff27 	bl	8005a06 <_Balloc>
 8005bb8:	2201      	movs	r2, #1
 8005bba:	6144      	str	r4, [r0, #20]
 8005bbc:	6102      	str	r2, [r0, #16]
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <__multiply>:
 8005bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	690a      	ldr	r2, [r1, #16]
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	bfb8      	it	lt
 8005bce:	460b      	movlt	r3, r1
 8005bd0:	4688      	mov	r8, r1
 8005bd2:	bfbc      	itt	lt
 8005bd4:	46a0      	movlt	r8, r4
 8005bd6:	461c      	movlt	r4, r3
 8005bd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005bdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005be0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005be4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005be8:	eb07 0609 	add.w	r6, r7, r9
 8005bec:	42b3      	cmp	r3, r6
 8005bee:	bfb8      	it	lt
 8005bf0:	3101      	addlt	r1, #1
 8005bf2:	f7ff ff08 	bl	8005a06 <_Balloc>
 8005bf6:	f100 0514 	add.w	r5, r0, #20
 8005bfa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005bfe:	462b      	mov	r3, r5
 8005c00:	2200      	movs	r2, #0
 8005c02:	4573      	cmp	r3, lr
 8005c04:	d316      	bcc.n	8005c34 <__multiply+0x74>
 8005c06:	f104 0214 	add.w	r2, r4, #20
 8005c0a:	f108 0114 	add.w	r1, r8, #20
 8005c0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	9b00      	ldr	r3, [sp, #0]
 8005c1a:	9201      	str	r2, [sp, #4]
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d80c      	bhi.n	8005c3a <__multiply+0x7a>
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	dd03      	ble.n	8005c2c <__multiply+0x6c>
 8005c24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05d      	beq.n	8005ce8 <__multiply+0x128>
 8005c2c:	6106      	str	r6, [r0, #16]
 8005c2e:	b003      	add	sp, #12
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	f843 2b04 	str.w	r2, [r3], #4
 8005c38:	e7e3      	b.n	8005c02 <__multiply+0x42>
 8005c3a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c3e:	f1bb 0f00 	cmp.w	fp, #0
 8005c42:	d023      	beq.n	8005c8c <__multiply+0xcc>
 8005c44:	4689      	mov	r9, r1
 8005c46:	46ac      	mov	ip, r5
 8005c48:	f04f 0800 	mov.w	r8, #0
 8005c4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c50:	f8dc a000 	ldr.w	sl, [ip]
 8005c54:	b2a3      	uxth	r3, r4
 8005c56:	fa1f fa8a 	uxth.w	sl, sl
 8005c5a:	fb0b a303 	mla	r3, fp, r3, sl
 8005c5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c62:	f8dc 4000 	ldr.w	r4, [ip]
 8005c66:	4443      	add	r3, r8
 8005c68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c6c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005c70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c74:	46e2      	mov	sl, ip
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c7c:	454f      	cmp	r7, r9
 8005c7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c82:	f84a 3b04 	str.w	r3, [sl], #4
 8005c86:	d82b      	bhi.n	8005ce0 <__multiply+0x120>
 8005c88:	f8cc 8004 	str.w	r8, [ip, #4]
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005c92:	3204      	adds	r2, #4
 8005c94:	f1ba 0f00 	cmp.w	sl, #0
 8005c98:	d020      	beq.n	8005cdc <__multiply+0x11c>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	46a8      	mov	r8, r5
 8005ca0:	f04f 0b00 	mov.w	fp, #0
 8005ca4:	f8b9 c000 	ldrh.w	ip, [r9]
 8005ca8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005cac:	fb0a 440c 	mla	r4, sl, ip, r4
 8005cb0:	445c      	add	r4, fp
 8005cb2:	46c4      	mov	ip, r8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cba:	f84c 3b04 	str.w	r3, [ip], #4
 8005cbe:	f859 3b04 	ldr.w	r3, [r9], #4
 8005cc2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	fb0a b303 	mla	r3, sl, r3, fp
 8005ccc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005cd0:	454f      	cmp	r7, r9
 8005cd2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005cd6:	d805      	bhi.n	8005ce4 <__multiply+0x124>
 8005cd8:	f8c8 3004 	str.w	r3, [r8, #4]
 8005cdc:	3504      	adds	r5, #4
 8005cde:	e79b      	b.n	8005c18 <__multiply+0x58>
 8005ce0:	46d4      	mov	ip, sl
 8005ce2:	e7b3      	b.n	8005c4c <__multiply+0x8c>
 8005ce4:	46e0      	mov	r8, ip
 8005ce6:	e7dd      	b.n	8005ca4 <__multiply+0xe4>
 8005ce8:	3e01      	subs	r6, #1
 8005cea:	e799      	b.n	8005c20 <__multiply+0x60>

08005cec <__pow5mult>:
 8005cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	f012 0203 	ands.w	r2, r2, #3
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	d007      	beq.n	8005d0c <__pow5mult+0x20>
 8005cfc:	3a01      	subs	r2, #1
 8005cfe:	4c21      	ldr	r4, [pc, #132]	; (8005d84 <__pow5mult+0x98>)
 8005d00:	2300      	movs	r3, #0
 8005d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d06:	f7ff fec9 	bl	8005a9c <__multadd>
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	10ad      	asrs	r5, r5, #2
 8005d0e:	d035      	beq.n	8005d7c <__pow5mult+0x90>
 8005d10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d12:	b93c      	cbnz	r4, 8005d24 <__pow5mult+0x38>
 8005d14:	2010      	movs	r0, #16
 8005d16:	f7ff fe63 	bl	80059e0 <malloc>
 8005d1a:	6270      	str	r0, [r6, #36]	; 0x24
 8005d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d20:	6004      	str	r4, [r0, #0]
 8005d22:	60c4      	str	r4, [r0, #12]
 8005d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d2c:	b94c      	cbnz	r4, 8005d42 <__pow5mult+0x56>
 8005d2e:	f240 2171 	movw	r1, #625	; 0x271
 8005d32:	4630      	mov	r0, r6
 8005d34:	f7ff ff3b 	bl	8005bae <__i2b>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d3e:	4604      	mov	r4, r0
 8005d40:	6003      	str	r3, [r0, #0]
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	07eb      	lsls	r3, r5, #31
 8005d48:	d50a      	bpl.n	8005d60 <__pow5mult+0x74>
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ff36 	bl	8005bc0 <__multiply>
 8005d54:	4639      	mov	r1, r7
 8005d56:	4681      	mov	r9, r0
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff fe88 	bl	8005a6e <_Bfree>
 8005d5e:	464f      	mov	r7, r9
 8005d60:	106d      	asrs	r5, r5, #1
 8005d62:	d00b      	beq.n	8005d7c <__pow5mult+0x90>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	b938      	cbnz	r0, 8005d78 <__pow5mult+0x8c>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff ff27 	bl	8005bc0 <__multiply>
 8005d72:	6020      	str	r0, [r4, #0]
 8005d74:	f8c0 8000 	str.w	r8, [r0]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e7e4      	b.n	8005d46 <__pow5mult+0x5a>
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d82:	bf00      	nop
 8005d84:	08006e28 	.word	0x08006e28

08005d88 <__lshift>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6849      	ldr	r1, [r1, #4]
 8005d96:	eb0a 0903 	add.w	r9, sl, r3
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	4616      	mov	r6, r2
 8005da0:	f109 0501 	add.w	r5, r9, #1
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	db32      	blt.n	8005e0e <__lshift+0x86>
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7ff fe2c 	bl	8005a06 <_Balloc>
 8005dae:	2300      	movs	r3, #0
 8005db0:	4680      	mov	r8, r0
 8005db2:	f100 0114 	add.w	r1, r0, #20
 8005db6:	461a      	mov	r2, r3
 8005db8:	4553      	cmp	r3, sl
 8005dba:	db2b      	blt.n	8005e14 <__lshift+0x8c>
 8005dbc:	6920      	ldr	r0, [r4, #16]
 8005dbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dc2:	f104 0314 	add.w	r3, r4, #20
 8005dc6:	f016 021f 	ands.w	r2, r6, #31
 8005dca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005dd2:	d025      	beq.n	8005e20 <__lshift+0x98>
 8005dd4:	f1c2 0e20 	rsb	lr, r2, #32
 8005dd8:	2000      	movs	r0, #0
 8005dda:	681e      	ldr	r6, [r3, #0]
 8005ddc:	468a      	mov	sl, r1
 8005dde:	4096      	lsls	r6, r2
 8005de0:	4330      	orrs	r0, r6
 8005de2:	f84a 0b04 	str.w	r0, [sl], #4
 8005de6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005dea:	459c      	cmp	ip, r3
 8005dec:	fa20 f00e 	lsr.w	r0, r0, lr
 8005df0:	d814      	bhi.n	8005e1c <__lshift+0x94>
 8005df2:	6048      	str	r0, [r1, #4]
 8005df4:	b108      	cbz	r0, 8005dfa <__lshift+0x72>
 8005df6:	f109 0502 	add.w	r5, r9, #2
 8005dfa:	3d01      	subs	r5, #1
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e02:	4621      	mov	r1, r4
 8005e04:	f7ff fe33 	bl	8005a6e <_Bfree>
 8005e08:	4640      	mov	r0, r8
 8005e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0e:	3101      	adds	r1, #1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	e7c7      	b.n	8005da4 <__lshift+0x1c>
 8005e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	e7cd      	b.n	8005db8 <__lshift+0x30>
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	e7dc      	b.n	8005dda <__lshift+0x52>
 8005e20:	3904      	subs	r1, #4
 8005e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e26:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e2a:	459c      	cmp	ip, r3
 8005e2c:	d8f9      	bhi.n	8005e22 <__lshift+0x9a>
 8005e2e:	e7e4      	b.n	8005dfa <__lshift+0x72>

08005e30 <__mcmp>:
 8005e30:	6903      	ldr	r3, [r0, #16]
 8005e32:	690a      	ldr	r2, [r1, #16]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	b530      	push	{r4, r5, lr}
 8005e38:	d10c      	bne.n	8005e54 <__mcmp+0x24>
 8005e3a:	0092      	lsls	r2, r2, #2
 8005e3c:	3014      	adds	r0, #20
 8005e3e:	3114      	adds	r1, #20
 8005e40:	1884      	adds	r4, r0, r2
 8005e42:	4411      	add	r1, r2
 8005e44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e4c:	4295      	cmp	r5, r2
 8005e4e:	d003      	beq.n	8005e58 <__mcmp+0x28>
 8005e50:	d305      	bcc.n	8005e5e <__mcmp+0x2e>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d3f3      	bcc.n	8005e44 <__mcmp+0x14>
 8005e5c:	e7fa      	b.n	8005e54 <__mcmp+0x24>
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	e7f7      	b.n	8005e54 <__mcmp+0x24>

08005e64 <__mdiff>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	460d      	mov	r5, r1
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4614      	mov	r4, r2
 8005e72:	f7ff ffdd 	bl	8005e30 <__mcmp>
 8005e76:	1e06      	subs	r6, r0, #0
 8005e78:	d108      	bne.n	8005e8c <__mdiff+0x28>
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff fdc2 	bl	8005a06 <_Balloc>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	bfa4      	itt	ge
 8005e8e:	4623      	movge	r3, r4
 8005e90:	462c      	movge	r4, r5
 8005e92:	4638      	mov	r0, r7
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	bfa6      	itte	ge
 8005e98:	461d      	movge	r5, r3
 8005e9a:	2600      	movge	r6, #0
 8005e9c:	2601      	movlt	r6, #1
 8005e9e:	f7ff fdb2 	bl	8005a06 <_Balloc>
 8005ea2:	692b      	ldr	r3, [r5, #16]
 8005ea4:	60c6      	str	r6, [r0, #12]
 8005ea6:	6926      	ldr	r6, [r4, #16]
 8005ea8:	f105 0914 	add.w	r9, r5, #20
 8005eac:	f104 0214 	add.w	r2, r4, #20
 8005eb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005eb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005eb8:	f100 0514 	add.w	r5, r0, #20
 8005ebc:	f04f 0e00 	mov.w	lr, #0
 8005ec0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ec4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ec8:	fa1e f18a 	uxtah	r1, lr, sl
 8005ecc:	b2a3      	uxth	r3, r4
 8005ece:	1ac9      	subs	r1, r1, r3
 8005ed0:	0c23      	lsrs	r3, r4, #16
 8005ed2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005ed6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005eda:	b289      	uxth	r1, r1
 8005edc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ee0:	45c8      	cmp	r8, r9
 8005ee2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ee6:	4694      	mov	ip, r2
 8005ee8:	f845 3b04 	str.w	r3, [r5], #4
 8005eec:	d8e8      	bhi.n	8005ec0 <__mdiff+0x5c>
 8005eee:	45bc      	cmp	ip, r7
 8005ef0:	d304      	bcc.n	8005efc <__mdiff+0x98>
 8005ef2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ef6:	b183      	cbz	r3, 8005f1a <__mdiff+0xb6>
 8005ef8:	6106      	str	r6, [r0, #16]
 8005efa:	e7c5      	b.n	8005e88 <__mdiff+0x24>
 8005efc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f00:	fa1e f381 	uxtah	r3, lr, r1
 8005f04:	141a      	asrs	r2, r3, #16
 8005f06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f10:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005f14:	f845 3b04 	str.w	r3, [r5], #4
 8005f18:	e7e9      	b.n	8005eee <__mdiff+0x8a>
 8005f1a:	3e01      	subs	r6, #1
 8005f1c:	e7e9      	b.n	8005ef2 <__mdiff+0x8e>

08005f1e <__d2b>:
 8005f1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f22:	460e      	mov	r6, r1
 8005f24:	2101      	movs	r1, #1
 8005f26:	ec59 8b10 	vmov	r8, r9, d0
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	f7ff fd6b 	bl	8005a06 <_Balloc>
 8005f30:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f34:	4607      	mov	r7, r0
 8005f36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f3a:	bb34      	cbnz	r4, 8005f8a <__d2b+0x6c>
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	f1b8 0300 	subs.w	r3, r8, #0
 8005f42:	d027      	beq.n	8005f94 <__d2b+0x76>
 8005f44:	a802      	add	r0, sp, #8
 8005f46:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005f4a:	f7ff fe01 	bl	8005b50 <__lo0bits>
 8005f4e:	9900      	ldr	r1, [sp, #0]
 8005f50:	b1f0      	cbz	r0, 8005f90 <__d2b+0x72>
 8005f52:	9a01      	ldr	r2, [sp, #4]
 8005f54:	f1c0 0320 	rsb	r3, r0, #32
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	40c2      	lsrs	r2, r0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	9201      	str	r2, [sp, #4]
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf14      	ite	ne
 8005f6c:	2102      	movne	r1, #2
 8005f6e:	2101      	moveq	r1, #1
 8005f70:	6139      	str	r1, [r7, #16]
 8005f72:	b1c4      	cbz	r4, 8005fa6 <__d2b+0x88>
 8005f74:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f78:	4404      	add	r4, r0
 8005f7a:	6034      	str	r4, [r6, #0]
 8005f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f80:	6028      	str	r0, [r5, #0]
 8005f82:	4638      	mov	r0, r7
 8005f84:	b003      	add	sp, #12
 8005f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8e:	e7d5      	b.n	8005f3c <__d2b+0x1e>
 8005f90:	6179      	str	r1, [r7, #20]
 8005f92:	e7e7      	b.n	8005f64 <__d2b+0x46>
 8005f94:	a801      	add	r0, sp, #4
 8005f96:	f7ff fddb 	bl	8005b50 <__lo0bits>
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	6139      	str	r1, [r7, #16]
 8005fa2:	3020      	adds	r0, #32
 8005fa4:	e7e5      	b.n	8005f72 <__d2b+0x54>
 8005fa6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005faa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fae:	6030      	str	r0, [r6, #0]
 8005fb0:	6918      	ldr	r0, [r3, #16]
 8005fb2:	f7ff fdae 	bl	8005b12 <__hi0bits>
 8005fb6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005fba:	e7e1      	b.n	8005f80 <__d2b+0x62>

08005fbc <_calloc_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	fb02 f401 	mul.w	r4, r2, r1
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f000 f856 	bl	8006074 <_malloc_r>
 8005fc8:	4605      	mov	r5, r0
 8005fca:	b118      	cbz	r0, 8005fd4 <_calloc_r+0x18>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	2100      	movs	r1, #0
 8005fd0:	f7fe f94c 	bl	800426c <memset>
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}

08005fd8 <_free_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4605      	mov	r5, r0
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d045      	beq.n	800606c <_free_r+0x94>
 8005fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe4:	1f0c      	subs	r4, r1, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfb8      	it	lt
 8005fea:	18e4      	addlt	r4, r4, r3
 8005fec:	f000 fdb5 	bl	8006b5a <__malloc_lock>
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <_free_r+0x98>)
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	b933      	cbnz	r3, 8006006 <_free_r+0x2e>
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	6014      	str	r4, [r2, #0]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006002:	f000 bdab 	b.w	8006b5c <__malloc_unlock>
 8006006:	42a3      	cmp	r3, r4
 8006008:	d90c      	bls.n	8006024 <_free_r+0x4c>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	1862      	adds	r2, r4, r1
 800600e:	4293      	cmp	r3, r2
 8006010:	bf04      	itt	eq
 8006012:	681a      	ldreq	r2, [r3, #0]
 8006014:	685b      	ldreq	r3, [r3, #4]
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	bf04      	itt	eq
 800601a:	1852      	addeq	r2, r2, r1
 800601c:	6022      	streq	r2, [r4, #0]
 800601e:	6004      	str	r4, [r0, #0]
 8006020:	e7ec      	b.n	8005ffc <_free_r+0x24>
 8006022:	4613      	mov	r3, r2
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	b10a      	cbz	r2, 800602c <_free_r+0x54>
 8006028:	42a2      	cmp	r2, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x4a>
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	1858      	adds	r0, r3, r1
 8006030:	42a0      	cmp	r0, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x74>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	4401      	add	r1, r0
 8006038:	1858      	adds	r0, r3, r1
 800603a:	4282      	cmp	r2, r0
 800603c:	6019      	str	r1, [r3, #0]
 800603e:	d1dd      	bne.n	8005ffc <_free_r+0x24>
 8006040:	6810      	ldr	r0, [r2, #0]
 8006042:	6852      	ldr	r2, [r2, #4]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	4401      	add	r1, r0
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	e7d7      	b.n	8005ffc <_free_r+0x24>
 800604c:	d902      	bls.n	8006054 <_free_r+0x7c>
 800604e:	230c      	movs	r3, #12
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	e7d3      	b.n	8005ffc <_free_r+0x24>
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	1821      	adds	r1, r4, r0
 8006058:	428a      	cmp	r2, r1
 800605a:	bf04      	itt	eq
 800605c:	6811      	ldreq	r1, [r2, #0]
 800605e:	6852      	ldreq	r2, [r2, #4]
 8006060:	6062      	str	r2, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1809      	addeq	r1, r1, r0
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	605c      	str	r4, [r3, #4]
 800606a:	e7c7      	b.n	8005ffc <_free_r+0x24>
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000200 	.word	0x20000200

08006074 <_malloc_r>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	1ccd      	adds	r5, r1, #3
 8006078:	f025 0503 	bic.w	r5, r5, #3
 800607c:	3508      	adds	r5, #8
 800607e:	2d0c      	cmp	r5, #12
 8006080:	bf38      	it	cc
 8006082:	250c      	movcc	r5, #12
 8006084:	2d00      	cmp	r5, #0
 8006086:	4606      	mov	r6, r0
 8006088:	db01      	blt.n	800608e <_malloc_r+0x1a>
 800608a:	42a9      	cmp	r1, r5
 800608c:	d903      	bls.n	8006096 <_malloc_r+0x22>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	2000      	movs	r0, #0
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	f000 fd60 	bl	8006b5a <__malloc_lock>
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <_malloc_r+0xac>)
 800609c:	6814      	ldr	r4, [r2, #0]
 800609e:	4621      	mov	r1, r4
 80060a0:	b991      	cbnz	r1, 80060c8 <_malloc_r+0x54>
 80060a2:	4c20      	ldr	r4, [pc, #128]	; (8006124 <_malloc_r+0xb0>)
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	b91b      	cbnz	r3, 80060b0 <_malloc_r+0x3c>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 facf 	bl	800664c <_sbrk_r>
 80060ae:	6020      	str	r0, [r4, #0]
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 faca 	bl	800664c <_sbrk_r>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d124      	bne.n	8006106 <_malloc_r+0x92>
 80060bc:	230c      	movs	r3, #12
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 fd4b 	bl	8006b5c <__malloc_unlock>
 80060c6:	e7e4      	b.n	8006092 <_malloc_r+0x1e>
 80060c8:	680b      	ldr	r3, [r1, #0]
 80060ca:	1b5b      	subs	r3, r3, r5
 80060cc:	d418      	bmi.n	8006100 <_malloc_r+0x8c>
 80060ce:	2b0b      	cmp	r3, #11
 80060d0:	d90f      	bls.n	80060f2 <_malloc_r+0x7e>
 80060d2:	600b      	str	r3, [r1, #0]
 80060d4:	50cd      	str	r5, [r1, r3]
 80060d6:	18cc      	adds	r4, r1, r3
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 fd3f 	bl	8006b5c <__malloc_unlock>
 80060de:	f104 000b 	add.w	r0, r4, #11
 80060e2:	1d23      	adds	r3, r4, #4
 80060e4:	f020 0007 	bic.w	r0, r0, #7
 80060e8:	1ac3      	subs	r3, r0, r3
 80060ea:	d0d3      	beq.n	8006094 <_malloc_r+0x20>
 80060ec:	425a      	negs	r2, r3
 80060ee:	50e2      	str	r2, [r4, r3]
 80060f0:	e7d0      	b.n	8006094 <_malloc_r+0x20>
 80060f2:	428c      	cmp	r4, r1
 80060f4:	684b      	ldr	r3, [r1, #4]
 80060f6:	bf16      	itet	ne
 80060f8:	6063      	strne	r3, [r4, #4]
 80060fa:	6013      	streq	r3, [r2, #0]
 80060fc:	460c      	movne	r4, r1
 80060fe:	e7eb      	b.n	80060d8 <_malloc_r+0x64>
 8006100:	460c      	mov	r4, r1
 8006102:	6849      	ldr	r1, [r1, #4]
 8006104:	e7cc      	b.n	80060a0 <_malloc_r+0x2c>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d005      	beq.n	800611c <_malloc_r+0xa8>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4630      	mov	r0, r6
 8006114:	f000 fa9a 	bl	800664c <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d0cf      	beq.n	80060bc <_malloc_r+0x48>
 800611c:	6025      	str	r5, [r4, #0]
 800611e:	e7db      	b.n	80060d8 <_malloc_r+0x64>
 8006120:	20000200 	.word	0x20000200
 8006124:	20000204 	.word	0x20000204

08006128 <__ssputs_r>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	688e      	ldr	r6, [r1, #8]
 800612e:	429e      	cmp	r6, r3
 8006130:	4682      	mov	sl, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4690      	mov	r8, r2
 8006136:	4699      	mov	r9, r3
 8006138:	d837      	bhi.n	80061aa <__ssputs_r+0x82>
 800613a:	898a      	ldrh	r2, [r1, #12]
 800613c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006140:	d031      	beq.n	80061a6 <__ssputs_r+0x7e>
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	6909      	ldr	r1, [r1, #16]
 8006146:	1a6f      	subs	r7, r5, r1
 8006148:	6965      	ldr	r5, [r4, #20]
 800614a:	2302      	movs	r3, #2
 800614c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006150:	fb95 f5f3 	sdiv	r5, r5, r3
 8006154:	f109 0301 	add.w	r3, r9, #1
 8006158:	443b      	add	r3, r7
 800615a:	429d      	cmp	r5, r3
 800615c:	bf38      	it	cc
 800615e:	461d      	movcc	r5, r3
 8006160:	0553      	lsls	r3, r2, #21
 8006162:	d530      	bpl.n	80061c6 <__ssputs_r+0x9e>
 8006164:	4629      	mov	r1, r5
 8006166:	f7ff ff85 	bl	8006074 <_malloc_r>
 800616a:	4606      	mov	r6, r0
 800616c:	b950      	cbnz	r0, 8006184 <__ssputs_r+0x5c>
 800616e:	230c      	movs	r3, #12
 8006170:	f8ca 3000 	str.w	r3, [sl]
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	463a      	mov	r2, r7
 8006186:	6921      	ldr	r1, [r4, #16]
 8006188:	f7ff fc32 	bl	80059f0 <memcpy>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	6126      	str	r6, [r4, #16]
 800619a:	6165      	str	r5, [r4, #20]
 800619c:	443e      	add	r6, r7
 800619e:	1bed      	subs	r5, r5, r7
 80061a0:	6026      	str	r6, [r4, #0]
 80061a2:	60a5      	str	r5, [r4, #8]
 80061a4:	464e      	mov	r6, r9
 80061a6:	454e      	cmp	r6, r9
 80061a8:	d900      	bls.n	80061ac <__ssputs_r+0x84>
 80061aa:	464e      	mov	r6, r9
 80061ac:	4632      	mov	r2, r6
 80061ae:	4641      	mov	r1, r8
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	f000 fcb9 	bl	8006b28 <memmove>
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	1b9b      	subs	r3, r3, r6
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	441e      	add	r6, r3
 80061c0:	6026      	str	r6, [r4, #0]
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7dc      	b.n	8006180 <__ssputs_r+0x58>
 80061c6:	462a      	mov	r2, r5
 80061c8:	f000 fcc9 	bl	8006b5e <_realloc_r>
 80061cc:	4606      	mov	r6, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d1e2      	bne.n	8006198 <__ssputs_r+0x70>
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	4650      	mov	r0, sl
 80061d6:	f7ff feff 	bl	8005fd8 <_free_r>
 80061da:	e7c8      	b.n	800616e <__ssputs_r+0x46>

080061dc <_svfiprintf_r>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	461d      	mov	r5, r3
 80061e2:	898b      	ldrh	r3, [r1, #12]
 80061e4:	061f      	lsls	r7, r3, #24
 80061e6:	b09d      	sub	sp, #116	; 0x74
 80061e8:	4680      	mov	r8, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4616      	mov	r6, r2
 80061ee:	d50f      	bpl.n	8006210 <_svfiprintf_r+0x34>
 80061f0:	690b      	ldr	r3, [r1, #16]
 80061f2:	b96b      	cbnz	r3, 8006210 <_svfiprintf_r+0x34>
 80061f4:	2140      	movs	r1, #64	; 0x40
 80061f6:	f7ff ff3d 	bl	8006074 <_malloc_r>
 80061fa:	6020      	str	r0, [r4, #0]
 80061fc:	6120      	str	r0, [r4, #16]
 80061fe:	b928      	cbnz	r0, 800620c <_svfiprintf_r+0x30>
 8006200:	230c      	movs	r3, #12
 8006202:	f8c8 3000 	str.w	r3, [r8]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	e0c8      	b.n	800639e <_svfiprintf_r+0x1c2>
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	6163      	str	r3, [r4, #20]
 8006210:	2300      	movs	r3, #0
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	2320      	movs	r3, #32
 8006216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800621a:	2330      	movs	r3, #48	; 0x30
 800621c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006220:	9503      	str	r5, [sp, #12]
 8006222:	f04f 0b01 	mov.w	fp, #1
 8006226:	4637      	mov	r7, r6
 8006228:	463d      	mov	r5, r7
 800622a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800622e:	b10b      	cbz	r3, 8006234 <_svfiprintf_r+0x58>
 8006230:	2b25      	cmp	r3, #37	; 0x25
 8006232:	d13e      	bne.n	80062b2 <_svfiprintf_r+0xd6>
 8006234:	ebb7 0a06 	subs.w	sl, r7, r6
 8006238:	d00b      	beq.n	8006252 <_svfiprintf_r+0x76>
 800623a:	4653      	mov	r3, sl
 800623c:	4632      	mov	r2, r6
 800623e:	4621      	mov	r1, r4
 8006240:	4640      	mov	r0, r8
 8006242:	f7ff ff71 	bl	8006128 <__ssputs_r>
 8006246:	3001      	adds	r0, #1
 8006248:	f000 80a4 	beq.w	8006394 <_svfiprintf_r+0x1b8>
 800624c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624e:	4453      	add	r3, sl
 8006250:	9309      	str	r3, [sp, #36]	; 0x24
 8006252:	783b      	ldrb	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 809d 	beq.w	8006394 <_svfiprintf_r+0x1b8>
 800625a:	2300      	movs	r3, #0
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800626c:	931a      	str	r3, [sp, #104]	; 0x68
 800626e:	462f      	mov	r7, r5
 8006270:	2205      	movs	r2, #5
 8006272:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006276:	4850      	ldr	r0, [pc, #320]	; (80063b8 <_svfiprintf_r+0x1dc>)
 8006278:	f7f9 ffc2 	bl	8000200 <memchr>
 800627c:	9b04      	ldr	r3, [sp, #16]
 800627e:	b9d0      	cbnz	r0, 80062b6 <_svfiprintf_r+0xda>
 8006280:	06d9      	lsls	r1, r3, #27
 8006282:	bf44      	itt	mi
 8006284:	2220      	movmi	r2, #32
 8006286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800628a:	071a      	lsls	r2, r3, #28
 800628c:	bf44      	itt	mi
 800628e:	222b      	movmi	r2, #43	; 0x2b
 8006290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006294:	782a      	ldrb	r2, [r5, #0]
 8006296:	2a2a      	cmp	r2, #42	; 0x2a
 8006298:	d015      	beq.n	80062c6 <_svfiprintf_r+0xea>
 800629a:	9a07      	ldr	r2, [sp, #28]
 800629c:	462f      	mov	r7, r5
 800629e:	2000      	movs	r0, #0
 80062a0:	250a      	movs	r5, #10
 80062a2:	4639      	mov	r1, r7
 80062a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a8:	3b30      	subs	r3, #48	; 0x30
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d94d      	bls.n	800634a <_svfiprintf_r+0x16e>
 80062ae:	b1b8      	cbz	r0, 80062e0 <_svfiprintf_r+0x104>
 80062b0:	e00f      	b.n	80062d2 <_svfiprintf_r+0xf6>
 80062b2:	462f      	mov	r7, r5
 80062b4:	e7b8      	b.n	8006228 <_svfiprintf_r+0x4c>
 80062b6:	4a40      	ldr	r2, [pc, #256]	; (80063b8 <_svfiprintf_r+0x1dc>)
 80062b8:	1a80      	subs	r0, r0, r2
 80062ba:	fa0b f000 	lsl.w	r0, fp, r0
 80062be:	4318      	orrs	r0, r3
 80062c0:	9004      	str	r0, [sp, #16]
 80062c2:	463d      	mov	r5, r7
 80062c4:	e7d3      	b.n	800626e <_svfiprintf_r+0x92>
 80062c6:	9a03      	ldr	r2, [sp, #12]
 80062c8:	1d11      	adds	r1, r2, #4
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	9103      	str	r1, [sp, #12]
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	db01      	blt.n	80062d6 <_svfiprintf_r+0xfa>
 80062d2:	9207      	str	r2, [sp, #28]
 80062d4:	e004      	b.n	80062e0 <_svfiprintf_r+0x104>
 80062d6:	4252      	negs	r2, r2
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	9207      	str	r2, [sp, #28]
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	783b      	ldrb	r3, [r7, #0]
 80062e2:	2b2e      	cmp	r3, #46	; 0x2e
 80062e4:	d10c      	bne.n	8006300 <_svfiprintf_r+0x124>
 80062e6:	787b      	ldrb	r3, [r7, #1]
 80062e8:	2b2a      	cmp	r3, #42	; 0x2a
 80062ea:	d133      	bne.n	8006354 <_svfiprintf_r+0x178>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	1d1a      	adds	r2, r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9203      	str	r2, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bfb8      	it	lt
 80062f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062fc:	3702      	adds	r7, #2
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	4d2e      	ldr	r5, [pc, #184]	; (80063bc <_svfiprintf_r+0x1e0>)
 8006302:	7839      	ldrb	r1, [r7, #0]
 8006304:	2203      	movs	r2, #3
 8006306:	4628      	mov	r0, r5
 8006308:	f7f9 ff7a 	bl	8000200 <memchr>
 800630c:	b138      	cbz	r0, 800631e <_svfiprintf_r+0x142>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	1b40      	subs	r0, r0, r5
 8006312:	fa03 f000 	lsl.w	r0, r3, r0
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	4303      	orrs	r3, r0
 800631a:	3701      	adds	r7, #1
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	7839      	ldrb	r1, [r7, #0]
 8006320:	4827      	ldr	r0, [pc, #156]	; (80063c0 <_svfiprintf_r+0x1e4>)
 8006322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006326:	2206      	movs	r2, #6
 8006328:	1c7e      	adds	r6, r7, #1
 800632a:	f7f9 ff69 	bl	8000200 <memchr>
 800632e:	2800      	cmp	r0, #0
 8006330:	d038      	beq.n	80063a4 <_svfiprintf_r+0x1c8>
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <_svfiprintf_r+0x1e8>)
 8006334:	bb13      	cbnz	r3, 800637c <_svfiprintf_r+0x1a0>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	3307      	adds	r3, #7
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	3308      	adds	r3, #8
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006344:	444b      	add	r3, r9
 8006346:	9309      	str	r3, [sp, #36]	; 0x24
 8006348:	e76d      	b.n	8006226 <_svfiprintf_r+0x4a>
 800634a:	fb05 3202 	mla	r2, r5, r2, r3
 800634e:	2001      	movs	r0, #1
 8006350:	460f      	mov	r7, r1
 8006352:	e7a6      	b.n	80062a2 <_svfiprintf_r+0xc6>
 8006354:	2300      	movs	r3, #0
 8006356:	3701      	adds	r7, #1
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	4619      	mov	r1, r3
 800635c:	250a      	movs	r5, #10
 800635e:	4638      	mov	r0, r7
 8006360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006364:	3a30      	subs	r2, #48	; 0x30
 8006366:	2a09      	cmp	r2, #9
 8006368:	d903      	bls.n	8006372 <_svfiprintf_r+0x196>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c8      	beq.n	8006300 <_svfiprintf_r+0x124>
 800636e:	9105      	str	r1, [sp, #20]
 8006370:	e7c6      	b.n	8006300 <_svfiprintf_r+0x124>
 8006372:	fb05 2101 	mla	r1, r5, r1, r2
 8006376:	2301      	movs	r3, #1
 8006378:	4607      	mov	r7, r0
 800637a:	e7f0      	b.n	800635e <_svfiprintf_r+0x182>
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4622      	mov	r2, r4
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <_svfiprintf_r+0x1ec>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4640      	mov	r0, r8
 8006388:	f7fe f80c 	bl	80043a4 <_printf_float>
 800638c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006390:	4681      	mov	r9, r0
 8006392:	d1d6      	bne.n	8006342 <_svfiprintf_r+0x166>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	065b      	lsls	r3, r3, #25
 8006398:	f53f af35 	bmi.w	8006206 <_svfiprintf_r+0x2a>
 800639c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800639e:	b01d      	add	sp, #116	; 0x74
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	ab03      	add	r3, sp, #12
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4622      	mov	r2, r4
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <_svfiprintf_r+0x1ec>)
 80063ac:	a904      	add	r1, sp, #16
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7fe faae 	bl	8004910 <_printf_i>
 80063b4:	e7ea      	b.n	800638c <_svfiprintf_r+0x1b0>
 80063b6:	bf00      	nop
 80063b8:	08006e34 	.word	0x08006e34
 80063bc:	08006e3a 	.word	0x08006e3a
 80063c0:	08006e3e 	.word	0x08006e3e
 80063c4:	080043a5 	.word	0x080043a5
 80063c8:	08006129 	.word	0x08006129

080063cc <__sfputc_r>:
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	b410      	push	{r4}
 80063d4:	6093      	str	r3, [r2, #8]
 80063d6:	da08      	bge.n	80063ea <__sfputc_r+0x1e>
 80063d8:	6994      	ldr	r4, [r2, #24]
 80063da:	42a3      	cmp	r3, r4
 80063dc:	db01      	blt.n	80063e2 <__sfputc_r+0x16>
 80063de:	290a      	cmp	r1, #10
 80063e0:	d103      	bne.n	80063ea <__sfputc_r+0x1e>
 80063e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e6:	f000 b985 	b.w	80066f4 <__swbuf_r>
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6010      	str	r0, [r2, #0]
 80063f0:	7019      	strb	r1, [r3, #0]
 80063f2:	4608      	mov	r0, r1
 80063f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <__sfputs_r>:
 80063fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	4614      	mov	r4, r2
 8006402:	18d5      	adds	r5, r2, r3
 8006404:	42ac      	cmp	r4, r5
 8006406:	d101      	bne.n	800640c <__sfputs_r+0x12>
 8006408:	2000      	movs	r0, #0
 800640a:	e007      	b.n	800641c <__sfputs_r+0x22>
 800640c:	463a      	mov	r2, r7
 800640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffda 	bl	80063cc <__sfputc_r>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d1f3      	bne.n	8006404 <__sfputs_r+0xa>
 800641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006420 <_vfiprintf_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	460c      	mov	r4, r1
 8006426:	b09d      	sub	sp, #116	; 0x74
 8006428:	4617      	mov	r7, r2
 800642a:	461d      	mov	r5, r3
 800642c:	4606      	mov	r6, r0
 800642e:	b118      	cbz	r0, 8006438 <_vfiprintf_r+0x18>
 8006430:	6983      	ldr	r3, [r0, #24]
 8006432:	b90b      	cbnz	r3, 8006438 <_vfiprintf_r+0x18>
 8006434:	f7ff fa3c 	bl	80058b0 <__sinit>
 8006438:	4b7c      	ldr	r3, [pc, #496]	; (800662c <_vfiprintf_r+0x20c>)
 800643a:	429c      	cmp	r4, r3
 800643c:	d158      	bne.n	80064f0 <_vfiprintf_r+0xd0>
 800643e:	6874      	ldr	r4, [r6, #4]
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	0718      	lsls	r0, r3, #28
 8006444:	d55e      	bpl.n	8006504 <_vfiprintf_r+0xe4>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d05b      	beq.n	8006504 <_vfiprintf_r+0xe4>
 800644c:	2300      	movs	r3, #0
 800644e:	9309      	str	r3, [sp, #36]	; 0x24
 8006450:	2320      	movs	r3, #32
 8006452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006456:	2330      	movs	r3, #48	; 0x30
 8006458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800645c:	9503      	str	r5, [sp, #12]
 800645e:	f04f 0b01 	mov.w	fp, #1
 8006462:	46b8      	mov	r8, r7
 8006464:	4645      	mov	r5, r8
 8006466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800646a:	b10b      	cbz	r3, 8006470 <_vfiprintf_r+0x50>
 800646c:	2b25      	cmp	r3, #37	; 0x25
 800646e:	d154      	bne.n	800651a <_vfiprintf_r+0xfa>
 8006470:	ebb8 0a07 	subs.w	sl, r8, r7
 8006474:	d00b      	beq.n	800648e <_vfiprintf_r+0x6e>
 8006476:	4653      	mov	r3, sl
 8006478:	463a      	mov	r2, r7
 800647a:	4621      	mov	r1, r4
 800647c:	4630      	mov	r0, r6
 800647e:	f7ff ffbc 	bl	80063fa <__sfputs_r>
 8006482:	3001      	adds	r0, #1
 8006484:	f000 80c2 	beq.w	800660c <_vfiprintf_r+0x1ec>
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	4453      	add	r3, sl
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	f898 3000 	ldrb.w	r3, [r8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80ba 	beq.w	800660c <_vfiprintf_r+0x1ec>
 8006498:	2300      	movs	r3, #0
 800649a:	f04f 32ff 	mov.w	r2, #4294967295
 800649e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	9307      	str	r3, [sp, #28]
 80064a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064aa:	931a      	str	r3, [sp, #104]	; 0x68
 80064ac:	46a8      	mov	r8, r5
 80064ae:	2205      	movs	r2, #5
 80064b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064b4:	485e      	ldr	r0, [pc, #376]	; (8006630 <_vfiprintf_r+0x210>)
 80064b6:	f7f9 fea3 	bl	8000200 <memchr>
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	bb78      	cbnz	r0, 800651e <_vfiprintf_r+0xfe>
 80064be:	06d9      	lsls	r1, r3, #27
 80064c0:	bf44      	itt	mi
 80064c2:	2220      	movmi	r2, #32
 80064c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	bf44      	itt	mi
 80064cc:	222b      	movmi	r2, #43	; 0x2b
 80064ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064d2:	782a      	ldrb	r2, [r5, #0]
 80064d4:	2a2a      	cmp	r2, #42	; 0x2a
 80064d6:	d02a      	beq.n	800652e <_vfiprintf_r+0x10e>
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	46a8      	mov	r8, r5
 80064dc:	2000      	movs	r0, #0
 80064de:	250a      	movs	r5, #10
 80064e0:	4641      	mov	r1, r8
 80064e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e6:	3b30      	subs	r3, #48	; 0x30
 80064e8:	2b09      	cmp	r3, #9
 80064ea:	d969      	bls.n	80065c0 <_vfiprintf_r+0x1a0>
 80064ec:	b360      	cbz	r0, 8006548 <_vfiprintf_r+0x128>
 80064ee:	e024      	b.n	800653a <_vfiprintf_r+0x11a>
 80064f0:	4b50      	ldr	r3, [pc, #320]	; (8006634 <_vfiprintf_r+0x214>)
 80064f2:	429c      	cmp	r4, r3
 80064f4:	d101      	bne.n	80064fa <_vfiprintf_r+0xda>
 80064f6:	68b4      	ldr	r4, [r6, #8]
 80064f8:	e7a2      	b.n	8006440 <_vfiprintf_r+0x20>
 80064fa:	4b4f      	ldr	r3, [pc, #316]	; (8006638 <_vfiprintf_r+0x218>)
 80064fc:	429c      	cmp	r4, r3
 80064fe:	bf08      	it	eq
 8006500:	68f4      	ldreq	r4, [r6, #12]
 8006502:	e79d      	b.n	8006440 <_vfiprintf_r+0x20>
 8006504:	4621      	mov	r1, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f000 f958 	bl	80067bc <__swsetup_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	d09d      	beq.n	800644c <_vfiprintf_r+0x2c>
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	b01d      	add	sp, #116	; 0x74
 8006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651a:	46a8      	mov	r8, r5
 800651c:	e7a2      	b.n	8006464 <_vfiprintf_r+0x44>
 800651e:	4a44      	ldr	r2, [pc, #272]	; (8006630 <_vfiprintf_r+0x210>)
 8006520:	1a80      	subs	r0, r0, r2
 8006522:	fa0b f000 	lsl.w	r0, fp, r0
 8006526:	4318      	orrs	r0, r3
 8006528:	9004      	str	r0, [sp, #16]
 800652a:	4645      	mov	r5, r8
 800652c:	e7be      	b.n	80064ac <_vfiprintf_r+0x8c>
 800652e:	9a03      	ldr	r2, [sp, #12]
 8006530:	1d11      	adds	r1, r2, #4
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	9103      	str	r1, [sp, #12]
 8006536:	2a00      	cmp	r2, #0
 8006538:	db01      	blt.n	800653e <_vfiprintf_r+0x11e>
 800653a:	9207      	str	r2, [sp, #28]
 800653c:	e004      	b.n	8006548 <_vfiprintf_r+0x128>
 800653e:	4252      	negs	r2, r2
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	9207      	str	r2, [sp, #28]
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	f898 3000 	ldrb.w	r3, [r8]
 800654c:	2b2e      	cmp	r3, #46	; 0x2e
 800654e:	d10e      	bne.n	800656e <_vfiprintf_r+0x14e>
 8006550:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006554:	2b2a      	cmp	r3, #42	; 0x2a
 8006556:	d138      	bne.n	80065ca <_vfiprintf_r+0x1aa>
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9203      	str	r2, [sp, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfb8      	it	lt
 8006564:	f04f 33ff 	movlt.w	r3, #4294967295
 8006568:	f108 0802 	add.w	r8, r8, #2
 800656c:	9305      	str	r3, [sp, #20]
 800656e:	4d33      	ldr	r5, [pc, #204]	; (800663c <_vfiprintf_r+0x21c>)
 8006570:	f898 1000 	ldrb.w	r1, [r8]
 8006574:	2203      	movs	r2, #3
 8006576:	4628      	mov	r0, r5
 8006578:	f7f9 fe42 	bl	8000200 <memchr>
 800657c:	b140      	cbz	r0, 8006590 <_vfiprintf_r+0x170>
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	1b40      	subs	r0, r0, r5
 8006582:	fa03 f000 	lsl.w	r0, r3, r0
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	4303      	orrs	r3, r0
 800658a:	f108 0801 	add.w	r8, r8, #1
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	f898 1000 	ldrb.w	r1, [r8]
 8006594:	482a      	ldr	r0, [pc, #168]	; (8006640 <_vfiprintf_r+0x220>)
 8006596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659a:	2206      	movs	r2, #6
 800659c:	f108 0701 	add.w	r7, r8, #1
 80065a0:	f7f9 fe2e 	bl	8000200 <memchr>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d037      	beq.n	8006618 <_vfiprintf_r+0x1f8>
 80065a8:	4b26      	ldr	r3, [pc, #152]	; (8006644 <_vfiprintf_r+0x224>)
 80065aa:	bb1b      	cbnz	r3, 80065f4 <_vfiprintf_r+0x1d4>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	3307      	adds	r3, #7
 80065b0:	f023 0307 	bic.w	r3, r3, #7
 80065b4:	3308      	adds	r3, #8
 80065b6:	9303      	str	r3, [sp, #12]
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	444b      	add	r3, r9
 80065bc:	9309      	str	r3, [sp, #36]	; 0x24
 80065be:	e750      	b.n	8006462 <_vfiprintf_r+0x42>
 80065c0:	fb05 3202 	mla	r2, r5, r2, r3
 80065c4:	2001      	movs	r0, #1
 80065c6:	4688      	mov	r8, r1
 80065c8:	e78a      	b.n	80064e0 <_vfiprintf_r+0xc0>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f108 0801 	add.w	r8, r8, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4619      	mov	r1, r3
 80065d4:	250a      	movs	r5, #10
 80065d6:	4640      	mov	r0, r8
 80065d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065dc:	3a30      	subs	r2, #48	; 0x30
 80065de:	2a09      	cmp	r2, #9
 80065e0:	d903      	bls.n	80065ea <_vfiprintf_r+0x1ca>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0c3      	beq.n	800656e <_vfiprintf_r+0x14e>
 80065e6:	9105      	str	r1, [sp, #20]
 80065e8:	e7c1      	b.n	800656e <_vfiprintf_r+0x14e>
 80065ea:	fb05 2101 	mla	r1, r5, r1, r2
 80065ee:	2301      	movs	r3, #1
 80065f0:	4680      	mov	r8, r0
 80065f2:	e7f0      	b.n	80065d6 <_vfiprintf_r+0x1b6>
 80065f4:	ab03      	add	r3, sp, #12
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	4622      	mov	r2, r4
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <_vfiprintf_r+0x228>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	4630      	mov	r0, r6
 8006600:	f7fd fed0 	bl	80043a4 <_printf_float>
 8006604:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006608:	4681      	mov	r9, r0
 800660a:	d1d5      	bne.n	80065b8 <_vfiprintf_r+0x198>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	065b      	lsls	r3, r3, #25
 8006610:	f53f af7e 	bmi.w	8006510 <_vfiprintf_r+0xf0>
 8006614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006616:	e77d      	b.n	8006514 <_vfiprintf_r+0xf4>
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4622      	mov	r2, r4
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <_vfiprintf_r+0x228>)
 8006620:	a904      	add	r1, sp, #16
 8006622:	4630      	mov	r0, r6
 8006624:	f7fe f974 	bl	8004910 <_printf_i>
 8006628:	e7ec      	b.n	8006604 <_vfiprintf_r+0x1e4>
 800662a:	bf00      	nop
 800662c:	08006cf8 	.word	0x08006cf8
 8006630:	08006e34 	.word	0x08006e34
 8006634:	08006d18 	.word	0x08006d18
 8006638:	08006cd8 	.word	0x08006cd8
 800663c:	08006e3a 	.word	0x08006e3a
 8006640:	08006e3e 	.word	0x08006e3e
 8006644:	080043a5 	.word	0x080043a5
 8006648:	080063fb 	.word	0x080063fb

0800664c <_sbrk_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4c06      	ldr	r4, [pc, #24]	; (8006668 <_sbrk_r+0x1c>)
 8006650:	2300      	movs	r3, #0
 8006652:	4605      	mov	r5, r0
 8006654:	4608      	mov	r0, r1
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	f7fd fd72 	bl	8004140 <_sbrk>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_sbrk_r+0x1a>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	b103      	cbz	r3, 8006666 <_sbrk_r+0x1a>
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200002e4 	.word	0x200002e4

0800666c <__sread>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	f000 fa9a 	bl	8006bac <_read_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	bfab      	itete	ge
 800667c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800667e:	89a3      	ldrhlt	r3, [r4, #12]
 8006680:	181b      	addge	r3, r3, r0
 8006682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006686:	bfac      	ite	ge
 8006688:	6563      	strge	r3, [r4, #84]	; 0x54
 800668a:	81a3      	strhlt	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__swrite>:
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	461f      	mov	r7, r3
 8006694:	898b      	ldrh	r3, [r1, #12]
 8006696:	05db      	lsls	r3, r3, #23
 8006698:	4605      	mov	r5, r0
 800669a:	460c      	mov	r4, r1
 800669c:	4616      	mov	r6, r2
 800669e:	d505      	bpl.n	80066ac <__swrite+0x1e>
 80066a0:	2302      	movs	r3, #2
 80066a2:	2200      	movs	r2, #0
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	f000 f9b6 	bl	8006a18 <_lseek_r>
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	4632      	mov	r2, r6
 80066ba:	463b      	mov	r3, r7
 80066bc:	4628      	mov	r0, r5
 80066be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	f000 b869 	b.w	8006798 <_write_r>

080066c6 <__sseek>:
 80066c6:	b510      	push	{r4, lr}
 80066c8:	460c      	mov	r4, r1
 80066ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ce:	f000 f9a3 	bl	8006a18 <_lseek_r>
 80066d2:	1c43      	adds	r3, r0, #1
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	bf15      	itete	ne
 80066d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066e2:	81a3      	strheq	r3, [r4, #12]
 80066e4:	bf18      	it	ne
 80066e6:	81a3      	strhne	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__sclose>:
 80066ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ee:	f000 b8d3 	b.w	8006898 <_close_r>
	...

080066f4 <__swbuf_r>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	460e      	mov	r6, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	4605      	mov	r5, r0
 80066fc:	b118      	cbz	r0, 8006706 <__swbuf_r+0x12>
 80066fe:	6983      	ldr	r3, [r0, #24]
 8006700:	b90b      	cbnz	r3, 8006706 <__swbuf_r+0x12>
 8006702:	f7ff f8d5 	bl	80058b0 <__sinit>
 8006706:	4b21      	ldr	r3, [pc, #132]	; (800678c <__swbuf_r+0x98>)
 8006708:	429c      	cmp	r4, r3
 800670a:	d12a      	bne.n	8006762 <__swbuf_r+0x6e>
 800670c:	686c      	ldr	r4, [r5, #4]
 800670e:	69a3      	ldr	r3, [r4, #24]
 8006710:	60a3      	str	r3, [r4, #8]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	071a      	lsls	r2, r3, #28
 8006716:	d52e      	bpl.n	8006776 <__swbuf_r+0x82>
 8006718:	6923      	ldr	r3, [r4, #16]
 800671a:	b363      	cbz	r3, 8006776 <__swbuf_r+0x82>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	1ac0      	subs	r0, r0, r3
 8006722:	6963      	ldr	r3, [r4, #20]
 8006724:	b2f6      	uxtb	r6, r6
 8006726:	4283      	cmp	r3, r0
 8006728:	4637      	mov	r7, r6
 800672a:	dc04      	bgt.n	8006736 <__swbuf_r+0x42>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f948 	bl	80069c4 <_fflush_r>
 8006734:	bb28      	cbnz	r0, 8006782 <__swbuf_r+0x8e>
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	3b01      	subs	r3, #1
 800673a:	60a3      	str	r3, [r4, #8]
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	6022      	str	r2, [r4, #0]
 8006742:	701e      	strb	r6, [r3, #0]
 8006744:	6963      	ldr	r3, [r4, #20]
 8006746:	3001      	adds	r0, #1
 8006748:	4283      	cmp	r3, r0
 800674a:	d004      	beq.n	8006756 <__swbuf_r+0x62>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	07db      	lsls	r3, r3, #31
 8006750:	d519      	bpl.n	8006786 <__swbuf_r+0x92>
 8006752:	2e0a      	cmp	r6, #10
 8006754:	d117      	bne.n	8006786 <__swbuf_r+0x92>
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 f933 	bl	80069c4 <_fflush_r>
 800675e:	b190      	cbz	r0, 8006786 <__swbuf_r+0x92>
 8006760:	e00f      	b.n	8006782 <__swbuf_r+0x8e>
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <__swbuf_r+0x9c>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d101      	bne.n	800676c <__swbuf_r+0x78>
 8006768:	68ac      	ldr	r4, [r5, #8]
 800676a:	e7d0      	b.n	800670e <__swbuf_r+0x1a>
 800676c:	4b09      	ldr	r3, [pc, #36]	; (8006794 <__swbuf_r+0xa0>)
 800676e:	429c      	cmp	r4, r3
 8006770:	bf08      	it	eq
 8006772:	68ec      	ldreq	r4, [r5, #12]
 8006774:	e7cb      	b.n	800670e <__swbuf_r+0x1a>
 8006776:	4621      	mov	r1, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f000 f81f 	bl	80067bc <__swsetup_r>
 800677e:	2800      	cmp	r0, #0
 8006780:	d0cc      	beq.n	800671c <__swbuf_r+0x28>
 8006782:	f04f 37ff 	mov.w	r7, #4294967295
 8006786:	4638      	mov	r0, r7
 8006788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678a:	bf00      	nop
 800678c:	08006cf8 	.word	0x08006cf8
 8006790:	08006d18 	.word	0x08006d18
 8006794:	08006cd8 	.word	0x08006cd8

08006798 <_write_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4c07      	ldr	r4, [pc, #28]	; (80067b8 <_write_r+0x20>)
 800679c:	4605      	mov	r5, r0
 800679e:	4608      	mov	r0, r1
 80067a0:	4611      	mov	r1, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	6022      	str	r2, [r4, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f7fd fc79 	bl	800409e <_write>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_write_r+0x1e>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_write_r+0x1e>
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	200002e4 	.word	0x200002e4

080067bc <__swsetup_r>:
 80067bc:	4b32      	ldr	r3, [pc, #200]	; (8006888 <__swsetup_r+0xcc>)
 80067be:	b570      	push	{r4, r5, r6, lr}
 80067c0:	681d      	ldr	r5, [r3, #0]
 80067c2:	4606      	mov	r6, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	b125      	cbz	r5, 80067d2 <__swsetup_r+0x16>
 80067c8:	69ab      	ldr	r3, [r5, #24]
 80067ca:	b913      	cbnz	r3, 80067d2 <__swsetup_r+0x16>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7ff f86f 	bl	80058b0 <__sinit>
 80067d2:	4b2e      	ldr	r3, [pc, #184]	; (800688c <__swsetup_r+0xd0>)
 80067d4:	429c      	cmp	r4, r3
 80067d6:	d10f      	bne.n	80067f8 <__swsetup_r+0x3c>
 80067d8:	686c      	ldr	r4, [r5, #4]
 80067da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	0715      	lsls	r5, r2, #28
 80067e2:	d42c      	bmi.n	800683e <__swsetup_r+0x82>
 80067e4:	06d0      	lsls	r0, r2, #27
 80067e6:	d411      	bmi.n	800680c <__swsetup_r+0x50>
 80067e8:	2209      	movs	r2, #9
 80067ea:	6032      	str	r2, [r6, #0]
 80067ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	e03e      	b.n	8006876 <__swsetup_r+0xba>
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <__swsetup_r+0xd4>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d101      	bne.n	8006802 <__swsetup_r+0x46>
 80067fe:	68ac      	ldr	r4, [r5, #8]
 8006800:	e7eb      	b.n	80067da <__swsetup_r+0x1e>
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <__swsetup_r+0xd8>)
 8006804:	429c      	cmp	r4, r3
 8006806:	bf08      	it	eq
 8006808:	68ec      	ldreq	r4, [r5, #12]
 800680a:	e7e6      	b.n	80067da <__swsetup_r+0x1e>
 800680c:	0751      	lsls	r1, r2, #29
 800680e:	d512      	bpl.n	8006836 <__swsetup_r+0x7a>
 8006810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006812:	b141      	cbz	r1, 8006826 <__swsetup_r+0x6a>
 8006814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <__swsetup_r+0x66>
 800681c:	4630      	mov	r0, r6
 800681e:	f7ff fbdb 	bl	8005fd8 <_free_r>
 8006822:	2300      	movs	r3, #0
 8006824:	6363      	str	r3, [r4, #52]	; 0x34
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	2300      	movs	r3, #0
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	b94b      	cbnz	r3, 8006856 <__swsetup_r+0x9a>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684c:	d003      	beq.n	8006856 <__swsetup_r+0x9a>
 800684e:	4621      	mov	r1, r4
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f917 	bl	8006a84 <__smakebuf_r>
 8006856:	89a2      	ldrh	r2, [r4, #12]
 8006858:	f012 0301 	ands.w	r3, r2, #1
 800685c:	d00c      	beq.n	8006878 <__swsetup_r+0xbc>
 800685e:	2300      	movs	r3, #0
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	6963      	ldr	r3, [r4, #20]
 8006864:	425b      	negs	r3, r3
 8006866:	61a3      	str	r3, [r4, #24]
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b953      	cbnz	r3, 8006882 <__swsetup_r+0xc6>
 800686c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006870:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006874:	d1ba      	bne.n	80067ec <__swsetup_r+0x30>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	0792      	lsls	r2, r2, #30
 800687a:	bf58      	it	pl
 800687c:	6963      	ldrpl	r3, [r4, #20]
 800687e:	60a3      	str	r3, [r4, #8]
 8006880:	e7f2      	b.n	8006868 <__swsetup_r+0xac>
 8006882:	2000      	movs	r0, #0
 8006884:	e7f7      	b.n	8006876 <__swsetup_r+0xba>
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c
 800688c:	08006cf8 	.word	0x08006cf8
 8006890:	08006d18 	.word	0x08006d18
 8006894:	08006cd8 	.word	0x08006cd8

08006898 <_close_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_close_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	f7fd fc17 	bl	80040d6 <_close>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_close_r+0x1a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_close_r+0x1a>
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200002e4 	.word	0x200002e4

080068b8 <__sflush_r>:
 80068b8:	898a      	ldrh	r2, [r1, #12]
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	4605      	mov	r5, r0
 80068c0:	0710      	lsls	r0, r2, #28
 80068c2:	460c      	mov	r4, r1
 80068c4:	d458      	bmi.n	8006978 <__sflush_r+0xc0>
 80068c6:	684b      	ldr	r3, [r1, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dc05      	bgt.n	80068d8 <__sflush_r+0x20>
 80068cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dc02      	bgt.n	80068d8 <__sflush_r+0x20>
 80068d2:	2000      	movs	r0, #0
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068da:	2e00      	cmp	r6, #0
 80068dc:	d0f9      	beq.n	80068d2 <__sflush_r+0x1a>
 80068de:	2300      	movs	r3, #0
 80068e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068e4:	682f      	ldr	r7, [r5, #0]
 80068e6:	6a21      	ldr	r1, [r4, #32]
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	d032      	beq.n	8006952 <__sflush_r+0x9a>
 80068ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	075a      	lsls	r2, r3, #29
 80068f2:	d505      	bpl.n	8006900 <__sflush_r+0x48>
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	1ac0      	subs	r0, r0, r3
 80068f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068fa:	b10b      	cbz	r3, 8006900 <__sflush_r+0x48>
 80068fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068fe:	1ac0      	subs	r0, r0, r3
 8006900:	2300      	movs	r3, #0
 8006902:	4602      	mov	r2, r0
 8006904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006906:	6a21      	ldr	r1, [r4, #32]
 8006908:	4628      	mov	r0, r5
 800690a:	47b0      	blx	r6
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	d106      	bne.n	8006920 <__sflush_r+0x68>
 8006912:	6829      	ldr	r1, [r5, #0]
 8006914:	291d      	cmp	r1, #29
 8006916:	d848      	bhi.n	80069aa <__sflush_r+0xf2>
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <__sflush_r+0x108>)
 800691a:	40ca      	lsrs	r2, r1
 800691c:	07d6      	lsls	r6, r2, #31
 800691e:	d544      	bpl.n	80069aa <__sflush_r+0xf2>
 8006920:	2200      	movs	r2, #0
 8006922:	6062      	str	r2, [r4, #4]
 8006924:	04d9      	lsls	r1, r3, #19
 8006926:	6922      	ldr	r2, [r4, #16]
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	d504      	bpl.n	8006936 <__sflush_r+0x7e>
 800692c:	1c42      	adds	r2, r0, #1
 800692e:	d101      	bne.n	8006934 <__sflush_r+0x7c>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b903      	cbnz	r3, 8006936 <__sflush_r+0x7e>
 8006934:	6560      	str	r0, [r4, #84]	; 0x54
 8006936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006938:	602f      	str	r7, [r5, #0]
 800693a:	2900      	cmp	r1, #0
 800693c:	d0c9      	beq.n	80068d2 <__sflush_r+0x1a>
 800693e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006942:	4299      	cmp	r1, r3
 8006944:	d002      	beq.n	800694c <__sflush_r+0x94>
 8006946:	4628      	mov	r0, r5
 8006948:	f7ff fb46 	bl	8005fd8 <_free_r>
 800694c:	2000      	movs	r0, #0
 800694e:	6360      	str	r0, [r4, #52]	; 0x34
 8006950:	e7c0      	b.n	80068d4 <__sflush_r+0x1c>
 8006952:	2301      	movs	r3, #1
 8006954:	4628      	mov	r0, r5
 8006956:	47b0      	blx	r6
 8006958:	1c41      	adds	r1, r0, #1
 800695a:	d1c8      	bne.n	80068ee <__sflush_r+0x36>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0c5      	beq.n	80068ee <__sflush_r+0x36>
 8006962:	2b1d      	cmp	r3, #29
 8006964:	d001      	beq.n	800696a <__sflush_r+0xb2>
 8006966:	2b16      	cmp	r3, #22
 8006968:	d101      	bne.n	800696e <__sflush_r+0xb6>
 800696a:	602f      	str	r7, [r5, #0]
 800696c:	e7b1      	b.n	80068d2 <__sflush_r+0x1a>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	e7ad      	b.n	80068d4 <__sflush_r+0x1c>
 8006978:	690f      	ldr	r7, [r1, #16]
 800697a:	2f00      	cmp	r7, #0
 800697c:	d0a9      	beq.n	80068d2 <__sflush_r+0x1a>
 800697e:	0793      	lsls	r3, r2, #30
 8006980:	680e      	ldr	r6, [r1, #0]
 8006982:	bf08      	it	eq
 8006984:	694b      	ldreq	r3, [r1, #20]
 8006986:	600f      	str	r7, [r1, #0]
 8006988:	bf18      	it	ne
 800698a:	2300      	movne	r3, #0
 800698c:	eba6 0807 	sub.w	r8, r6, r7
 8006990:	608b      	str	r3, [r1, #8]
 8006992:	f1b8 0f00 	cmp.w	r8, #0
 8006996:	dd9c      	ble.n	80068d2 <__sflush_r+0x1a>
 8006998:	4643      	mov	r3, r8
 800699a:	463a      	mov	r2, r7
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b0      	blx	r6
 80069a4:	2800      	cmp	r0, #0
 80069a6:	dc06      	bgt.n	80069b6 <__sflush_r+0xfe>
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e78e      	b.n	80068d4 <__sflush_r+0x1c>
 80069b6:	4407      	add	r7, r0
 80069b8:	eba8 0800 	sub.w	r8, r8, r0
 80069bc:	e7e9      	b.n	8006992 <__sflush_r+0xda>
 80069be:	bf00      	nop
 80069c0:	20400001 	.word	0x20400001

080069c4 <_fflush_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	4605      	mov	r5, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	b1db      	cbz	r3, 8006a06 <_fflush_r+0x42>
 80069ce:	b118      	cbz	r0, 80069d8 <_fflush_r+0x14>
 80069d0:	6983      	ldr	r3, [r0, #24]
 80069d2:	b90b      	cbnz	r3, 80069d8 <_fflush_r+0x14>
 80069d4:	f7fe ff6c 	bl	80058b0 <__sinit>
 80069d8:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <_fflush_r+0x48>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d109      	bne.n	80069f2 <_fflush_r+0x2e>
 80069de:	686c      	ldr	r4, [r5, #4]
 80069e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e4:	b17b      	cbz	r3, 8006a06 <_fflush_r+0x42>
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ee:	f7ff bf63 	b.w	80068b8 <__sflush_r>
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <_fflush_r+0x4c>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d101      	bne.n	80069fc <_fflush_r+0x38>
 80069f8:	68ac      	ldr	r4, [r5, #8]
 80069fa:	e7f1      	b.n	80069e0 <_fflush_r+0x1c>
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_fflush_r+0x50>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	bf08      	it	eq
 8006a02:	68ec      	ldreq	r4, [r5, #12]
 8006a04:	e7ec      	b.n	80069e0 <_fflush_r+0x1c>
 8006a06:	2000      	movs	r0, #0
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006cf8 	.word	0x08006cf8
 8006a10:	08006d18 	.word	0x08006d18
 8006a14:	08006cd8 	.word	0x08006cd8

08006a18 <_lseek_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4c07      	ldr	r4, [pc, #28]	; (8006a38 <_lseek_r+0x20>)
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	4608      	mov	r0, r1
 8006a20:	4611      	mov	r1, r2
 8006a22:	2200      	movs	r2, #0
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f7fd fb7c 	bl	8004124 <_lseek>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_lseek_r+0x1e>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_lseek_r+0x1e>
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	200002e4 	.word	0x200002e4

08006a3c <__swhatbuf_r>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	460e      	mov	r6, r1
 8006a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a44:	2900      	cmp	r1, #0
 8006a46:	b096      	sub	sp, #88	; 0x58
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	da07      	bge.n	8006a5e <__swhatbuf_r+0x22>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	89b3      	ldrh	r3, [r6, #12]
 8006a54:	061a      	lsls	r2, r3, #24
 8006a56:	d410      	bmi.n	8006a7a <__swhatbuf_r+0x3e>
 8006a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5c:	e00e      	b.n	8006a7c <__swhatbuf_r+0x40>
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f000 f8c4 	bl	8006bec <_fstat_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	dbf2      	blt.n	8006a4e <__swhatbuf_r+0x12>
 8006a68:	9a01      	ldr	r2, [sp, #4]
 8006a6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a72:	425a      	negs	r2, r3
 8006a74:	415a      	adcs	r2, r3
 8006a76:	602a      	str	r2, [r5, #0]
 8006a78:	e7ee      	b.n	8006a58 <__swhatbuf_r+0x1c>
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	b016      	add	sp, #88	; 0x58
 8006a82:	bd70      	pop	{r4, r5, r6, pc}

08006a84 <__smakebuf_r>:
 8006a84:	898b      	ldrh	r3, [r1, #12]
 8006a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a88:	079d      	lsls	r5, r3, #30
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	d507      	bpl.n	8006aa0 <__smakebuf_r+0x1c>
 8006a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	6163      	str	r3, [r4, #20]
 8006a9c:	b002      	add	sp, #8
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	ab01      	add	r3, sp, #4
 8006aa2:	466a      	mov	r2, sp
 8006aa4:	f7ff ffca 	bl	8006a3c <__swhatbuf_r>
 8006aa8:	9900      	ldr	r1, [sp, #0]
 8006aaa:	4605      	mov	r5, r0
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff fae1 	bl	8006074 <_malloc_r>
 8006ab2:	b948      	cbnz	r0, 8006ac8 <__smakebuf_r+0x44>
 8006ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab8:	059a      	lsls	r2, r3, #22
 8006aba:	d4ef      	bmi.n	8006a9c <__smakebuf_r+0x18>
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	f043 0302 	orr.w	r3, r3, #2
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	e7e3      	b.n	8006a90 <__smakebuf_r+0xc>
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <__smakebuf_r+0x7c>)
 8006aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	6020      	str	r0, [r4, #0]
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	9b00      	ldr	r3, [sp, #0]
 8006ad8:	6163      	str	r3, [r4, #20]
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	6120      	str	r0, [r4, #16]
 8006ade:	b15b      	cbz	r3, 8006af8 <__smakebuf_r+0x74>
 8006ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f893 	bl	8006c10 <_isatty_r>
 8006aea:	b128      	cbz	r0, 8006af8 <__smakebuf_r+0x74>
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	431d      	orrs	r5, r3
 8006afc:	81a5      	strh	r5, [r4, #12]
 8006afe:	e7cd      	b.n	8006a9c <__smakebuf_r+0x18>
 8006b00:	08005879 	.word	0x08005879

08006b04 <__ascii_mbtowc>:
 8006b04:	b082      	sub	sp, #8
 8006b06:	b901      	cbnz	r1, 8006b0a <__ascii_mbtowc+0x6>
 8006b08:	a901      	add	r1, sp, #4
 8006b0a:	b142      	cbz	r2, 8006b1e <__ascii_mbtowc+0x1a>
 8006b0c:	b14b      	cbz	r3, 8006b22 <__ascii_mbtowc+0x1e>
 8006b0e:	7813      	ldrb	r3, [r2, #0]
 8006b10:	600b      	str	r3, [r1, #0]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	1c10      	adds	r0, r2, #0
 8006b16:	bf18      	it	ne
 8006b18:	2001      	movne	r0, #1
 8006b1a:	b002      	add	sp, #8
 8006b1c:	4770      	bx	lr
 8006b1e:	4610      	mov	r0, r2
 8006b20:	e7fb      	b.n	8006b1a <__ascii_mbtowc+0x16>
 8006b22:	f06f 0001 	mvn.w	r0, #1
 8006b26:	e7f8      	b.n	8006b1a <__ascii_mbtowc+0x16>

08006b28 <memmove>:
 8006b28:	4288      	cmp	r0, r1
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	eb01 0302 	add.w	r3, r1, r2
 8006b30:	d807      	bhi.n	8006b42 <memmove+0x1a>
 8006b32:	1e42      	subs	r2, r0, #1
 8006b34:	4299      	cmp	r1, r3
 8006b36:	d00a      	beq.n	8006b4e <memmove+0x26>
 8006b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b40:	e7f8      	b.n	8006b34 <memmove+0xc>
 8006b42:	4283      	cmp	r3, r0
 8006b44:	d9f5      	bls.n	8006b32 <memmove+0xa>
 8006b46:	1881      	adds	r1, r0, r2
 8006b48:	1ad2      	subs	r2, r2, r3
 8006b4a:	42d3      	cmn	r3, r2
 8006b4c:	d100      	bne.n	8006b50 <memmove+0x28>
 8006b4e:	bd10      	pop	{r4, pc}
 8006b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b58:	e7f7      	b.n	8006b4a <memmove+0x22>

08006b5a <__malloc_lock>:
 8006b5a:	4770      	bx	lr

08006b5c <__malloc_unlock>:
 8006b5c:	4770      	bx	lr

08006b5e <_realloc_r>:
 8006b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b60:	4607      	mov	r7, r0
 8006b62:	4614      	mov	r4, r2
 8006b64:	460e      	mov	r6, r1
 8006b66:	b921      	cbnz	r1, 8006b72 <_realloc_r+0x14>
 8006b68:	4611      	mov	r1, r2
 8006b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b6e:	f7ff ba81 	b.w	8006074 <_malloc_r>
 8006b72:	b922      	cbnz	r2, 8006b7e <_realloc_r+0x20>
 8006b74:	f7ff fa30 	bl	8005fd8 <_free_r>
 8006b78:	4625      	mov	r5, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7e:	f000 f857 	bl	8006c30 <_malloc_usable_size_r>
 8006b82:	42a0      	cmp	r0, r4
 8006b84:	d20f      	bcs.n	8006ba6 <_realloc_r+0x48>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff fa73 	bl	8006074 <_malloc_r>
 8006b8e:	4605      	mov	r5, r0
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d0f2      	beq.n	8006b7a <_realloc_r+0x1c>
 8006b94:	4631      	mov	r1, r6
 8006b96:	4622      	mov	r2, r4
 8006b98:	f7fe ff2a 	bl	80059f0 <memcpy>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7ff fa1a 	bl	8005fd8 <_free_r>
 8006ba4:	e7e9      	b.n	8006b7a <_realloc_r+0x1c>
 8006ba6:	4635      	mov	r5, r6
 8006ba8:	e7e7      	b.n	8006b7a <_realloc_r+0x1c>
	...

08006bac <_read_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4c07      	ldr	r4, [pc, #28]	; (8006bcc <_read_r+0x20>)
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f7fd fa52 	bl	8004064 <_read>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_read_r+0x1e>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_read_r+0x1e>
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	200002e4 	.word	0x200002e4

08006bd0 <__ascii_wctomb>:
 8006bd0:	b149      	cbz	r1, 8006be6 <__ascii_wctomb+0x16>
 8006bd2:	2aff      	cmp	r2, #255	; 0xff
 8006bd4:	bf85      	ittet	hi
 8006bd6:	238a      	movhi	r3, #138	; 0x8a
 8006bd8:	6003      	strhi	r3, [r0, #0]
 8006bda:	700a      	strbls	r2, [r1, #0]
 8006bdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006be0:	bf98      	it	ls
 8006be2:	2001      	movls	r0, #1
 8006be4:	4770      	bx	lr
 8006be6:	4608      	mov	r0, r1
 8006be8:	4770      	bx	lr
	...

08006bec <_fstat_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4c07      	ldr	r4, [pc, #28]	; (8006c0c <_fstat_r+0x20>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	f7fd fa78 	bl	80040ee <_fstat>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d102      	bne.n	8006c08 <_fstat_r+0x1c>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	b103      	cbz	r3, 8006c08 <_fstat_r+0x1c>
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200002e4 	.word	0x200002e4

08006c10 <_isatty_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4c06      	ldr	r4, [pc, #24]	; (8006c2c <_isatty_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4605      	mov	r5, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	f7fd fa77 	bl	800410e <_isatty>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_isatty_r+0x1a>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_isatty_r+0x1a>
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	200002e4 	.word	0x200002e4

08006c30 <_malloc_usable_size_r>:
 8006c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c34:	1f18      	subs	r0, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfbc      	itt	lt
 8006c3a:	580b      	ldrlt	r3, [r1, r0]
 8006c3c:	18c0      	addlt	r0, r0, r3
 8006c3e:	4770      	bx	lr

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
