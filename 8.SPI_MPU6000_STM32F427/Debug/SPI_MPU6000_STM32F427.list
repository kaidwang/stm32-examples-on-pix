
SPI_MPU6000_STM32F427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004424  08004424  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  0800449c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800449c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e96c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002260  00000000  00000000  0002ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231a4  00000000  00000000  00032878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be74  00000000  00000000  00055a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8a44  00000000  00000000  00061890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a2d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  0013a350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080043b0 	.word	0x080043b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080043b0 	.word	0x080043b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b972 	b.w	8000904 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9e08      	ldr	r6, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	4688      	mov	r8, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14b      	bne.n	80006de <__udivmoddi4+0xa6>
 8000646:	428a      	cmp	r2, r1
 8000648:	4615      	mov	r5, r2
 800064a:	d967      	bls.n	800071c <__udivmoddi4+0xe4>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b14a      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000652:	f1c2 0720 	rsb	r7, r2, #32
 8000656:	fa01 f302 	lsl.w	r3, r1, r2
 800065a:	fa20 f707 	lsr.w	r7, r0, r7
 800065e:	4095      	lsls	r5, r2
 8000660:	ea47 0803 	orr.w	r8, r7, r3
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000670:	fa1f fc85 	uxth.w	ip, r5
 8000674:	fb0e 8817 	mls	r8, lr, r7, r8
 8000678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067c:	fb07 f10c 	mul.w	r1, r7, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f107 30ff 	add.w	r0, r7, #4294967295
 800068a:	f080 811b 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8118 	bls.w	80008c4 <__udivmoddi4+0x28c>
 8000694:	3f02      	subs	r7, #2
 8000696:	442b      	add	r3, r5
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0fe 	udiv	r0, r3, lr
 80006a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ac:	45a4      	cmp	ip, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	192c      	adds	r4, r5, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8107 	bcs.w	80008c8 <__udivmoddi4+0x290>
 80006ba:	45a4      	cmp	ip, r4
 80006bc:	f240 8104 	bls.w	80008c8 <__udivmoddi4+0x290>
 80006c0:	3802      	subs	r0, #2
 80006c2:	442c      	add	r4, r5
 80006c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006c8:	eba4 040c 	sub.w	r4, r4, ip
 80006cc:	2700      	movs	r7, #0
 80006ce:	b11e      	cbz	r6, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c6 4300 	strd	r4, r3, [r6]
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d909      	bls.n	80006f6 <__udivmoddi4+0xbe>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	f000 80eb 	beq.w	80008be <__udivmoddi4+0x286>
 80006e8:	2700      	movs	r7, #0
 80006ea:	e9c6 0100 	strd	r0, r1, [r6]
 80006ee:	4638      	mov	r0, r7
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	fab3 f783 	clz	r7, r3
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d147      	bne.n	800078e <__udivmoddi4+0x156>
 80006fe:	428b      	cmp	r3, r1
 8000700:	d302      	bcc.n	8000708 <__udivmoddi4+0xd0>
 8000702:	4282      	cmp	r2, r0
 8000704:	f200 80fa 	bhi.w	80008fc <__udivmoddi4+0x2c4>
 8000708:	1a84      	subs	r4, r0, r2
 800070a:	eb61 0303 	sbc.w	r3, r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	4698      	mov	r8, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d0e0      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000716:	e9c6 4800 	strd	r4, r8, [r6]
 800071a:	e7dd      	b.n	80006d8 <__udivmoddi4+0xa0>
 800071c:	b902      	cbnz	r2, 8000720 <__udivmoddi4+0xe8>
 800071e:	deff      	udf	#255	; 0xff
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	2a00      	cmp	r2, #0
 8000726:	f040 808f 	bne.w	8000848 <__udivmoddi4+0x210>
 800072a:	1b49      	subs	r1, r1, r5
 800072c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000730:	fa1f f885 	uxth.w	r8, r5
 8000734:	2701      	movs	r7, #1
 8000736:	fbb1 fcfe 	udiv	ip, r1, lr
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000744:	fb08 f10c 	mul.w	r1, r8, ip
 8000748:	4299      	cmp	r1, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x124>
 800074c:	18eb      	adds	r3, r5, r3
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x122>
 8000754:	4299      	cmp	r1, r3
 8000756:	f200 80cd 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 800075a:	4684      	mov	ip, r0
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1410 	mls	r4, lr, r0, r1
 8000768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x14c>
 8000774:	192c      	adds	r4, r5, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x14a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80b6 	bhi.w	80008ee <__udivmoddi4+0x2b6>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e79f      	b.n	80006ce <__udivmoddi4+0x96>
 800078e:	f1c7 0c20 	rsb	ip, r7, #32
 8000792:	40bb      	lsls	r3, r7
 8000794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000798:	ea4e 0e03 	orr.w	lr, lr, r3
 800079c:	fa01 f407 	lsl.w	r4, r1, r7
 80007a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ac:	4325      	orrs	r5, r4
 80007ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80007b2:	0c2c      	lsrs	r4, r5, #16
 80007b4:	fb08 3319 	mls	r3, r8, r9, r3
 80007b8:	fa1f fa8e 	uxth.w	sl, lr
 80007bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007c0:	fb09 f40a 	mul.w	r4, r9, sl
 80007c4:	429c      	cmp	r4, r3
 80007c6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ca:	fa00 f107 	lsl.w	r1, r0, r7
 80007ce:	d90b      	bls.n	80007e8 <__udivmoddi4+0x1b0>
 80007d0:	eb1e 0303 	adds.w	r3, lr, r3
 80007d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007d8:	f080 8087 	bcs.w	80008ea <__udivmoddi4+0x2b2>
 80007dc:	429c      	cmp	r4, r3
 80007de:	f240 8084 	bls.w	80008ea <__udivmoddi4+0x2b2>
 80007e2:	f1a9 0902 	sub.w	r9, r9, #2
 80007e6:	4473      	add	r3, lr
 80007e8:	1b1b      	subs	r3, r3, r4
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f0:	fb08 3310 	mls	r3, r8, r0, r3
 80007f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007fc:	45a2      	cmp	sl, r4
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x1da>
 8000800:	eb1e 0404 	adds.w	r4, lr, r4
 8000804:	f100 33ff 	add.w	r3, r0, #4294967295
 8000808:	d26b      	bcs.n	80008e2 <__udivmoddi4+0x2aa>
 800080a:	45a2      	cmp	sl, r4
 800080c:	d969      	bls.n	80008e2 <__udivmoddi4+0x2aa>
 800080e:	3802      	subs	r0, #2
 8000810:	4474      	add	r4, lr
 8000812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000816:	fba0 8902 	umull	r8, r9, r0, r2
 800081a:	eba4 040a 	sub.w	r4, r4, sl
 800081e:	454c      	cmp	r4, r9
 8000820:	46c2      	mov	sl, r8
 8000822:	464b      	mov	r3, r9
 8000824:	d354      	bcc.n	80008d0 <__udivmoddi4+0x298>
 8000826:	d051      	beq.n	80008cc <__udivmoddi4+0x294>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d069      	beq.n	8000900 <__udivmoddi4+0x2c8>
 800082c:	ebb1 050a 	subs.w	r5, r1, sl
 8000830:	eb64 0403 	sbc.w	r4, r4, r3
 8000834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000838:	40fd      	lsrs	r5, r7
 800083a:	40fc      	lsrs	r4, r7
 800083c:	ea4c 0505 	orr.w	r5, ip, r5
 8000840:	e9c6 5400 	strd	r5, r4, [r6]
 8000844:	2700      	movs	r7, #0
 8000846:	e747      	b.n	80006d8 <__udivmoddi4+0xa0>
 8000848:	f1c2 0320 	rsb	r3, r2, #32
 800084c:	fa20 f703 	lsr.w	r7, r0, r3
 8000850:	4095      	lsls	r5, r2
 8000852:	fa01 f002 	lsl.w	r0, r1, r2
 8000856:	fa21 f303 	lsr.w	r3, r1, r3
 800085a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800085e:	4338      	orrs	r0, r7
 8000860:	0c01      	lsrs	r1, r0, #16
 8000862:	fbb3 f7fe 	udiv	r7, r3, lr
 8000866:	fa1f f885 	uxth.w	r8, r5
 800086a:	fb0e 3317 	mls	r3, lr, r7, r3
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb07 f308 	mul.w	r3, r7, r8
 8000876:	428b      	cmp	r3, r1
 8000878:	fa04 f402 	lsl.w	r4, r4, r2
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x256>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f107 3cff 	add.w	ip, r7, #4294967295
 8000884:	d22f      	bcs.n	80008e6 <__udivmoddi4+0x2ae>
 8000886:	428b      	cmp	r3, r1
 8000888:	d92d      	bls.n	80008e6 <__udivmoddi4+0x2ae>
 800088a:	3f02      	subs	r7, #2
 800088c:	4429      	add	r1, r5
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	b281      	uxth	r1, r0
 8000892:	fbb3 f0fe 	udiv	r0, r3, lr
 8000896:	fb0e 3310 	mls	r3, lr, r0, r3
 800089a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800089e:	fb00 f308 	mul.w	r3, r0, r8
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x27e>
 80008a6:	1869      	adds	r1, r5, r1
 80008a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ac:	d217      	bcs.n	80008de <__udivmoddi4+0x2a6>
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d915      	bls.n	80008de <__udivmoddi4+0x2a6>
 80008b2:	3802      	subs	r0, #2
 80008b4:	4429      	add	r1, r5
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008bc:	e73b      	b.n	8000736 <__udivmoddi4+0xfe>
 80008be:	4637      	mov	r7, r6
 80008c0:	4630      	mov	r0, r6
 80008c2:	e709      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c4:	4607      	mov	r7, r0
 80008c6:	e6e7      	b.n	8000698 <__udivmoddi4+0x60>
 80008c8:	4618      	mov	r0, r3
 80008ca:	e6fb      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008cc:	4541      	cmp	r1, r8
 80008ce:	d2ab      	bcs.n	8000828 <__udivmoddi4+0x1f0>
 80008d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008d4:	eb69 020e 	sbc.w	r2, r9, lr
 80008d8:	3801      	subs	r0, #1
 80008da:	4613      	mov	r3, r2
 80008dc:	e7a4      	b.n	8000828 <__udivmoddi4+0x1f0>
 80008de:	4660      	mov	r0, ip
 80008e0:	e7e9      	b.n	80008b6 <__udivmoddi4+0x27e>
 80008e2:	4618      	mov	r0, r3
 80008e4:	e795      	b.n	8000812 <__udivmoddi4+0x1da>
 80008e6:	4667      	mov	r7, ip
 80008e8:	e7d1      	b.n	800088e <__udivmoddi4+0x256>
 80008ea:	4681      	mov	r9, r0
 80008ec:	e77c      	b.n	80007e8 <__udivmoddi4+0x1b0>
 80008ee:	3802      	subs	r0, #2
 80008f0:	442c      	add	r4, r5
 80008f2:	e747      	b.n	8000784 <__udivmoddi4+0x14c>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	442b      	add	r3, r5
 80008fa:	e72f      	b.n	800075c <__udivmoddi4+0x124>
 80008fc:	4638      	mov	r0, r7
 80008fe:	e708      	b.n	8000712 <__udivmoddi4+0xda>
 8000900:	4637      	mov	r7, r6
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0xa0>

08000904 <__aeabi_idiv0>:
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_Init+0x40>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_Init+0x40>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x40>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f94d 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f002 ff6a 	bl	8003814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023c00 	.word	0x40023c00

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f965 	bl	8000c3a <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f92d 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000000 	.word	0x20000000

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000004 	.word	0x20000004
 80009d0:	2000009c 	.word	0x2000009c

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000009c 	.word	0x2000009c

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff ffee 	bl	80009d4 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_Delay+0x40>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffde 	bl	80009d4 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000004 	.word	0x20000004

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff8e 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff29 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff3e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff8e 	bl	8000b24 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff31 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d004      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e00c      	b.n	8000c8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e177      	b.n	8000fa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8166 	bne.w	8000f9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_GPIO_Init+0x5a>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d007      	beq.n	8000cf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce6:	2b11      	cmp	r3, #17
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0xfc>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80c0 	beq.w	8000f9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b65      	ldr	r3, [pc, #404]	; (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a64      	ldr	r2, [pc, #400]	; (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a60      	ldr	r2, [pc, #384]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d037      	beq.n	8000ed6 <HAL_GPIO_Init+0x23e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a56      	ldr	r2, [pc, #344]	; (8000fc4 <HAL_GPIO_Init+0x32c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d031      	beq.n	8000ed2 <HAL_GPIO_Init+0x23a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a55      	ldr	r2, [pc, #340]	; (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d02b      	beq.n	8000ece <HAL_GPIO_Init+0x236>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <HAL_GPIO_Init+0x334>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x232>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <HAL_GPIO_Init+0x338>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x33c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x22a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x340>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x344>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_GPIO_Init+0x348>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <HAL_GPIO_Init+0x34c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000eae:	2309      	movs	r3, #9
 8000eb0:	e012      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	e010      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00e      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00c      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00a      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x240>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee8:	4934      	ldr	r1, [pc, #208]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1a:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f20:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f ae84 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	3724      	adds	r7, #36	; 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40022400 	.word	0x40022400
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104c:	f7ff fcc2 	bl	80009d4 <HAL_GetTick>
 8001050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001052:	e009      	b.n	8001068 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001054:	f7ff fcbe 	bl	80009d4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d901      	bls.n	8001068 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e01f      	b.n	80010a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d1ee      	bne.n	8001054 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff fcaa 	bl	80009d4 <HAL_GetTick>
 8001080:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001082:	e009      	b.n	8001098 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001084:	f7ff fca6 	bl	80009d4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001092:	d901      	bls.n	8001098 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e007      	b.n	80010a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010a4:	d1ee      	bne.n	8001084 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	420e0040 	.word	0x420e0040
 80010b8:	40007000 	.word	0x40007000
 80010bc:	420e0044 	.word	0x420e0044

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e25b      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010de:	4ba3      	ldr	r3, [pc, #652]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4ba0      	ldr	r3, [pc, #640]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b9d      	ldr	r3, [pc, #628]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b99      	ldr	r3, [pc, #612]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d157      	bne.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e236      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x74>
 8001126:	4b91      	ldr	r3, [pc, #580]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a90      	ldr	r2, [pc, #576]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a8a      	ldr	r2, [pc, #552]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b88      	ldr	r3, [pc, #544]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a87      	ldr	r2, [pc, #540]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a83      	ldr	r2, [pc, #524]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b81      	ldr	r3, [pc, #516]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a80      	ldr	r2, [pc, #512]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc2c 	bl	80009d4 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fc28 	bl	80009d4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1fb      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b76      	ldr	r3, [pc, #472]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xc0>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc18 	bl	80009d4 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc14 	bl	80009d4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1e7      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b6c      	ldr	r3, [pc, #432]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b62      	ldr	r3, [pc, #392]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b5f      	ldr	r3, [pc, #380]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1bb      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b56      	ldr	r3, [pc, #344]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4952      	ldr	r1, [pc, #328]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_RCC_OscConfig+0x2b0>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fbcd 	bl	80009d4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fbc9 	bl	80009d4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e19c      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4940      	ldr	r1, [pc, #256]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <HAL_RCC_OscConfig+0x2b0>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fbac 	bl	80009d4 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fba8 	bl	80009d4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e17b      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d030      	beq.n	800130c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x2b4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fb8c 	bl	80009d4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fb88 	bl	80009d4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e15b      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x200>
 80012de:	e015      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_RCC_OscConfig+0x2b4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fb75 	bl	80009d4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fb71 	bl	80009d4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e144      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a0 	beq.w	800145a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10f      	bne.n	800134a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_RCC_OscConfig+0x2ac>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x2b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d121      	bne.n	800139a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_RCC_OscConfig+0x2b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_RCC_OscConfig+0x2b8>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb37 	bl	80009d4 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	e011      	b.n	800138e <HAL_RCC_OscConfig+0x2ce>
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	42470000 	.word	0x42470000
 8001374:	42470e80 	.word	0x42470e80
 8001378:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137c:	f7ff fb2a 	bl	80009d4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0fd      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2f0>
 80013a2:	4b7d      	ldr	r3, [pc, #500]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a7c      	ldr	r2, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	e01c      	b.n	80013ea <HAL_RCC_OscConfig+0x32a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x312>
 80013b8:	4b77      	ldr	r3, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a76      	ldr	r2, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
 80013c4:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a73      	ldr	r2, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_OscConfig+0x32a>
 80013d2:	4b71      	ldr	r3, [pc, #452]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a70      	ldr	r2, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a6d      	ldr	r2, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d015      	beq.n	800141e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff faef 	bl	80009d4 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff faeb 	bl	80009d4 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0bc      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0ee      	beq.n	80013fa <HAL_RCC_OscConfig+0x33a>
 800141c:	e014      	b.n	8001448 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fad9 	bl	80009d4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fad5 	bl	80009d4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0a6      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143c:	4b56      	ldr	r3, [pc, #344]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ee      	bne.n	8001426 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144e:	4b52      	ldr	r3, [pc, #328]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a51      	ldr	r2, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8092 	beq.w	8001588 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d05c      	beq.n	800152a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d141      	bne.n	80014fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <HAL_RCC_OscConfig+0x4dc>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff faa9 	bl	80009d4 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff faa5 	bl	80009d4 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e078      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	3b01      	subs	r3, #1
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	061b      	lsls	r3, r3, #24
 80014c8:	4933      	ldr	r1, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x4dc>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa7e 	bl	80009d4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa7a 	bl	80009d4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e04d      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x41c>
 80014fa:	e045      	b.n	8001588 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x4dc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fa67 	bl	80009d4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fa63 	bl	80009d4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e036      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x44a>
 8001528:	e02e      	b.n	8001588 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e029      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_RCC_OscConfig+0x4d8>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	429a      	cmp	r2, r3
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d115      	bne.n	8001584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800155e:	4013      	ands	r3, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001564:	4293      	cmp	r3, r2
 8001566:	d10d      	bne.n	8001584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40007000 	.word	0x40007000
 8001598:	40023800 	.word	0x40023800
 800159c:	42470060 	.word	0x42470060

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff f9a0 	bl	80009d4 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff f99c 	bl	80009d4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4601      	mov	r1, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	fa21 f303 	lsr.w	r3, r1, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f900 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	080043d0 	.word	0x080043d0
 8001764:	20000008 	.word	0x20000008
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d007      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x32>
 800178e:	2b08      	cmp	r3, #8
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 808d 	bne.w	80018b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800179a:	60bb      	str	r3, [r7, #8]
       break;
 800179c:	e08c      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017a0:	60bb      	str	r3, [r7, #8]
      break;
 80017a2:	e089      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d023      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	f04f 0400 	mov.w	r4, #0
 80017c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	ea03 0501 	and.w	r5, r3, r1
 80017d0:	ea04 0602 	and.w	r6, r4, r2
 80017d4:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017d6:	fb02 f106 	mul.w	r1, r2, r6
 80017da:	2200      	movs	r2, #0
 80017dc:	fb02 f205 	mul.w	r2, r2, r5
 80017e0:	440a      	add	r2, r1
 80017e2:	493a      	ldr	r1, [pc, #232]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017e4:	fba5 0101 	umull	r0, r1, r5, r1
 80017e8:	1853      	adds	r3, r2, r1
 80017ea:	4619      	mov	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f04f 0400 	mov.w	r4, #0
 80017f2:	461a      	mov	r2, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	f7fe ff07 	bl	8000608 <__aeabi_uldivmod>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e049      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	f04f 0400 	mov.w	r4, #0
 800180c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	ea03 0501 	and.w	r5, r3, r1
 8001818:	ea04 0602 	and.w	r6, r4, r2
 800181c:	4629      	mov	r1, r5
 800181e:	4632      	mov	r2, r6
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f04f 0400 	mov.w	r4, #0
 8001828:	0154      	lsls	r4, r2, #5
 800182a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800182e:	014b      	lsls	r3, r1, #5
 8001830:	4619      	mov	r1, r3
 8001832:	4622      	mov	r2, r4
 8001834:	1b49      	subs	r1, r1, r5
 8001836:	eb62 0206 	sbc.w	r2, r2, r6
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f04f 0400 	mov.w	r4, #0
 8001842:	0194      	lsls	r4, r2, #6
 8001844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001848:	018b      	lsls	r3, r1, #6
 800184a:	1a5b      	subs	r3, r3, r1
 800184c:	eb64 0402 	sbc.w	r4, r4, r2
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	00e2      	lsls	r2, r4, #3
 800185a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800185e:	00d9      	lsls	r1, r3, #3
 8001860:	460b      	mov	r3, r1
 8001862:	4614      	mov	r4, r2
 8001864:	195b      	adds	r3, r3, r5
 8001866:	eb44 0406 	adc.w	r4, r4, r6
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	02a2      	lsls	r2, r4, #10
 8001874:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001878:	0299      	lsls	r1, r3, #10
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	4618      	mov	r0, r3
 8001880:	4621      	mov	r1, r4
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f04f 0400 	mov.w	r4, #0
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	f7fe febc 	bl	8000608 <__aeabi_uldivmod>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	3301      	adds	r3, #1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	60bb      	str	r3, [r7, #8]
      break;
 80018b0:	e002      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018b4:	60bb      	str	r3, [r7, #8]
      break;
 80018b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b8:	68bb      	ldr	r3, [r7, #8]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	016e3600 	.word	0x016e3600

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4601      	mov	r1, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	080043e0 	.word	0x080043e0

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001914:	f7ff ffdc 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001918:	4601      	mov	r1, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0b5b      	lsrs	r3, r3, #13
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	080043e0 	.word	0x080043e0

08001938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e056      	b.n	80019f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 ff7d 	bl	8003864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001980:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	f003 0104 	and.w	r1, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_SPI_TransmitReceive+0x26>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e18a      	b.n	8001d3c <HAL_SPI_TransmitReceive+0x33c>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a2e:	f7fe ffd1 	bl	80009d4 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00f      	beq.n	8001a70 <HAL_SPI_TransmitReceive+0x70>
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a56:	d107      	bne.n	8001a68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <HAL_SPI_TransmitReceive+0x68>
 8001a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d003      	beq.n	8001a70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a6e:	e15b      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_SPI_TransmitReceive+0x82>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_SPI_TransmitReceive+0x82>
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a88:	e14e      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d003      	beq.n	8001a9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	887a      	ldrh	r2, [r7, #2]
 8001ac6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	2b40      	cmp	r3, #64	; 0x40
 8001ae0:	d007      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001afa:	d178      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_SPI_TransmitReceive+0x10a>
 8001b04:	8b7b      	ldrh	r3, [r7, #26]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d166      	bne.n	8001bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	1c9a      	adds	r2, r3, #2
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b2e:	e053      	b.n	8001bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d11b      	bne.n	8001b76 <HAL_SPI_TransmitReceive+0x176>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d016      	beq.n	8001b76 <HAL_SPI_TransmitReceive+0x176>
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d113      	bne.n	8001b76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	1c9a      	adds	r2, r3, #2
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d119      	bne.n	8001bb8 <HAL_SPI_TransmitReceive+0x1b8>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d014      	beq.n	8001bb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	1c9a      	adds	r2, r3, #2
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bb8:	f7fe ff0c 	bl	80009d4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_SPI_TransmitReceive+0x1d8>
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d003      	beq.n	8001bd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001bd6:	e0a7      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1a6      	bne.n	8001b30 <HAL_SPI_TransmitReceive+0x130>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1a1      	bne.n	8001b30 <HAL_SPI_TransmitReceive+0x130>
 8001bec:	e07c      	b.n	8001ce8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_SPI_TransmitReceive+0x1fc>
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d16b      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	330c      	adds	r3, #12
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c22:	e057      	b.n	8001cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d11c      	bne.n	8001c6c <HAL_SPI_TransmitReceive+0x26c>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d017      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x26c>
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d114      	bne.n	8001c6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d119      	bne.n	8001cae <HAL_SPI_TransmitReceive+0x2ae>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001caa:	2301      	movs	r3, #1
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cae:	f7fe fe91 	bl	80009d4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d803      	bhi.n	8001cc6 <HAL_SPI_TransmitReceive+0x2c6>
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d102      	bne.n	8001ccc <HAL_SPI_TransmitReceive+0x2cc>
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cd2:	e029      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1a2      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x224>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d19d      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f893 	bl	8001e18 <SPI_EndRxTxTransaction>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001d04:	e010      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10b      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	e000      	b.n	8001d28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3730      	adds	r7, #48	; 0x30
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d54:	e04c      	b.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d048      	beq.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d5e:	f7fe fe39 	bl	80009d4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d902      	bls.n	8001d74 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d13d      	bne.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d8c:	d111      	bne.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d96:	d004      	beq.n	8001da2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d107      	bne.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	d10f      	bne.n	8001ddc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e00f      	b.n	8001e10 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d1a3      	bne.n	8001d56 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <SPI_EndRxTxTransaction+0x7c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <SPI_EndRxTxTransaction+0x80>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0d5b      	lsrs	r3, r3, #21
 8001e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e42:	d112      	bne.n	8001e6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff ff78 	bl	8001d44 <SPI_WaitFlagStateUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0220 	orr.w	r2, r3, #32
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e00f      	b.n	8001e8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d0f2      	beq.n	8001e6a <SPI_EndRxTxTransaction+0x52>
 8001e84:	e000      	b.n	8001e88 <SPI_EndRxTxTransaction+0x70>
        break;
 8001e86:	bf00      	nop
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	165e9f81 	.word	0x165e9f81

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01d      	b.n	8001eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f001 fd16 	bl	80038f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 f910 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_TIM_Base_Stop+0x40>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	f240 4344 	movw	r3, #1092	; 0x444
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_Base_Stop+0x40>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_TIM_ConfigClockSource+0x18>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0a6      	b.n	80020f6 <HAL_TIM_ConfigClockSource+0x166>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d067      	beq.n	80020b0 <HAL_TIM_ConfigClockSource+0x120>
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d80b      	bhi.n	8001ffc <HAL_TIM_ConfigClockSource+0x6c>
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d073      	beq.n	80020d0 <HAL_TIM_ConfigClockSource+0x140>
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d802      	bhi.n	8001ff2 <HAL_TIM_ConfigClockSource+0x62>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d06f      	beq.n	80020d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ff0:	e078      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d06c      	beq.n	80020d0 <HAL_TIM_ConfigClockSource+0x140>
 8001ff6:	2b30      	cmp	r3, #48	; 0x30
 8001ff8:	d06a      	beq.n	80020d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001ffa:	e073      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ffc:	2b70      	cmp	r3, #112	; 0x70
 8001ffe:	d00d      	beq.n	800201c <HAL_TIM_ConfigClockSource+0x8c>
 8002000:	2b70      	cmp	r3, #112	; 0x70
 8002002:	d804      	bhi.n	800200e <HAL_TIM_ConfigClockSource+0x7e>
 8002004:	2b50      	cmp	r3, #80	; 0x50
 8002006:	d033      	beq.n	8002070 <HAL_TIM_ConfigClockSource+0xe0>
 8002008:	2b60      	cmp	r3, #96	; 0x60
 800200a:	d041      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800200c:	e06a      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	d066      	beq.n	80020e2 <HAL_TIM_ConfigClockSource+0x152>
 8002014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002018:	d017      	beq.n	800204a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800201a:	e063      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f000 f982 	bl	8002334 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800203e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]
      break;
 8002048:	e04c      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f000 f96b 	bl	8002334 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206c:	609a      	str	r2, [r3, #8]
      break;
 800206e:	e039      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	461a      	mov	r2, r3
 800207e:	f000 f8df 	bl	8002240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2150      	movs	r1, #80	; 0x50
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f938 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 800208e:	e029      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	461a      	mov	r2, r3
 800209e:	f000 f8fe 	bl	800229e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2160      	movs	r1, #96	; 0x60
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f928 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 80020ae:	e019      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	461a      	mov	r2, r3
 80020be:	f000 f8bf 	bl	8002240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f918 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 80020ce:	e009      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 f90f 	bl	80022fe <TIM_ITRx_SetConfig>
      break;
 80020e0:	e000      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80020e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3c      	ldr	r2, [pc, #240]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <TIM_Base_SetConfig+0x128>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <TIM_Base_SetConfig+0x12c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_Base_SetConfig+0x130>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_Base_SetConfig+0x134>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <TIM_Base_SetConfig+0x138>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <TIM_Base_SetConfig+0x13c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <TIM_Base_SetConfig+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0xf8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800
 8002220:	40000c00 	.word	0x40000c00
 8002224:	40010400 	.word	0x40010400
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800
 8002234:	40001800 	.word	0x40001800
 8002238:	40001c00 	.word	0x40001c00
 800223c:	40002000 	.word	0x40002000

08002240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f023 0201 	bic.w	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f023 030a 	bic.w	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	621a      	str	r2, [r3, #32]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800229e:	b480      	push	{r7}
 80022a0:	b087      	sub	sp, #28
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f023 0210 	bic.w	r2, r3, #16
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	031b      	lsls	r3, r3, #12
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	621a      	str	r2, [r3, #32]
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	f043 0307 	orr.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800234e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	021a      	lsls	r2, r3, #8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	431a      	orrs	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	609a      	str	r2, [r3, #8]
}
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002388:	2302      	movs	r3, #2
 800238a:	e05a      	b.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d8:	d01d      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10c      	bne.n	8002430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40010400 	.word	0x40010400
 8002464:	40014000 	.word	0x40014000
 8002468:	40001800 	.word	0x40001800

0800246c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e03f      	b.n	80024fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f001 fa4e 	bl	8003934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fb4b 	bl	8002b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af02      	add	r7, sp, #8
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	f040 8083 	bne.w	800262e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Transmit+0x2e>
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e07b      	b.n	8002630 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_UART_Transmit+0x40>
 8002542:	2302      	movs	r3, #2
 8002544:	e074      	b.n	8002630 <HAL_UART_Transmit+0x12a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800255c:	f7fe fa3a 	bl	80009d4 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002576:	e042      	b.n	80025fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	d122      	bne.n	80025d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f96a 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e042      	b.n	8002630 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3302      	adds	r3, #2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	e017      	b.n	80025fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e013      	b.n	80025fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f947 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e01f      	b.n	8002630 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1b7      	bne.n	8002578 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f92e 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e006      	b.n	8002630 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9e0 	bl	8002a48 <UART_Receive_IT>
      return;
 8002688:	e0d1      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80b0 	beq.w	80027f2 <HAL_UART_IRQHandler+0x1ba>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_UART_IRQHandler+0x70>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a5 	beq.w	80027f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00f      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_UART_IRQHandler+0xee>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	f043 0208 	orr.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d078      	beq.n	800282c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_UART_IRQHandler+0x11c>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f97a 	bl	8002a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_UART_IRQHandler+0x144>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d031      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8c3 	bl	8002908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d123      	bne.n	80027d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_UART_IRQHandler+0x1fc>)
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fa4c 	bl	8000c52 <HAL_DMA_Abort_IT>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ca:	4610      	mov	r0, r2
 80027cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ce:	e00e      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f845 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d6:	e00a      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f841 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027de:	e006      	b.n	80027ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f83d 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027ec:	e01e      	b.n	800282c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ee:	bf00      	nop
    return;
 80027f0:	e01c      	b.n	800282c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_UART_IRQHandler+0x1d6>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8b0 	bl	800296c <UART_Transmit_IT>
    return;
 800280c:	e00f      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_UART_IRQHandler+0x1f6>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8f8 	bl	8002a18 <UART_EndTransmit_IT>
    return;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_UART_IRQHandler+0x1f6>
    return;
 800282c:	bf00      	nop
  }
}
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08002945 	.word	0x08002945

08002838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	e02c      	b.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d028      	beq.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002894:	f7fe f89e 	bl	80009d4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d21d      	bcs.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00f      	b.n	8002900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d0c3      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800291e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ff7e 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b21      	cmp	r3, #33	; 0x21
 800297e:	d144      	bne.n	8002a0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d11a      	bne.n	80029c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	621a      	str	r2, [r3, #32]
 80029b2:	e00e      	b.n	80029d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	e008      	b.n	80029d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6211      	str	r1, [r2, #32]
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4619      	mov	r1, r3
 80029e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fefd 	bl	8002838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b22      	cmp	r3, #34	; 0x22
 8002a5a:	d171      	bne.n	8002b40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a64:	d123      	bne.n	8002aae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10e      	bne.n	8002a92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e029      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002aac:	e01b      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6858      	ldr	r0, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6291      	str	r1, [r2, #40]	; 0x28
 8002ac6:	b2c2      	uxtb	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e00c      	b.n	8002ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	1c58      	adds	r0, r3, #1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	6288      	str	r0, [r1, #40]	; 0x28
 8002ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4619      	mov	r1, r3
 8002af4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d120      	bne.n	8002b3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0220 	bic.w	r2, r2, #32
 8002b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe8a 	bl	800284c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e002      	b.n	8002b42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e000      	b.n	8002b42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bba:	f040 818b 	bne.w	8002ed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4ac1      	ldr	r2, [pc, #772]	; (8002ec8 <UART_SetConfig+0x37c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d005      	beq.n	8002bd4 <UART_SetConfig+0x88>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4abf      	ldr	r2, [pc, #764]	; (8002ecc <UART_SetConfig+0x380>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f040 80bd 	bne.w	8002d4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7fe fe9c 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	461d      	mov	r5, r3
 8002bde:	f04f 0600 	mov.w	r6, #0
 8002be2:	46a8      	mov	r8, r5
 8002be4:	46b1      	mov	r9, r6
 8002be6:	eb18 0308 	adds.w	r3, r8, r8
 8002bea:	eb49 0409 	adc.w	r4, r9, r9
 8002bee:	4698      	mov	r8, r3
 8002bf0:	46a1      	mov	r9, r4
 8002bf2:	eb18 0805 	adds.w	r8, r8, r5
 8002bf6:	eb49 0906 	adc.w	r9, r9, r6
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c0e:	4688      	mov	r8, r1
 8002c10:	4691      	mov	r9, r2
 8002c12:	eb18 0005 	adds.w	r0, r8, r5
 8002c16:	eb49 0106 	adc.w	r1, r9, r6
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	461d      	mov	r5, r3
 8002c20:	f04f 0600 	mov.w	r6, #0
 8002c24:	196b      	adds	r3, r5, r5
 8002c26:	eb46 0406 	adc.w	r4, r6, r6
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f7fd fceb 	bl	8000608 <__aeabi_uldivmod>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	461a      	mov	r2, r3
 8002c38:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <UART_SetConfig+0x384>)
 8002c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	461d      	mov	r5, r3
 8002c48:	f04f 0600 	mov.w	r6, #0
 8002c4c:	46a9      	mov	r9, r5
 8002c4e:	46b2      	mov	sl, r6
 8002c50:	eb19 0309 	adds.w	r3, r9, r9
 8002c54:	eb4a 040a 	adc.w	r4, sl, sl
 8002c58:	4699      	mov	r9, r3
 8002c5a:	46a2      	mov	sl, r4
 8002c5c:	eb19 0905 	adds.w	r9, r9, r5
 8002c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c78:	4689      	mov	r9, r1
 8002c7a:	4692      	mov	sl, r2
 8002c7c:	eb19 0005 	adds.w	r0, r9, r5
 8002c80:	eb4a 0106 	adc.w	r1, sl, r6
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	461d      	mov	r5, r3
 8002c8a:	f04f 0600 	mov.w	r6, #0
 8002c8e:	196b      	adds	r3, r5, r5
 8002c90:	eb46 0406 	adc.w	r4, r6, r6
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	f7fd fcb6 	bl	8000608 <__aeabi_uldivmod>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <UART_SetConfig+0x384>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a86      	ldr	r2, [pc, #536]	; (8002ed0 <UART_SetConfig+0x384>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc4:	4498      	add	r8, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	461d      	mov	r5, r3
 8002cca:	f04f 0600 	mov.w	r6, #0
 8002cce:	46a9      	mov	r9, r5
 8002cd0:	46b2      	mov	sl, r6
 8002cd2:	eb19 0309 	adds.w	r3, r9, r9
 8002cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cda:	4699      	mov	r9, r3
 8002cdc:	46a2      	mov	sl, r4
 8002cde:	eb19 0905 	adds.w	r9, r9, r5
 8002ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4692      	mov	sl, r2
 8002cfe:	eb19 0005 	adds.w	r0, r9, r5
 8002d02:	eb4a 0106 	adc.w	r1, sl, r6
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	f04f 0600 	mov.w	r6, #0
 8002d10:	196b      	adds	r3, r5, r5
 8002d12:	eb46 0406 	adc.w	r4, r6, r6
 8002d16:	461a      	mov	r2, r3
 8002d18:	4623      	mov	r3, r4
 8002d1a:	f7fd fc75 	bl	8000608 <__aeabi_uldivmod>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <UART_SetConfig+0x384>)
 8002d26:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2164      	movs	r1, #100	; 0x64
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	3332      	adds	r3, #50	; 0x32
 8002d38:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <UART_SetConfig+0x384>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	f003 0207 	and.w	r2, r3, #7
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4442      	add	r2, r8
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e26f      	b.n	800322e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d4e:	f7fe fdcb 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	461d      	mov	r5, r3
 8002d58:	f04f 0600 	mov.w	r6, #0
 8002d5c:	46a8      	mov	r8, r5
 8002d5e:	46b1      	mov	r9, r6
 8002d60:	eb18 0308 	adds.w	r3, r8, r8
 8002d64:	eb49 0409 	adc.w	r4, r9, r9
 8002d68:	4698      	mov	r8, r3
 8002d6a:	46a1      	mov	r9, r4
 8002d6c:	eb18 0805 	adds.w	r8, r8, r5
 8002d70:	eb49 0906 	adc.w	r9, r9, r6
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d88:	4688      	mov	r8, r1
 8002d8a:	4691      	mov	r9, r2
 8002d8c:	eb18 0005 	adds.w	r0, r8, r5
 8002d90:	eb49 0106 	adc.w	r1, r9, r6
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	461d      	mov	r5, r3
 8002d9a:	f04f 0600 	mov.w	r6, #0
 8002d9e:	196b      	adds	r3, r5, r5
 8002da0:	eb46 0406 	adc.w	r4, r6, r6
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd fc2e 	bl	8000608 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <UART_SetConfig+0x384>)
 8002db4:	fba3 2302 	umull	r2, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	46a9      	mov	r9, r5
 8002dc8:	46b2      	mov	sl, r6
 8002dca:	eb19 0309 	adds.w	r3, r9, r9
 8002dce:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd2:	4699      	mov	r9, r3
 8002dd4:	46a2      	mov	sl, r4
 8002dd6:	eb19 0905 	adds.w	r9, r9, r5
 8002dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df2:	4689      	mov	r9, r1
 8002df4:	4692      	mov	sl, r2
 8002df6:	eb19 0005 	adds.w	r0, r9, r5
 8002dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	461d      	mov	r5, r3
 8002e04:	f04f 0600 	mov.w	r6, #0
 8002e08:	196b      	adds	r3, r5, r5
 8002e0a:	eb46 0406 	adc.w	r4, r6, r6
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd fbf9 	bl	8000608 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <UART_SetConfig+0x384>)
 8002e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3332      	adds	r3, #50	; 0x32
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <UART_SetConfig+0x384>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3e:	4498      	add	r8, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	461d      	mov	r5, r3
 8002e44:	f04f 0600 	mov.w	r6, #0
 8002e48:	46a9      	mov	r9, r5
 8002e4a:	46b2      	mov	sl, r6
 8002e4c:	eb19 0309 	adds.w	r3, r9, r9
 8002e50:	eb4a 040a 	adc.w	r4, sl, sl
 8002e54:	4699      	mov	r9, r3
 8002e56:	46a2      	mov	sl, r4
 8002e58:	eb19 0905 	adds.w	r9, r9, r5
 8002e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e74:	4689      	mov	r9, r1
 8002e76:	4692      	mov	sl, r2
 8002e78:	eb19 0005 	adds.w	r0, r9, r5
 8002e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	461d      	mov	r5, r3
 8002e86:	f04f 0600 	mov.w	r6, #0
 8002e8a:	196b      	adds	r3, r5, r5
 8002e8c:	eb46 0406 	adc.w	r4, r6, r6
 8002e90:	461a      	mov	r2, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	f7fd fbb8 	bl	8000608 <__aeabi_uldivmod>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <UART_SetConfig+0x384>)
 8002ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	2164      	movs	r1, #100	; 0x64
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	3332      	adds	r3, #50	; 0x32
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <UART_SetConfig+0x384>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4442      	add	r2, r8
 8002ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ec6:	e1b2      	b.n	800322e <UART_SetConfig+0x6e2>
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40011400 	.word	0x40011400
 8002ed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4ad7      	ldr	r2, [pc, #860]	; (8003238 <UART_SetConfig+0x6ec>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d005      	beq.n	8002eea <UART_SetConfig+0x39e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4ad6      	ldr	r2, [pc, #856]	; (800323c <UART_SetConfig+0x6f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f040 80d1 	bne.w	800308c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eea:	f7fe fd11 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	469a      	mov	sl, r3
 8002ef4:	f04f 0b00 	mov.w	fp, #0
 8002ef8:	46d0      	mov	r8, sl
 8002efa:	46d9      	mov	r9, fp
 8002efc:	eb18 0308 	adds.w	r3, r8, r8
 8002f00:	eb49 0409 	adc.w	r4, r9, r9
 8002f04:	4698      	mov	r8, r3
 8002f06:	46a1      	mov	r9, r4
 8002f08:	eb18 080a 	adds.w	r8, r8, sl
 8002f0c:	eb49 090b 	adc.w	r9, r9, fp
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f24:	4688      	mov	r8, r1
 8002f26:	4691      	mov	r9, r2
 8002f28:	eb1a 0508 	adds.w	r5, sl, r8
 8002f2c:	eb4b 0609 	adc.w	r6, fp, r9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	0094      	lsls	r4, r2, #2
 8002f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f48:	008b      	lsls	r3, r1, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	4631      	mov	r1, r6
 8002f52:	f7fd fb59 	bl	8000608 <__aeabi_uldivmod>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4bb8      	ldr	r3, [pc, #736]	; (8003240 <UART_SetConfig+0x6f4>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	469b      	mov	fp, r3
 8002f6c:	f04f 0c00 	mov.w	ip, #0
 8002f70:	46d9      	mov	r9, fp
 8002f72:	46e2      	mov	sl, ip
 8002f74:	eb19 0309 	adds.w	r3, r9, r9
 8002f78:	eb4a 040a 	adc.w	r4, sl, sl
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	46a2      	mov	sl, r4
 8002f80:	eb19 090b 	adds.w	r9, r9, fp
 8002f84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	4692      	mov	sl, r2
 8002fa0:	eb1b 0509 	adds.w	r5, fp, r9
 8002fa4:	eb4c 060a 	adc.w	r6, ip, sl
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	f04f 0400 	mov.w	r4, #0
 8002fba:	0094      	lsls	r4, r2, #2
 8002fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fc0:	008b      	lsls	r3, r1, #2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	4631      	mov	r1, r6
 8002fca:	f7fd fb1d 	bl	8000608 <__aeabi_uldivmod>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b9a      	ldr	r3, [pc, #616]	; (8003240 <UART_SetConfig+0x6f4>)
 8002fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2164      	movs	r1, #100	; 0x64
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3332      	adds	r3, #50	; 0x32
 8002fe8:	4a95      	ldr	r2, [pc, #596]	; (8003240 <UART_SetConfig+0x6f4>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	4498      	add	r8, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	469b      	mov	fp, r3
 8002ffa:	f04f 0c00 	mov.w	ip, #0
 8002ffe:	46d9      	mov	r9, fp
 8003000:	46e2      	mov	sl, ip
 8003002:	eb19 0309 	adds.w	r3, r9, r9
 8003006:	eb4a 040a 	adc.w	r4, sl, sl
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	eb19 090b 	adds.w	r9, r9, fp
 8003012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302a:	4689      	mov	r9, r1
 800302c:	4692      	mov	sl, r2
 800302e:	eb1b 0509 	adds.w	r5, fp, r9
 8003032:	eb4c 060a 	adc.w	r6, ip, sl
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	f04f 0400 	mov.w	r4, #0
 8003048:	0094      	lsls	r4, r2, #2
 800304a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800304e:	008b      	lsls	r3, r1, #2
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	4628      	mov	r0, r5
 8003056:	4631      	mov	r1, r6
 8003058:	f7fd fad6 	bl	8000608 <__aeabi_uldivmod>
 800305c:	4603      	mov	r3, r0
 800305e:	460c      	mov	r4, r1
 8003060:	461a      	mov	r2, r3
 8003062:	4b77      	ldr	r3, [pc, #476]	; (8003240 <UART_SetConfig+0x6f4>)
 8003064:	fba3 1302 	umull	r1, r3, r3, r2
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	2164      	movs	r1, #100	; 0x64
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	3332      	adds	r3, #50	; 0x32
 8003076:	4a72      	ldr	r2, [pc, #456]	; (8003240 <UART_SetConfig+0x6f4>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4442      	add	r2, r8
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e0d0      	b.n	800322e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7fe fc2c 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8003090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	469a      	mov	sl, r3
 8003096:	f04f 0b00 	mov.w	fp, #0
 800309a:	46d0      	mov	r8, sl
 800309c:	46d9      	mov	r9, fp
 800309e:	eb18 0308 	adds.w	r3, r8, r8
 80030a2:	eb49 0409 	adc.w	r4, r9, r9
 80030a6:	4698      	mov	r8, r3
 80030a8:	46a1      	mov	r9, r4
 80030aa:	eb18 080a 	adds.w	r8, r8, sl
 80030ae:	eb49 090b 	adc.w	r9, r9, fp
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030c6:	4688      	mov	r8, r1
 80030c8:	4691      	mov	r9, r2
 80030ca:	eb1a 0508 	adds.w	r5, sl, r8
 80030ce:	eb4b 0609 	adc.w	r6, fp, r9
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f04f 0400 	mov.w	r4, #0
 80030e4:	0094      	lsls	r4, r2, #2
 80030e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030ea:	008b      	lsls	r3, r1, #2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	4631      	mov	r1, r6
 80030f4:	f7fd fa88 	bl	8000608 <__aeabi_uldivmod>
 80030f8:	4603      	mov	r3, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b50      	ldr	r3, [pc, #320]	; (8003240 <UART_SetConfig+0x6f4>)
 8003100:	fba3 2302 	umull	r2, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	469b      	mov	fp, r3
 800310e:	f04f 0c00 	mov.w	ip, #0
 8003112:	46d9      	mov	r9, fp
 8003114:	46e2      	mov	sl, ip
 8003116:	eb19 0309 	adds.w	r3, r9, r9
 800311a:	eb4a 040a 	adc.w	r4, sl, sl
 800311e:	4699      	mov	r9, r3
 8003120:	46a2      	mov	sl, r4
 8003122:	eb19 090b 	adds.w	r9, r9, fp
 8003126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800313a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800313e:	4689      	mov	r9, r1
 8003140:	4692      	mov	sl, r2
 8003142:	eb1b 0509 	adds.w	r5, fp, r9
 8003146:	eb4c 060a 	adc.w	r6, ip, sl
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4619      	mov	r1, r3
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	0094      	lsls	r4, r2, #2
 800315e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	461a      	mov	r2, r3
 8003166:	4623      	mov	r3, r4
 8003168:	4628      	mov	r0, r5
 800316a:	4631      	mov	r1, r6
 800316c:	f7fd fa4c 	bl	8000608 <__aeabi_uldivmod>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	461a      	mov	r2, r3
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <UART_SetConfig+0x6f4>)
 8003178:	fba3 1302 	umull	r1, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	2164      	movs	r1, #100	; 0x64
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	3332      	adds	r3, #50	; 0x32
 800318a:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <UART_SetConfig+0x6f4>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003196:	4498      	add	r8, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	469b      	mov	fp, r3
 800319c:	f04f 0c00 	mov.w	ip, #0
 80031a0:	46d9      	mov	r9, fp
 80031a2:	46e2      	mov	sl, ip
 80031a4:	eb19 0309 	adds.w	r3, r9, r9
 80031a8:	eb4a 040a 	adc.w	r4, sl, sl
 80031ac:	4699      	mov	r9, r3
 80031ae:	46a2      	mov	sl, r4
 80031b0:	eb19 090b 	adds.w	r9, r9, fp
 80031b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031cc:	4689      	mov	r9, r1
 80031ce:	4692      	mov	sl, r2
 80031d0:	eb1b 0509 	adds.w	r5, fp, r9
 80031d4:	eb4c 060a 	adc.w	r6, ip, sl
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	f04f 0400 	mov.w	r4, #0
 80031ea:	0094      	lsls	r4, r2, #2
 80031ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f0:	008b      	lsls	r3, r1, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	4623      	mov	r3, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	4631      	mov	r1, r6
 80031fa:	f7fd fa05 	bl	8000608 <__aeabi_uldivmod>
 80031fe:	4603      	mov	r3, r0
 8003200:	460c      	mov	r4, r1
 8003202:	461a      	mov	r2, r3
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <UART_SetConfig+0x6f4>)
 8003206:	fba3 1302 	umull	r1, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2164      	movs	r1, #100	; 0x64
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <UART_SetConfig+0x6f4>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4442      	add	r2, r8
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	e7ff      	b.n	800322e <UART_SetConfig+0x6e2>
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003238:	40011000 	.word	0x40011000
 800323c:	40011400 	.word	0x40011400
 8003240:	51eb851f 	.word	0x51eb851f

08003244 <MPU6000_Init>:
#define MPU_G_s1000dps           ((float)0.0305185f)  //dps/LSB
#define MPU_G_s2000dps           ((float)0.0610370f)  //dps/LSB

//初始化MPU6000
void MPU6000_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_1, 0x80);
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	206b      	movs	r0, #107	; 0x6b
 800324c:	f000 faac 	bl	80037a8 <Spi_GyroSingleWrite>
	HAL_Delay(50);
 8003250:	2032      	movs	r0, #50	; 0x32
 8003252:	f7fd fbcb 	bl	80009ec <HAL_Delay>

	Spi_GyroSingleWrite(MPU_RA_SIGNAL_PATH_RESET, BIT_GYRO | BIT_ACC | BIT_TEMP);
 8003256:	2103      	movs	r1, #3
 8003258:	2068      	movs	r0, #104	; 0x68
 800325a:	f000 faa5 	bl	80037a8 <Spi_GyroSingleWrite>
	HAL_Delay(50);
 800325e:	2032      	movs	r0, #50	; 0x32
 8003260:	f7fd fbc4 	bl	80009ec <HAL_Delay>

	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_1, 0x00);
 8003264:	2100      	movs	r1, #0
 8003266:	206b      	movs	r0, #107	; 0x6b
 8003268:	f000 fa9e 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 800326c:	2005      	movs	r0, #5
 800326e:	f000 f8a3 	bl	80033b8 <SoftDelayUs>

	Spi_GyroSingleWrite(MPU_RA_USER_CTRL, 0x10);
 8003272:	2110      	movs	r1, #16
 8003274:	206a      	movs	r0, #106	; 0x6a
 8003276:	f000 fa97 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 800327a:	2005      	movs	r0, #5
 800327c:	f000 f89c 	bl	80033b8 <SoftDelayUs>

	Spi_GyroSingleWrite(MPU_RA_PWR_MGMT_2, 0x00);
 8003280:	2100      	movs	r1, #0
 8003282:	206c      	movs	r0, #108	; 0x6c
 8003284:	f000 fa90 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003288:	2005      	movs	r0, #5
 800328a:	f000 f895 	bl	80033b8 <SoftDelayUs>

	//陀螺仪采样率0x00(1000Hz)   采样率 = 陀螺仪的输出率 / (1 + SMPLRT_DIV)
	Spi_GyroSingleWrite(MPU_RA_SMPLRT_DIV, (1000/1000 - 1));
 800328e:	2100      	movs	r1, #0
 8003290:	2019      	movs	r0, #25
 8003292:	f000 fa89 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 8003296:	2005      	movs	r0, #5
 8003298:	f000 f88e 	bl	80033b8 <SoftDelayUs>

	//i2c旁路模式
	// INT_PIN_CFG   -- INT_LEVEL_HIGH, INT_OPEN_DIS, LATCH_INT_DIS, INT_RD_CLEAR_DIS, FSYNC_INT_LEVEL_HIGH, FSYNC_INT_DIS, I2C_BYPASS_EN, CLOCK_DIS
	Spi_GyroSingleWrite(MPU_RA_INT_PIN_CFG, 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2 | 1 << 1 | 0 << 0);
 800329c:	2102      	movs	r1, #2
 800329e:	2037      	movs	r0, #55	; 0x37
 80032a0:	f000 fa82 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 80032a4:	2005      	movs	r0, #5
 80032a6:	f000 f887 	bl	80033b8 <SoftDelayUs>

	//低通滤波频率
	Spi_GyroSingleWrite(MPU_RA_CONFIG, MPU_LPF_42HZ);
 80032aa:	2103      	movs	r1, #3
 80032ac:	201a      	movs	r0, #26
 80032ae:	f000 fa7b 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 80032b2:	2005      	movs	r0, #5
 80032b4:	f000 f880 	bl	80033b8 <SoftDelayUs>

	//陀螺仪自检及测量范围，典型值0x18(不自检，2000deg/s) (0x10 1000deg/s) (0x10 1000deg/s) (0x08 500deg/s)
	Spi_GyroSingleWrite(MPU_RA_GYRO_CONFIG, 0x10);
 80032b8:	2110      	movs	r1, #16
 80032ba:	201b      	movs	r0, #27
 80032bc:	f000 fa74 	bl	80037a8 <Spi_GyroSingleWrite>
	SoftDelayUs(5);
 80032c0:	2005      	movs	r0, #5
 80032c2:	f000 f879 	bl	80033b8 <SoftDelayUs>

	//加速度自检、测量范围(不自检，+-8G)
	Spi_GyroSingleWrite(MPU_RA_ACCEL_CONFIG, 2 << 3);
 80032c6:	2110      	movs	r1, #16
 80032c8:	201c      	movs	r0, #28
 80032ca:	f000 fa6d 	bl	80037a8 <Spi_GyroSingleWrite>
	HAL_Delay(5);
 80032ce:	2005      	movs	r0, #5
 80032d0:	f7fd fb8c 	bl	80009ec <HAL_Delay>
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <MPU6000_ReadTemp>:
*功能说明: MPU6000读取温度传感器
*形    参: 读出数据指针
*返 回 值: 无
**********************************************************************************************************/
void MPU6000_ReadTemp(float* temp)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	static int16_t temperature_temp;

	Spi_GyroMultiRead(MPU_RA_TEMP_OUT_H, buffer, 2);
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2202      	movs	r2, #2
 80032e6:	4619      	mov	r1, r3
 80032e8:	2041      	movs	r0, #65	; 0x41
 80032ea:	f000 fa75 	bl	80037d8 <Spi_GyroMultiRead>
	temperature_temp = ((((int16_t)buffer[0]) << 8) | buffer[1]);
 80032ee:	7b3b      	ldrb	r3, [r7, #12]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <MPU6000_ReadTemp+0x5c>)
 80032fe:	801a      	strh	r2, [r3, #0]
	*temp = 36.53f + (float)temperature_temp / 340;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <MPU6000_ReadTemp+0x5c>)
 8003302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003338 <MPU6000_ReadTemp+0x60>
 8003312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003316:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800333c <MPU6000_ReadTemp+0x64>
 800331a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	edc3 7a00 	vstr	s15, [r3]

    SoftDelayUs(1);
 8003324:	2001      	movs	r0, #1
 8003326:	f000 f847 	bl	80033b8 <SoftDelayUs>
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000008c 	.word	0x2000008c
 8003338:	43aa0000 	.word	0x43aa0000
 800333c:	42121eb8 	.word	0x42121eb8

08003340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003354:	463b      	mov	r3, r7
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335c:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <MX_TIM2_Init+0x74>)
 800335e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <MX_TIM2_Init+0x74>)
 8003366:	2259      	movs	r2, #89	; 0x59
 8003368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <MX_TIM2_Init+0x74>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <MX_TIM2_Init+0x74>)
 8003372:	2201      	movs	r2, #1
 8003374:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <MX_TIM2_Init+0x74>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <MX_TIM2_Init+0x74>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003382:	480c      	ldr	r0, [pc, #48]	; (80033b4 <MX_TIM2_Init+0x74>)
 8003384:	f7fe fd8a 	bl	8001e9c <HAL_TIM_Base_Init>
  {
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	4619      	mov	r1, r3
 8003394:	4807      	ldr	r0, [pc, #28]	; (80033b4 <MX_TIM2_Init+0x74>)
 8003396:	f7fe fdfb 	bl	8001f90 <HAL_TIM_ConfigClockSource>
  {
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033a2:	463b      	mov	r3, r7
 80033a4:	4619      	mov	r1, r3
 80033a6:	4803      	ldr	r0, [pc, #12]	; (80033b4 <MX_TIM2_Init+0x74>)
 80033a8:	f7fe ffe4 	bl	8002374 <HAL_TIMEx_MasterConfigSynchronization>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033ac:	bf00      	nop
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200000a0 	.word	0x200000a0

080033b8 <SoftDelayUs>:
void SoftDelayUs(uint32_t us)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    uint16_t differ=0xffff-us-5;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f06f 0305 	mvn.w	r3, #5
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	81fb      	strh	r3, [r7, #14]
    HAL_TIM_Base_Start(&htim2);
 80033cc:	480b      	ldr	r0, [pc, #44]	; (80033fc <SoftDelayUs+0x44>)
 80033ce:	f7fe fd90 	bl	8001ef2 <HAL_TIM_Base_Start>
 	__HAL_TIM_SetCounter(&htim2,differ);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <SoftDelayUs+0x44>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	89fa      	ldrh	r2, [r7, #14]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
    while(differ < 0xffff-5)
 80033da:	e003      	b.n	80033e4 <SoftDelayUs+0x2c>
   {
        differ = __HAL_TIM_GetCounter(&htim2);
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <SoftDelayUs+0x44>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	81fb      	strh	r3, [r7, #14]
    while(differ < 0xffff-5)
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d9f6      	bls.n	80033dc <SoftDelayUs+0x24>
    }
   HAL_TIM_Base_Stop(&htim2);
 80033ee:	4803      	ldr	r0, [pc, #12]	; (80033fc <SoftDelayUs+0x44>)
 80033f0:	f7fe fda3 	bl	8001f3a <HAL_TIM_Base_Stop>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000a0 	.word	0x200000a0

08003400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003406:	f7fd fa7f 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800340a:	f000 f82b 	bl	8003464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800340e:	f000 f8c3 	bl	8003598 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003412:	f000 f943 	bl	800369c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003416:	f000 f895 	bl	8003544 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800341a:	f7ff ff91 	bl	8003340 <MX_TIM2_Init>
  MPU6000_Init();
 800341e:	f7ff ff11 	bl	8003244 <MPU6000_Init>
	//每一秒，输出一次温度的数据
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float temp;
	  HAL_Delay(1000);
 8003422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003426:	f7fd fae1 	bl	80009ec <HAL_Delay>
	  MPU6000_ReadTemp(&temp);
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff53 	bl	80032d8 <MPU6000_ReadTemp>
	  uint8_t pData[4]="";
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
	  sprintf(pData,"%.1f",temp);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f88d 	bl	8000558 <__aeabi_f2d>
 800343e:	4603      	mov	r3, r0
 8003440:	460c      	mov	r4, r1
 8003442:	4638      	mov	r0, r7
 8003444:	461a      	mov	r2, r3
 8003446:	4623      	mov	r3, r4
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <main+0x5c>)
 800344a:	f000 fbab 	bl	8003ba4 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)pData,sizeof(pData),100);//不断通过串口3发送，pData中的数据，sizeof计算pData中的字节数
 800344e:	4639      	mov	r1, r7
 8003450:	2364      	movs	r3, #100	; 0x64
 8003452:	2204      	movs	r2, #4
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <main+0x60>)
 8003456:	f7ff f856 	bl	8002506 <HAL_UART_Transmit>
  {
 800345a:	e7e2      	b.n	8003422 <main+0x22>
 800345c:	080043c8 	.word	0x080043c8
 8003460:	200000e0 	.word	0x200000e0

08003464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b094      	sub	sp, #80	; 0x50
 8003468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800346a:	f107 0320 	add.w	r3, r7, #32
 800346e:	2230      	movs	r2, #48	; 0x30
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb8e 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <SystemClock_Config+0xd8>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <SystemClock_Config+0xd8>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <SystemClock_Config+0xd8>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <SystemClock_Config+0xdc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <SystemClock_Config+0xdc>)
 80034ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <SystemClock_Config+0xdc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ca:	2302      	movs	r3, #2
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80034d4:	230c      	movs	r3, #12
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80034d8:	23b4      	movs	r3, #180	; 0xb4
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034dc:	2302      	movs	r3, #2
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034e0:	2304      	movs	r3, #4
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e4:	f107 0320 	add.w	r3, r7, #32
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fde9 	bl	80010c0 <HAL_RCC_OscConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034f4:	f000 f8ca 	bl	800368c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034f8:	f7fd fd92 	bl	8001020 <HAL_PWREx_EnableOverDrive>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003502:	f000 f8c3 	bl	800368c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003506:	230f      	movs	r3, #15
 8003508:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800350a:	2302      	movs	r3, #2
 800350c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003512:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	2105      	movs	r1, #5
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe f83b 	bl	80015a0 <HAL_RCC_ClockConfig>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003530:	f000 f8ac 	bl	800368c <Error_Handler>
  }
}
 8003534:	bf00      	nop
 8003536:	3750      	adds	r7, #80	; 0x50
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000

08003544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <MX_USART3_UART_Init+0x50>)
 800354c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 8003550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 800356a:	220c      	movs	r2, #12
 800356c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 8003570:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003574:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 8003578:	2200      	movs	r2, #0
 800357a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <MX_USART3_UART_Init+0x4c>)
 800357e:	f7fe ff75 	bl	800246c <HAL_UART_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8003588:	f000 f880 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200000e0 	.word	0x200000e0
 8003594:	40004800 	.word	0x40004800

08003598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b33      	ldr	r3, [pc, #204]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a32      	ldr	r2, [pc, #200]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <MX_GPIO_Init+0xe8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <MX_GPIO_Init+0xe8>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <MX_GPIO_Init+0xe8>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <MX_GPIO_Init+0xe8>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_GPIO_Init+0xe8>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <MX_GPIO_Init+0xe8>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <MX_GPIO_Init+0xe8>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800363a:	2200      	movs	r2, #0
 800363c:	2104      	movs	r1, #4
 800363e:	4811      	ldr	r0, [pc, #68]	; (8003684 <MX_GPIO_Init+0xec>)
 8003640:	f7fd fcd4 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003644:	2304      	movs	r3, #4
 8003646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003648:	2301      	movs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003650:	2302      	movs	r3, #2
 8003652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	480a      	ldr	r0, [pc, #40]	; (8003684 <MX_GPIO_Init+0xec>)
 800365c:	f7fd fb1c 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003660:	2302      	movs	r3, #2
 8003662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_GPIO_Init+0xf0>)
 8003674:	f7fd fb10 	bl	8000c98 <HAL_GPIO_Init>

}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	40020800 	.word	0x40020800
 8003688:	40020400 	.word	0x40020400

0800368c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <MX_SPI1_Init+0x60>)
 80036a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036e8:	220a      	movs	r2, #10
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <MX_SPI1_Init+0x5c>)
 80036ee:	f7fe f923 	bl	8001938 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000120 	.word	0x20000120
 80036fc:	40013000 	.word	0x40013000

08003700 <Spi_GyroEnable>:
*功能说明: 陀螺仪CS脚使能
*形    参: 无
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroEnable(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003704:	2200      	movs	r2, #0
 8003706:	2104      	movs	r1, #4
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <Spi_GyroEnable+0x14>)
 800370a:	f7fd fc6f 	bl	8000fec <HAL_GPIO_WritePin>
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40020800 	.word	0x40020800

08003718 <Spi_GyroDisable>:
*功能说明: 陀螺仪CS脚失能
*形    参: 无
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroDisable(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800371c:	2201      	movs	r2, #1
 800371e:	2104      	movs	r1, #4
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <Spi_GyroDisable+0x14>)
 8003722:	f7fd fc63 	bl	8000fec <HAL_GPIO_WritePin>
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020800 	.word	0x40020800

08003730 <SPI_SingleReadandWrite>:

//单字节的通过SPI的读写函数
uint8_t SPI_SingleReadandWrite(uint8_t TxData)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata;
	HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 800373a:	f107 020f 	add.w	r2, r7, #15
 800373e:	1df9      	adds	r1, r7, #7
 8003740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2301      	movs	r3, #1
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <SPI_SingleReadandWrite+0x28>)
 800374a:	f7fe f959 	bl	8001a00 <HAL_SPI_TransmitReceive>
	return Rxdata;          		    //返回收到的数据
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000120 	.word	0x20000120

0800375c <SPI_MultiWriteAndRead>:

//多个字节通过SPI的读写函数
void SPI_MultiWriteAndRead( uint8_t Txdata, uint8_t *Rxdata, int len)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	4603      	mov	r3, r0
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	73fb      	strb	r3, [r7, #15]

	uint8_t b;
	while(len--)
 800376a:	e009      	b.n	8003780 <SPI_MultiWriteAndRead+0x24>
	{
		HAL_SPI_TransmitReceive(&hspi1,&Txdata,&b,1, 50);
 800376c:	f107 0217 	add.w	r2, r7, #23
 8003770:	f107 010f 	add.w	r1, r7, #15
 8003774:	2332      	movs	r3, #50	; 0x32
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2301      	movs	r3, #1
 800377a:	480a      	ldr	r0, [pc, #40]	; (80037a4 <SPI_MultiWriteAndRead+0x48>)
 800377c:	f7fe f940 	bl	8001a00 <HAL_SPI_TransmitReceive>
	while(len--)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <SPI_MultiWriteAndRead+0x10>
	}
	if(Rxdata)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <SPI_MultiWriteAndRead+0x3e>
	{
		*(Rxdata++) = b;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	60ba      	str	r2, [r7, #8]
 8003796:	7dfa      	ldrb	r2, [r7, #23]
 8003798:	701a      	strb	r2, [r3, #0]
	}
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000120 	.word	0x20000120

080037a8 <Spi_GyroSingleWrite>:
*功能说明: 陀螺仪单个寄存器写入
*形    参: 寄存器地址 写入值
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroSingleWrite(uint8_t reg, uint8_t value)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	460a      	mov	r2, r1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71bb      	strb	r3, [r7, #6]
	Spi_GyroEnable();
 80037b8:	f7ff ffa2 	bl	8003700 <Spi_GyroEnable>
	//Spi_SingleWirteAndRead(GYRO_SPI, reg);
	SPI_SingleReadandWrite(reg);
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ffb6 	bl	8003730 <SPI_SingleReadandWrite>
	SPI_SingleReadandWrite(value);
 80037c4:	79bb      	ldrb	r3, [r7, #6]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ffb2 	bl	8003730 <SPI_SingleReadandWrite>
	//Spi_SingleWirteAndRead(GYRO_SPI, value);
	Spi_GyroDisable();
 80037cc:	f7ff ffa4 	bl	8003718 <Spi_GyroDisable>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <Spi_GyroMultiRead>:
*功能说明: 陀螺仪多个寄存器读出
*形    参: 寄存器地址 读出缓冲区 读出长度
*返 回 值: 无
**********************************************************************************************************/
void Spi_GyroMultiRead(uint8_t reg,uint8_t *data, uint8_t length)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71bb      	strb	r3, [r7, #6]
	Spi_GyroEnable();
 80037e8:	f7ff ff8a 	bl	8003700 <Spi_GyroEnable>
	//Spi_SingleWirteAndRead(GYRO_SPI, reg | 0x80);
	SPI_SingleReadandWrite(reg|0x80);
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff9b 	bl	8003730 <SPI_SingleReadandWrite>
	SPI_MultiWriteAndRead(reg,data,length);
 80037fa:	79ba      	ldrb	r2, [r7, #6]
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ffab 	bl	800375c <SPI_MultiWriteAndRead>
	//SPI_MultiWriteAndRead(GYRO_SPI, data, NULL, length);
	Spi_GyroDisable();
 8003806:	f7ff ff87 	bl	8003718 <Spi_GyroDisable>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_MspInit+0x4c>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <HAL_MspInit+0x4c>)
 8003824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003828:	6453      	str	r3, [r2, #68]	; 0x44
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_MspInit+0x4c>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_MspInit+0x4c>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_MspInit+0x4c>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_MspInit+0x4c>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_SPI_MspInit+0x84>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d12b      	bne.n	80038de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_SPI_MspInit+0x88>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_SPI_MspInit+0x88>)
 8003890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003894:	6453      	str	r3, [r2, #68]	; 0x44
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_SPI_MspInit+0x88>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_SPI_MspInit+0x88>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_SPI_MspInit+0x88>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_SPI_MspInit+0x88>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038be:	23e0      	movs	r3, #224	; 0xe0
 80038c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ce:	2305      	movs	r3, #5
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	4619      	mov	r1, r3
 80038d8:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_SPI_MspInit+0x8c>)
 80038da:	f7fd f9dd 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40013000 	.word	0x40013000
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020000 	.word	0x40020000

080038f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d10d      	bne.n	8003922 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_TIM_Base_MspInit+0x3c>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_TIM_Base_MspInit+0x3c>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_TIM_Base_MspInit+0x3c>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <HAL_UART_MspInit+0xb8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d145      	bne.n	80039e2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_CTS
    PD12     ------> USART3_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800398e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003998:	2301      	movs	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039a0:	2307      	movs	r3, #7
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	4812      	ldr	r0, [pc, #72]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 80039ac:	f7fd f974 	bl	8000c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039be:	2303      	movs	r3, #3
 80039c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039c2:	2307      	movs	r3, #7
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	4619      	mov	r1, r3
 80039cc:	4809      	ldr	r0, [pc, #36]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 80039ce:	f7fd f963 	bl	8000c98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	2027      	movs	r0, #39	; 0x27
 80039d8:	f7fd f905 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039dc:	2027      	movs	r0, #39	; 0x27
 80039de:	f7fd f91e 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039e2:	bf00      	nop
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020c00 	.word	0x40020c00

080039f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <HardFault_Handler+0x4>

08003a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <MemManage_Handler+0x4>

08003a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <BusFault_Handler+0x4>

08003a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <UsageFault_Handler+0x4>

08003a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a4c:	f7fc ffae 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <USART3_IRQHandler+0x10>)
 8003a5a:	f7fe fded 	bl	8002638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200000e0 	.word	0x200000e0

08003a68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <_sbrk+0x50>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <_sbrk+0x16>
		heap_end = &end;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <_sbrk+0x50>)
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <_sbrk+0x54>)
 8003a7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <_sbrk+0x50>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <_sbrk+0x50>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	466a      	mov	r2, sp
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d907      	bls.n	8003aa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a92:	f000 f855 	bl	8003b40 <__errno>
 8003a96:	4602      	mov	r2, r0
 8003a98:	230c      	movs	r3, #12
 8003a9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e006      	b.n	8003ab0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <_sbrk+0x50>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <_sbrk+0x50>)
 8003aac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000090 	.word	0x20000090
 8003abc:	20000180 	.word	0x20000180

08003ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <SystemInit+0x28>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <SystemInit+0x28>)
 8003acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SystemInit+0x28>)
 8003ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ada:	609a      	str	r2, [r3, #8]
#endif
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003af0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003af2:	e003      	b.n	8003afc <LoopCopyDataInit>

08003af4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003af6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003af8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003afa:	3104      	adds	r1, #4

08003afc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003afc:	480b      	ldr	r0, [pc, #44]	; (8003b2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b04:	d3f6      	bcc.n	8003af4 <CopyDataInit>
  ldr  r2, =_sbss
 8003b06:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b08:	e002      	b.n	8003b10 <LoopFillZerobss>

08003b0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b0c:	f842 3b04 	str.w	r3, [r2], #4

08003b10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b14:	d3f9      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b16:	f7ff ffd3 	bl	8003ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1a:	f000 f817 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1e:	f7ff fc6f 	bl	8003400 <main>
  bx  lr    
 8003b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b24:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b28:	0800442c 	.word	0x0800442c
  ldr  r0, =_sdata
 8003b2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b30:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003b34:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003b38:	2000017c 	.word	0x2000017c

08003b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b3c:	e7fe      	b.n	8003b3c <ADC_IRQHandler>
	...

08003b40 <__errno>:
 8003b40:	4b01      	ldr	r3, [pc, #4]	; (8003b48 <__errno+0x8>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4e0d      	ldr	r6, [pc, #52]	; (8003b84 <__libc_init_array+0x38>)
 8003b50:	4c0d      	ldr	r4, [pc, #52]	; (8003b88 <__libc_init_array+0x3c>)
 8003b52:	1ba4      	subs	r4, r4, r6
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	2500      	movs	r5, #0
 8003b58:	42a5      	cmp	r5, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	4e0b      	ldr	r6, [pc, #44]	; (8003b8c <__libc_init_array+0x40>)
 8003b5e:	4c0c      	ldr	r4, [pc, #48]	; (8003b90 <__libc_init_array+0x44>)
 8003b60:	f000 fc26 	bl	80043b0 <_init>
 8003b64:	1ba4      	subs	r4, r4, r6
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	2500      	movs	r5, #0
 8003b6a:	42a5      	cmp	r5, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b74:	4798      	blx	r3
 8003b76:	3501      	adds	r5, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b7e:	4798      	blx	r3
 8003b80:	3501      	adds	r5, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08004424 	.word	0x08004424
 8003b88:	08004424 	.word	0x08004424
 8003b8c:	08004424 	.word	0x08004424
 8003b90:	08004428 	.word	0x08004428

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <siprintf>:
 8003ba4:	b40e      	push	{r1, r2, r3}
 8003ba6:	b500      	push	{lr}
 8003ba8:	b09c      	sub	sp, #112	; 0x70
 8003baa:	ab1d      	add	r3, sp, #116	; 0x74
 8003bac:	9002      	str	r0, [sp, #8]
 8003bae:	9006      	str	r0, [sp, #24]
 8003bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bb4:	4809      	ldr	r0, [pc, #36]	; (8003bdc <siprintf+0x38>)
 8003bb6:	9107      	str	r1, [sp, #28]
 8003bb8:	9104      	str	r1, [sp, #16]
 8003bba:	4909      	ldr	r1, [pc, #36]	; (8003be0 <siprintf+0x3c>)
 8003bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc0:	9105      	str	r1, [sp, #20]
 8003bc2:	6800      	ldr	r0, [r0, #0]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	a902      	add	r1, sp, #8
 8003bc8:	f000 f866 	bl	8003c98 <_svfiprintf_r>
 8003bcc:	9b02      	ldr	r3, [sp, #8]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	b01c      	add	sp, #112	; 0x70
 8003bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd8:	b003      	add	sp, #12
 8003bda:	4770      	bx	lr
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	ffff0208 	.word	0xffff0208

08003be4 <__ssputs_r>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	688e      	ldr	r6, [r1, #8]
 8003bea:	429e      	cmp	r6, r3
 8003bec:	4682      	mov	sl, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4690      	mov	r8, r2
 8003bf2:	4699      	mov	r9, r3
 8003bf4:	d837      	bhi.n	8003c66 <__ssputs_r+0x82>
 8003bf6:	898a      	ldrh	r2, [r1, #12]
 8003bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bfc:	d031      	beq.n	8003c62 <__ssputs_r+0x7e>
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	6909      	ldr	r1, [r1, #16]
 8003c02:	1a6f      	subs	r7, r5, r1
 8003c04:	6965      	ldr	r5, [r4, #20]
 8003c06:	2302      	movs	r3, #2
 8003c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c10:	f109 0301 	add.w	r3, r9, #1
 8003c14:	443b      	add	r3, r7
 8003c16:	429d      	cmp	r5, r3
 8003c18:	bf38      	it	cc
 8003c1a:	461d      	movcc	r5, r3
 8003c1c:	0553      	lsls	r3, r2, #21
 8003c1e:	d530      	bpl.n	8003c82 <__ssputs_r+0x9e>
 8003c20:	4629      	mov	r1, r5
 8003c22:	f000 fb2b 	bl	800427c <_malloc_r>
 8003c26:	4606      	mov	r6, r0
 8003c28:	b950      	cbnz	r0, 8003c40 <__ssputs_r+0x5c>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	f8ca 3000 	str.w	r3, [sl]
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	463a      	mov	r2, r7
 8003c42:	6921      	ldr	r1, [r4, #16]
 8003c44:	f000 faa8 	bl	8004198 <memcpy>
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	6126      	str	r6, [r4, #16]
 8003c56:	6165      	str	r5, [r4, #20]
 8003c58:	443e      	add	r6, r7
 8003c5a:	1bed      	subs	r5, r5, r7
 8003c5c:	6026      	str	r6, [r4, #0]
 8003c5e:	60a5      	str	r5, [r4, #8]
 8003c60:	464e      	mov	r6, r9
 8003c62:	454e      	cmp	r6, r9
 8003c64:	d900      	bls.n	8003c68 <__ssputs_r+0x84>
 8003c66:	464e      	mov	r6, r9
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	f000 fa9e 	bl	80041ae <memmove>
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	1b9b      	subs	r3, r3, r6
 8003c76:	60a3      	str	r3, [r4, #8]
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	441e      	add	r6, r3
 8003c7c:	6026      	str	r6, [r4, #0]
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e7dc      	b.n	8003c3c <__ssputs_r+0x58>
 8003c82:	462a      	mov	r2, r5
 8003c84:	f000 fb54 	bl	8004330 <_realloc_r>
 8003c88:	4606      	mov	r6, r0
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d1e2      	bne.n	8003c54 <__ssputs_r+0x70>
 8003c8e:	6921      	ldr	r1, [r4, #16]
 8003c90:	4650      	mov	r0, sl
 8003c92:	f000 faa5 	bl	80041e0 <_free_r>
 8003c96:	e7c8      	b.n	8003c2a <__ssputs_r+0x46>

08003c98 <_svfiprintf_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	461d      	mov	r5, r3
 8003c9e:	898b      	ldrh	r3, [r1, #12]
 8003ca0:	061f      	lsls	r7, r3, #24
 8003ca2:	b09d      	sub	sp, #116	; 0x74
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4616      	mov	r6, r2
 8003caa:	d50f      	bpl.n	8003ccc <_svfiprintf_r+0x34>
 8003cac:	690b      	ldr	r3, [r1, #16]
 8003cae:	b96b      	cbnz	r3, 8003ccc <_svfiprintf_r+0x34>
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	f000 fae3 	bl	800427c <_malloc_r>
 8003cb6:	6020      	str	r0, [r4, #0]
 8003cb8:	6120      	str	r0, [r4, #16]
 8003cba:	b928      	cbnz	r0, 8003cc8 <_svfiprintf_r+0x30>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	f8c8 3000 	str.w	r3, [r8]
 8003cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc6:	e0c8      	b.n	8003e5a <_svfiprintf_r+0x1c2>
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd6:	2330      	movs	r3, #48	; 0x30
 8003cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cdc:	9503      	str	r5, [sp, #12]
 8003cde:	f04f 0b01 	mov.w	fp, #1
 8003ce2:	4637      	mov	r7, r6
 8003ce4:	463d      	mov	r5, r7
 8003ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cea:	b10b      	cbz	r3, 8003cf0 <_svfiprintf_r+0x58>
 8003cec:	2b25      	cmp	r3, #37	; 0x25
 8003cee:	d13e      	bne.n	8003d6e <_svfiprintf_r+0xd6>
 8003cf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003cf4:	d00b      	beq.n	8003d0e <_svfiprintf_r+0x76>
 8003cf6:	4653      	mov	r3, sl
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	f7ff ff71 	bl	8003be4 <__ssputs_r>
 8003d02:	3001      	adds	r0, #1
 8003d04:	f000 80a4 	beq.w	8003e50 <_svfiprintf_r+0x1b8>
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	4453      	add	r3, sl
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	783b      	ldrb	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 809d 	beq.w	8003e50 <_svfiprintf_r+0x1b8>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	9307      	str	r3, [sp, #28]
 8003d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d28:	931a      	str	r3, [sp, #104]	; 0x68
 8003d2a:	462f      	mov	r7, r5
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d32:	4850      	ldr	r0, [pc, #320]	; (8003e74 <_svfiprintf_r+0x1dc>)
 8003d34:	f7fc fa5c 	bl	80001f0 <memchr>
 8003d38:	9b04      	ldr	r3, [sp, #16]
 8003d3a:	b9d0      	cbnz	r0, 8003d72 <_svfiprintf_r+0xda>
 8003d3c:	06d9      	lsls	r1, r3, #27
 8003d3e:	bf44      	itt	mi
 8003d40:	2220      	movmi	r2, #32
 8003d42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d46:	071a      	lsls	r2, r3, #28
 8003d48:	bf44      	itt	mi
 8003d4a:	222b      	movmi	r2, #43	; 0x2b
 8003d4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d50:	782a      	ldrb	r2, [r5, #0]
 8003d52:	2a2a      	cmp	r2, #42	; 0x2a
 8003d54:	d015      	beq.n	8003d82 <_svfiprintf_r+0xea>
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	462f      	mov	r7, r5
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	250a      	movs	r5, #10
 8003d5e:	4639      	mov	r1, r7
 8003d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d64:	3b30      	subs	r3, #48	; 0x30
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	d94d      	bls.n	8003e06 <_svfiprintf_r+0x16e>
 8003d6a:	b1b8      	cbz	r0, 8003d9c <_svfiprintf_r+0x104>
 8003d6c:	e00f      	b.n	8003d8e <_svfiprintf_r+0xf6>
 8003d6e:	462f      	mov	r7, r5
 8003d70:	e7b8      	b.n	8003ce4 <_svfiprintf_r+0x4c>
 8003d72:	4a40      	ldr	r2, [pc, #256]	; (8003e74 <_svfiprintf_r+0x1dc>)
 8003d74:	1a80      	subs	r0, r0, r2
 8003d76:	fa0b f000 	lsl.w	r0, fp, r0
 8003d7a:	4318      	orrs	r0, r3
 8003d7c:	9004      	str	r0, [sp, #16]
 8003d7e:	463d      	mov	r5, r7
 8003d80:	e7d3      	b.n	8003d2a <_svfiprintf_r+0x92>
 8003d82:	9a03      	ldr	r2, [sp, #12]
 8003d84:	1d11      	adds	r1, r2, #4
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	db01      	blt.n	8003d92 <_svfiprintf_r+0xfa>
 8003d8e:	9207      	str	r2, [sp, #28]
 8003d90:	e004      	b.n	8003d9c <_svfiprintf_r+0x104>
 8003d92:	4252      	negs	r2, r2
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	9207      	str	r2, [sp, #28]
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	783b      	ldrb	r3, [r7, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d10c      	bne.n	8003dbc <_svfiprintf_r+0x124>
 8003da2:	787b      	ldrb	r3, [r7, #1]
 8003da4:	2b2a      	cmp	r3, #42	; 0x2a
 8003da6:	d133      	bne.n	8003e10 <_svfiprintf_r+0x178>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9203      	str	r2, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfb8      	it	lt
 8003db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db8:	3702      	adds	r7, #2
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	4d2e      	ldr	r5, [pc, #184]	; (8003e78 <_svfiprintf_r+0x1e0>)
 8003dbe:	7839      	ldrb	r1, [r7, #0]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f7fc fa14 	bl	80001f0 <memchr>
 8003dc8:	b138      	cbz	r0, 8003dda <_svfiprintf_r+0x142>
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	1b40      	subs	r0, r0, r5
 8003dce:	fa03 f000 	lsl.w	r0, r3, r0
 8003dd2:	9b04      	ldr	r3, [sp, #16]
 8003dd4:	4303      	orrs	r3, r0
 8003dd6:	3701      	adds	r7, #1
 8003dd8:	9304      	str	r3, [sp, #16]
 8003dda:	7839      	ldrb	r1, [r7, #0]
 8003ddc:	4827      	ldr	r0, [pc, #156]	; (8003e7c <_svfiprintf_r+0x1e4>)
 8003dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de2:	2206      	movs	r2, #6
 8003de4:	1c7e      	adds	r6, r7, #1
 8003de6:	f7fc fa03 	bl	80001f0 <memchr>
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d038      	beq.n	8003e60 <_svfiprintf_r+0x1c8>
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <_svfiprintf_r+0x1e8>)
 8003df0:	bb13      	cbnz	r3, 8003e38 <_svfiprintf_r+0x1a0>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	3307      	adds	r3, #7
 8003df6:	f023 0307 	bic.w	r3, r3, #7
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	9303      	str	r3, [sp, #12]
 8003dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e00:	444b      	add	r3, r9
 8003e02:	9309      	str	r3, [sp, #36]	; 0x24
 8003e04:	e76d      	b.n	8003ce2 <_svfiprintf_r+0x4a>
 8003e06:	fb05 3202 	mla	r2, r5, r2, r3
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	460f      	mov	r7, r1
 8003e0e:	e7a6      	b.n	8003d5e <_svfiprintf_r+0xc6>
 8003e10:	2300      	movs	r3, #0
 8003e12:	3701      	adds	r7, #1
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	4619      	mov	r1, r3
 8003e18:	250a      	movs	r5, #10
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e20:	3a30      	subs	r2, #48	; 0x30
 8003e22:	2a09      	cmp	r2, #9
 8003e24:	d903      	bls.n	8003e2e <_svfiprintf_r+0x196>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0c8      	beq.n	8003dbc <_svfiprintf_r+0x124>
 8003e2a:	9105      	str	r1, [sp, #20]
 8003e2c:	e7c6      	b.n	8003dbc <_svfiprintf_r+0x124>
 8003e2e:	fb05 2101 	mla	r1, r5, r1, r2
 8003e32:	2301      	movs	r3, #1
 8003e34:	4607      	mov	r7, r0
 8003e36:	e7f0      	b.n	8003e1a <_svfiprintf_r+0x182>
 8003e38:	ab03      	add	r3, sp, #12
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <_svfiprintf_r+0x1ec>)
 8003e40:	a904      	add	r1, sp, #16
 8003e42:	4640      	mov	r0, r8
 8003e44:	f3af 8000 	nop.w
 8003e48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e4c:	4681      	mov	r9, r0
 8003e4e:	d1d6      	bne.n	8003dfe <_svfiprintf_r+0x166>
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	065b      	lsls	r3, r3, #25
 8003e54:	f53f af35 	bmi.w	8003cc2 <_svfiprintf_r+0x2a>
 8003e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5a:	b01d      	add	sp, #116	; 0x74
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	ab03      	add	r3, sp, #12
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4622      	mov	r2, r4
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <_svfiprintf_r+0x1ec>)
 8003e68:	a904      	add	r1, sp, #16
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f000 f882 	bl	8003f74 <_printf_i>
 8003e70:	e7ea      	b.n	8003e48 <_svfiprintf_r+0x1b0>
 8003e72:	bf00      	nop
 8003e74:	080043e8 	.word	0x080043e8
 8003e78:	080043ee 	.word	0x080043ee
 8003e7c:	080043f2 	.word	0x080043f2
 8003e80:	00000000 	.word	0x00000000
 8003e84:	08003be5 	.word	0x08003be5

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4691      	mov	r9, r2
 8003e8e:	461f      	mov	r7, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	f8c9 3000 	str.w	r3, [r9]
 8003ea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	b112      	cbz	r2, 8003eb2 <_printf_common+0x2a>
 8003eac:	3301      	adds	r3, #1
 8003eae:	f8c9 3000 	str.w	r3, [r9]
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	0699      	lsls	r1, r3, #26
 8003eb6:	bf42      	ittt	mi
 8003eb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ebc:	3302      	addmi	r3, #2
 8003ebe:	f8c9 3000 	strmi.w	r3, [r9]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d107      	bne.n	8003eda <_printf_common+0x52>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	42ab      	cmp	r3, r5
 8003ed8:	dc28      	bgt.n	8003f2c <_printf_common+0xa4>
 8003eda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	3300      	adds	r3, #0
 8003ee2:	bf18      	it	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	0692      	lsls	r2, r2, #26
 8003ee8:	d42d      	bmi.n	8003f46 <_printf_common+0xbe>
 8003eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	47c0      	blx	r8
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d020      	beq.n	8003f3a <_printf_common+0xb2>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	68e5      	ldr	r5, [r4, #12]
 8003efc:	f8d9 2000 	ldr.w	r2, [r9]
 8003f00:	f003 0306 	and.w	r3, r3, #6
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	bf08      	it	eq
 8003f08:	1aad      	subeq	r5, r5, r2
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	bf0c      	ite	eq
 8003f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f14:	2500      	movne	r5, #0
 8003f16:	4293      	cmp	r3, r2
 8003f18:	bfc4      	itt	gt
 8003f1a:	1a9b      	subgt	r3, r3, r2
 8003f1c:	18ed      	addgt	r5, r5, r3
 8003f1e:	f04f 0900 	mov.w	r9, #0
 8003f22:	341a      	adds	r4, #26
 8003f24:	454d      	cmp	r5, r9
 8003f26:	d11a      	bne.n	8003f5e <_printf_common+0xd6>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e008      	b.n	8003f3e <_printf_common+0xb6>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4652      	mov	r2, sl
 8003f30:	4639      	mov	r1, r7
 8003f32:	4630      	mov	r0, r6
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d103      	bne.n	8003f42 <_printf_common+0xba>
 8003f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f42:	3501      	adds	r5, #1
 8003f44:	e7c3      	b.n	8003ece <_printf_common+0x46>
 8003f46:	18e1      	adds	r1, r4, r3
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	2030      	movs	r0, #48	; 0x30
 8003f4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f50:	4422      	add	r2, r4
 8003f52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	e7c5      	b.n	8003eea <_printf_common+0x62>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4622      	mov	r2, r4
 8003f62:	4639      	mov	r1, r7
 8003f64:	4630      	mov	r0, r6
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d0e6      	beq.n	8003f3a <_printf_common+0xb2>
 8003f6c:	f109 0901 	add.w	r9, r9, #1
 8003f70:	e7d8      	b.n	8003f24 <_printf_common+0x9c>
	...

08003f74 <_printf_i>:
 8003f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	7e09      	ldrb	r1, [r1, #24]
 8003f80:	b085      	sub	sp, #20
 8003f82:	296e      	cmp	r1, #110	; 0x6e
 8003f84:	4617      	mov	r7, r2
 8003f86:	4606      	mov	r6, r0
 8003f88:	4698      	mov	r8, r3
 8003f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f8c:	f000 80b3 	beq.w	80040f6 <_printf_i+0x182>
 8003f90:	d822      	bhi.n	8003fd8 <_printf_i+0x64>
 8003f92:	2963      	cmp	r1, #99	; 0x63
 8003f94:	d036      	beq.n	8004004 <_printf_i+0x90>
 8003f96:	d80a      	bhi.n	8003fae <_printf_i+0x3a>
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	f000 80b9 	beq.w	8004110 <_printf_i+0x19c>
 8003f9e:	2958      	cmp	r1, #88	; 0x58
 8003fa0:	f000 8083 	beq.w	80040aa <_printf_i+0x136>
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003fac:	e032      	b.n	8004014 <_printf_i+0xa0>
 8003fae:	2964      	cmp	r1, #100	; 0x64
 8003fb0:	d001      	beq.n	8003fb6 <_printf_i+0x42>
 8003fb2:	2969      	cmp	r1, #105	; 0x69
 8003fb4:	d1f6      	bne.n	8003fa4 <_printf_i+0x30>
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	6813      	ldr	r3, [r2, #0]
 8003fba:	0605      	lsls	r5, r0, #24
 8003fbc:	f103 0104 	add.w	r1, r3, #4
 8003fc0:	d52a      	bpl.n	8004018 <_printf_i+0xa4>
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6011      	str	r1, [r2, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da03      	bge.n	8003fd2 <_printf_i+0x5e>
 8003fca:	222d      	movs	r2, #45	; 0x2d
 8003fcc:	425b      	negs	r3, r3
 8003fce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fd2:	486f      	ldr	r0, [pc, #444]	; (8004190 <_printf_i+0x21c>)
 8003fd4:	220a      	movs	r2, #10
 8003fd6:	e039      	b.n	800404c <_printf_i+0xd8>
 8003fd8:	2973      	cmp	r1, #115	; 0x73
 8003fda:	f000 809d 	beq.w	8004118 <_printf_i+0x1a4>
 8003fde:	d808      	bhi.n	8003ff2 <_printf_i+0x7e>
 8003fe0:	296f      	cmp	r1, #111	; 0x6f
 8003fe2:	d020      	beq.n	8004026 <_printf_i+0xb2>
 8003fe4:	2970      	cmp	r1, #112	; 0x70
 8003fe6:	d1dd      	bne.n	8003fa4 <_printf_i+0x30>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	e003      	b.n	8003ffa <_printf_i+0x86>
 8003ff2:	2975      	cmp	r1, #117	; 0x75
 8003ff4:	d017      	beq.n	8004026 <_printf_i+0xb2>
 8003ff6:	2978      	cmp	r1, #120	; 0x78
 8003ff8:	d1d4      	bne.n	8003fa4 <_printf_i+0x30>
 8003ffa:	2378      	movs	r3, #120	; 0x78
 8003ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004000:	4864      	ldr	r0, [pc, #400]	; (8004194 <_printf_i+0x220>)
 8004002:	e055      	b.n	80040b0 <_printf_i+0x13c>
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	1d19      	adds	r1, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6011      	str	r1, [r2, #0]
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004014:	2301      	movs	r3, #1
 8004016:	e08c      	b.n	8004132 <_printf_i+0x1be>
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6011      	str	r1, [r2, #0]
 800401c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004020:	bf18      	it	ne
 8004022:	b21b      	sxthne	r3, r3
 8004024:	e7cf      	b.n	8003fc6 <_printf_i+0x52>
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	6825      	ldr	r5, [r4, #0]
 800402a:	1d18      	adds	r0, r3, #4
 800402c:	6010      	str	r0, [r2, #0]
 800402e:	0628      	lsls	r0, r5, #24
 8004030:	d501      	bpl.n	8004036 <_printf_i+0xc2>
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	e002      	b.n	800403c <_printf_i+0xc8>
 8004036:	0668      	lsls	r0, r5, #25
 8004038:	d5fb      	bpl.n	8004032 <_printf_i+0xbe>
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	4854      	ldr	r0, [pc, #336]	; (8004190 <_printf_i+0x21c>)
 800403e:	296f      	cmp	r1, #111	; 0x6f
 8004040:	bf14      	ite	ne
 8004042:	220a      	movne	r2, #10
 8004044:	2208      	moveq	r2, #8
 8004046:	2100      	movs	r1, #0
 8004048:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800404c:	6865      	ldr	r5, [r4, #4]
 800404e:	60a5      	str	r5, [r4, #8]
 8004050:	2d00      	cmp	r5, #0
 8004052:	f2c0 8095 	blt.w	8004180 <_printf_i+0x20c>
 8004056:	6821      	ldr	r1, [r4, #0]
 8004058:	f021 0104 	bic.w	r1, r1, #4
 800405c:	6021      	str	r1, [r4, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d13d      	bne.n	80040de <_printf_i+0x16a>
 8004062:	2d00      	cmp	r5, #0
 8004064:	f040 808e 	bne.w	8004184 <_printf_i+0x210>
 8004068:	4665      	mov	r5, ip
 800406a:	2a08      	cmp	r2, #8
 800406c:	d10b      	bne.n	8004086 <_printf_i+0x112>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	07db      	lsls	r3, r3, #31
 8004072:	d508      	bpl.n	8004086 <_printf_i+0x112>
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	bfde      	ittt	le
 800407c:	2330      	movle	r3, #48	; 0x30
 800407e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004086:	ebac 0305 	sub.w	r3, ip, r5
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	f8cd 8000 	str.w	r8, [sp]
 8004090:	463b      	mov	r3, r7
 8004092:	aa03      	add	r2, sp, #12
 8004094:	4621      	mov	r1, r4
 8004096:	4630      	mov	r0, r6
 8004098:	f7ff fef6 	bl	8003e88 <_printf_common>
 800409c:	3001      	adds	r0, #1
 800409e:	d14d      	bne.n	800413c <_printf_i+0x1c8>
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	b005      	add	sp, #20
 80040a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040aa:	4839      	ldr	r0, [pc, #228]	; (8004190 <_printf_i+0x21c>)
 80040ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	6821      	ldr	r1, [r4, #0]
 80040b4:	1d1d      	adds	r5, r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6015      	str	r5, [r2, #0]
 80040ba:	060a      	lsls	r2, r1, #24
 80040bc:	d50b      	bpl.n	80040d6 <_printf_i+0x162>
 80040be:	07ca      	lsls	r2, r1, #31
 80040c0:	bf44      	itt	mi
 80040c2:	f041 0120 	orrmi.w	r1, r1, #32
 80040c6:	6021      	strmi	r1, [r4, #0]
 80040c8:	b91b      	cbnz	r3, 80040d2 <_printf_i+0x15e>
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	f022 0220 	bic.w	r2, r2, #32
 80040d0:	6022      	str	r2, [r4, #0]
 80040d2:	2210      	movs	r2, #16
 80040d4:	e7b7      	b.n	8004046 <_printf_i+0xd2>
 80040d6:	064d      	lsls	r5, r1, #25
 80040d8:	bf48      	it	mi
 80040da:	b29b      	uxthmi	r3, r3
 80040dc:	e7ef      	b.n	80040be <_printf_i+0x14a>
 80040de:	4665      	mov	r5, ip
 80040e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040e4:	fb02 3311 	mls	r3, r2, r1, r3
 80040e8:	5cc3      	ldrb	r3, [r0, r3]
 80040ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040ee:	460b      	mov	r3, r1
 80040f0:	2900      	cmp	r1, #0
 80040f2:	d1f5      	bne.n	80040e0 <_printf_i+0x16c>
 80040f4:	e7b9      	b.n	800406a <_printf_i+0xf6>
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	6825      	ldr	r5, [r4, #0]
 80040fa:	6961      	ldr	r1, [r4, #20]
 80040fc:	1d18      	adds	r0, r3, #4
 80040fe:	6010      	str	r0, [r2, #0]
 8004100:	0628      	lsls	r0, r5, #24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	d501      	bpl.n	800410a <_printf_i+0x196>
 8004106:	6019      	str	r1, [r3, #0]
 8004108:	e002      	b.n	8004110 <_printf_i+0x19c>
 800410a:	066a      	lsls	r2, r5, #25
 800410c:	d5fb      	bpl.n	8004106 <_printf_i+0x192>
 800410e:	8019      	strh	r1, [r3, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	4665      	mov	r5, ip
 8004116:	e7b9      	b.n	800408c <_printf_i+0x118>
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	1d19      	adds	r1, r3, #4
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	681d      	ldr	r5, [r3, #0]
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	2100      	movs	r1, #0
 8004124:	4628      	mov	r0, r5
 8004126:	f7fc f863 	bl	80001f0 <memchr>
 800412a:	b108      	cbz	r0, 8004130 <_printf_i+0x1bc>
 800412c:	1b40      	subs	r0, r0, r5
 800412e:	6060      	str	r0, [r4, #4]
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	2300      	movs	r3, #0
 8004136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413a:	e7a7      	b.n	800408c <_printf_i+0x118>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	462a      	mov	r2, r5
 8004140:	4639      	mov	r1, r7
 8004142:	4630      	mov	r0, r6
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d0aa      	beq.n	80040a0 <_printf_i+0x12c>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	079b      	lsls	r3, r3, #30
 800414e:	d413      	bmi.n	8004178 <_printf_i+0x204>
 8004150:	68e0      	ldr	r0, [r4, #12]
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	4298      	cmp	r0, r3
 8004156:	bfb8      	it	lt
 8004158:	4618      	movlt	r0, r3
 800415a:	e7a3      	b.n	80040a4 <_printf_i+0x130>
 800415c:	2301      	movs	r3, #1
 800415e:	464a      	mov	r2, r9
 8004160:	4639      	mov	r1, r7
 8004162:	4630      	mov	r0, r6
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d09a      	beq.n	80040a0 <_printf_i+0x12c>
 800416a:	3501      	adds	r5, #1
 800416c:	68e3      	ldr	r3, [r4, #12]
 800416e:	9a03      	ldr	r2, [sp, #12]
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	42ab      	cmp	r3, r5
 8004174:	dcf2      	bgt.n	800415c <_printf_i+0x1e8>
 8004176:	e7eb      	b.n	8004150 <_printf_i+0x1dc>
 8004178:	2500      	movs	r5, #0
 800417a:	f104 0919 	add.w	r9, r4, #25
 800417e:	e7f5      	b.n	800416c <_printf_i+0x1f8>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ac      	bne.n	80040de <_printf_i+0x16a>
 8004184:	7803      	ldrb	r3, [r0, #0]
 8004186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800418a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800418e:	e76c      	b.n	800406a <_printf_i+0xf6>
 8004190:	080043f9 	.word	0x080043f9
 8004194:	0800440a 	.word	0x0800440a

08004198 <memcpy>:
 8004198:	b510      	push	{r4, lr}
 800419a:	1e43      	subs	r3, r0, #1
 800419c:	440a      	add	r2, r1
 800419e:	4291      	cmp	r1, r2
 80041a0:	d100      	bne.n	80041a4 <memcpy+0xc>
 80041a2:	bd10      	pop	{r4, pc}
 80041a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ac:	e7f7      	b.n	800419e <memcpy+0x6>

080041ae <memmove>:
 80041ae:	4288      	cmp	r0, r1
 80041b0:	b510      	push	{r4, lr}
 80041b2:	eb01 0302 	add.w	r3, r1, r2
 80041b6:	d807      	bhi.n	80041c8 <memmove+0x1a>
 80041b8:	1e42      	subs	r2, r0, #1
 80041ba:	4299      	cmp	r1, r3
 80041bc:	d00a      	beq.n	80041d4 <memmove+0x26>
 80041be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80041c6:	e7f8      	b.n	80041ba <memmove+0xc>
 80041c8:	4283      	cmp	r3, r0
 80041ca:	d9f5      	bls.n	80041b8 <memmove+0xa>
 80041cc:	1881      	adds	r1, r0, r2
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	42d3      	cmn	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memmove+0x28>
 80041d4:	bd10      	pop	{r4, pc}
 80041d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041de:	e7f7      	b.n	80041d0 <memmove+0x22>

080041e0 <_free_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4605      	mov	r5, r0
 80041e4:	2900      	cmp	r1, #0
 80041e6:	d045      	beq.n	8004274 <_free_r+0x94>
 80041e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ec:	1f0c      	subs	r4, r1, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	18e4      	addlt	r4, r4, r3
 80041f4:	f000 f8d2 	bl	800439c <__malloc_lock>
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <_free_r+0x98>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	4610      	mov	r0, r2
 80041fe:	b933      	cbnz	r3, 800420e <_free_r+0x2e>
 8004200:	6063      	str	r3, [r4, #4]
 8004202:	6014      	str	r4, [r2, #0]
 8004204:	4628      	mov	r0, r5
 8004206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800420a:	f000 b8c8 	b.w	800439e <__malloc_unlock>
 800420e:	42a3      	cmp	r3, r4
 8004210:	d90c      	bls.n	800422c <_free_r+0x4c>
 8004212:	6821      	ldr	r1, [r4, #0]
 8004214:	1862      	adds	r2, r4, r1
 8004216:	4293      	cmp	r3, r2
 8004218:	bf04      	itt	eq
 800421a:	681a      	ldreq	r2, [r3, #0]
 800421c:	685b      	ldreq	r3, [r3, #4]
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	bf04      	itt	eq
 8004222:	1852      	addeq	r2, r2, r1
 8004224:	6022      	streq	r2, [r4, #0]
 8004226:	6004      	str	r4, [r0, #0]
 8004228:	e7ec      	b.n	8004204 <_free_r+0x24>
 800422a:	4613      	mov	r3, r2
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	b10a      	cbz	r2, 8004234 <_free_r+0x54>
 8004230:	42a2      	cmp	r2, r4
 8004232:	d9fa      	bls.n	800422a <_free_r+0x4a>
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	1858      	adds	r0, r3, r1
 8004238:	42a0      	cmp	r0, r4
 800423a:	d10b      	bne.n	8004254 <_free_r+0x74>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	4401      	add	r1, r0
 8004240:	1858      	adds	r0, r3, r1
 8004242:	4282      	cmp	r2, r0
 8004244:	6019      	str	r1, [r3, #0]
 8004246:	d1dd      	bne.n	8004204 <_free_r+0x24>
 8004248:	6810      	ldr	r0, [r2, #0]
 800424a:	6852      	ldr	r2, [r2, #4]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	4401      	add	r1, r0
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	e7d7      	b.n	8004204 <_free_r+0x24>
 8004254:	d902      	bls.n	800425c <_free_r+0x7c>
 8004256:	230c      	movs	r3, #12
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	e7d3      	b.n	8004204 <_free_r+0x24>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	1821      	adds	r1, r4, r0
 8004260:	428a      	cmp	r2, r1
 8004262:	bf04      	itt	eq
 8004264:	6811      	ldreq	r1, [r2, #0]
 8004266:	6852      	ldreq	r2, [r2, #4]
 8004268:	6062      	str	r2, [r4, #4]
 800426a:	bf04      	itt	eq
 800426c:	1809      	addeq	r1, r1, r0
 800426e:	6021      	streq	r1, [r4, #0]
 8004270:	605c      	str	r4, [r3, #4]
 8004272:	e7c7      	b.n	8004204 <_free_r+0x24>
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	20000094 	.word	0x20000094

0800427c <_malloc_r>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	1ccd      	adds	r5, r1, #3
 8004280:	f025 0503 	bic.w	r5, r5, #3
 8004284:	3508      	adds	r5, #8
 8004286:	2d0c      	cmp	r5, #12
 8004288:	bf38      	it	cc
 800428a:	250c      	movcc	r5, #12
 800428c:	2d00      	cmp	r5, #0
 800428e:	4606      	mov	r6, r0
 8004290:	db01      	blt.n	8004296 <_malloc_r+0x1a>
 8004292:	42a9      	cmp	r1, r5
 8004294:	d903      	bls.n	800429e <_malloc_r+0x22>
 8004296:	230c      	movs	r3, #12
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	2000      	movs	r0, #0
 800429c:	bd70      	pop	{r4, r5, r6, pc}
 800429e:	f000 f87d 	bl	800439c <__malloc_lock>
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <_malloc_r+0xac>)
 80042a4:	6814      	ldr	r4, [r2, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	b991      	cbnz	r1, 80042d0 <_malloc_r+0x54>
 80042aa:	4c20      	ldr	r4, [pc, #128]	; (800432c <_malloc_r+0xb0>)
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	b91b      	cbnz	r3, 80042b8 <_malloc_r+0x3c>
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f863 	bl	800437c <_sbrk_r>
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	4629      	mov	r1, r5
 80042ba:	4630      	mov	r0, r6
 80042bc:	f000 f85e 	bl	800437c <_sbrk_r>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d124      	bne.n	800430e <_malloc_r+0x92>
 80042c4:	230c      	movs	r3, #12
 80042c6:	6033      	str	r3, [r6, #0]
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 f868 	bl	800439e <__malloc_unlock>
 80042ce:	e7e4      	b.n	800429a <_malloc_r+0x1e>
 80042d0:	680b      	ldr	r3, [r1, #0]
 80042d2:	1b5b      	subs	r3, r3, r5
 80042d4:	d418      	bmi.n	8004308 <_malloc_r+0x8c>
 80042d6:	2b0b      	cmp	r3, #11
 80042d8:	d90f      	bls.n	80042fa <_malloc_r+0x7e>
 80042da:	600b      	str	r3, [r1, #0]
 80042dc:	50cd      	str	r5, [r1, r3]
 80042de:	18cc      	adds	r4, r1, r3
 80042e0:	4630      	mov	r0, r6
 80042e2:	f000 f85c 	bl	800439e <__malloc_unlock>
 80042e6:	f104 000b 	add.w	r0, r4, #11
 80042ea:	1d23      	adds	r3, r4, #4
 80042ec:	f020 0007 	bic.w	r0, r0, #7
 80042f0:	1ac3      	subs	r3, r0, r3
 80042f2:	d0d3      	beq.n	800429c <_malloc_r+0x20>
 80042f4:	425a      	negs	r2, r3
 80042f6:	50e2      	str	r2, [r4, r3]
 80042f8:	e7d0      	b.n	800429c <_malloc_r+0x20>
 80042fa:	428c      	cmp	r4, r1
 80042fc:	684b      	ldr	r3, [r1, #4]
 80042fe:	bf16      	itet	ne
 8004300:	6063      	strne	r3, [r4, #4]
 8004302:	6013      	streq	r3, [r2, #0]
 8004304:	460c      	movne	r4, r1
 8004306:	e7eb      	b.n	80042e0 <_malloc_r+0x64>
 8004308:	460c      	mov	r4, r1
 800430a:	6849      	ldr	r1, [r1, #4]
 800430c:	e7cc      	b.n	80042a8 <_malloc_r+0x2c>
 800430e:	1cc4      	adds	r4, r0, #3
 8004310:	f024 0403 	bic.w	r4, r4, #3
 8004314:	42a0      	cmp	r0, r4
 8004316:	d005      	beq.n	8004324 <_malloc_r+0xa8>
 8004318:	1a21      	subs	r1, r4, r0
 800431a:	4630      	mov	r0, r6
 800431c:	f000 f82e 	bl	800437c <_sbrk_r>
 8004320:	3001      	adds	r0, #1
 8004322:	d0cf      	beq.n	80042c4 <_malloc_r+0x48>
 8004324:	6025      	str	r5, [r4, #0]
 8004326:	e7db      	b.n	80042e0 <_malloc_r+0x64>
 8004328:	20000094 	.word	0x20000094
 800432c:	20000098 	.word	0x20000098

08004330 <_realloc_r>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	4607      	mov	r7, r0
 8004334:	4614      	mov	r4, r2
 8004336:	460e      	mov	r6, r1
 8004338:	b921      	cbnz	r1, 8004344 <_realloc_r+0x14>
 800433a:	4611      	mov	r1, r2
 800433c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004340:	f7ff bf9c 	b.w	800427c <_malloc_r>
 8004344:	b922      	cbnz	r2, 8004350 <_realloc_r+0x20>
 8004346:	f7ff ff4b 	bl	80041e0 <_free_r>
 800434a:	4625      	mov	r5, r4
 800434c:	4628      	mov	r0, r5
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	f000 f826 	bl	80043a0 <_malloc_usable_size_r>
 8004354:	42a0      	cmp	r0, r4
 8004356:	d20f      	bcs.n	8004378 <_realloc_r+0x48>
 8004358:	4621      	mov	r1, r4
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ff8e 	bl	800427c <_malloc_r>
 8004360:	4605      	mov	r5, r0
 8004362:	2800      	cmp	r0, #0
 8004364:	d0f2      	beq.n	800434c <_realloc_r+0x1c>
 8004366:	4631      	mov	r1, r6
 8004368:	4622      	mov	r2, r4
 800436a:	f7ff ff15 	bl	8004198 <memcpy>
 800436e:	4631      	mov	r1, r6
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff ff35 	bl	80041e0 <_free_r>
 8004376:	e7e9      	b.n	800434c <_realloc_r+0x1c>
 8004378:	4635      	mov	r5, r6
 800437a:	e7e7      	b.n	800434c <_realloc_r+0x1c>

0800437c <_sbrk_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4c06      	ldr	r4, [pc, #24]	; (8004398 <_sbrk_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4605      	mov	r5, r0
 8004384:	4608      	mov	r0, r1
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	f7ff fb6e 	bl	8003a68 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_sbrk_r+0x1a>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	b103      	cbz	r3, 8004396 <_sbrk_r+0x1a>
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	20000178 	.word	0x20000178

0800439c <__malloc_lock>:
 800439c:	4770      	bx	lr

0800439e <__malloc_unlock>:
 800439e:	4770      	bx	lr

080043a0 <_malloc_usable_size_r>:
 80043a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a4:	1f18      	subs	r0, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bfbc      	itt	lt
 80043aa:	580b      	ldrlt	r3, [r1, r0]
 80043ac:	18c0      	addlt	r0, r0, r3
 80043ae:	4770      	bx	lr

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
