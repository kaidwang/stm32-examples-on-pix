
uart_it_stm32F427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026fc  080026fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002704  08002704  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800270c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002718  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002718  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000133a  00000000  00000000  000266fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00027a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  000280c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211ad  00000000  00000000  000286a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005d52  00000000  00000000  0004984d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca364  00000000  00000000  0004f59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a0  00000000  00000000  00119980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080026cc 	.word	0x080026cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080026cc 	.word	0x080026cc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f92b 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f001 ffa6 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f943 	bl	80007da <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f90b 	bl	8000786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <__NVIC_EnableIRQ+0x38>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f7ff ff8e 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff29 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff3e 	bl	8000618 <__NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff8e 	bl	80006c4 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5d 	bl	8000670 <__NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff31 	bl	8000634 <__NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b02      	cmp	r3, #2
 8000804:	d004      	beq.n	8000810 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e00c      	b.n	800082a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2205      	movs	r2, #5
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0201 	bic.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	e177      	b.n	8000b44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000854:	2201      	movs	r2, #1
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	429a      	cmp	r2, r3
 800086e:	f040 8166 	bne.w	8000b3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d00b      	beq.n	8000892 <HAL_GPIO_Init+0x5a>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d007      	beq.n	8000892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000886:	2b11      	cmp	r3, #17
 8000888:	d003      	beq.n	8000892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b12      	cmp	r3, #18
 8000890:	d130      	bne.n	80008f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4013      	ands	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c8:	2201      	movs	r2, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	f003 0201 	and.w	r2, r3, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0xfc>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b12      	cmp	r3, #18
 8000932:	d123      	bne.n	800097c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	220f      	movs	r2, #15
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	69b9      	ldr	r1, [r7, #24]
 8000978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0203 	and.w	r2, r3, #3
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f000 80c0 	beq.w	8000b3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <HAL_GPIO_Init+0x320>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a64      	ldr	r2, [pc, #400]	; (8000b58 <HAL_GPIO_Init+0x320>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <HAL_GPIO_Init+0x320>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009da:	4a60      	ldr	r2, [pc, #384]	; (8000b5c <HAL_GPIO_Init+0x324>)
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <HAL_GPIO_Init+0x328>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d037      	beq.n	8000a76 <HAL_GPIO_Init+0x23e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <HAL_GPIO_Init+0x32c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d031      	beq.n	8000a72 <HAL_GPIO_Init+0x23a>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a55      	ldr	r2, [pc, #340]	; (8000b68 <HAL_GPIO_Init+0x330>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d02b      	beq.n	8000a6e <HAL_GPIO_Init+0x236>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a54      	ldr	r2, [pc, #336]	; (8000b6c <HAL_GPIO_Init+0x334>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d025      	beq.n	8000a6a <HAL_GPIO_Init+0x232>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a53      	ldr	r2, [pc, #332]	; (8000b70 <HAL_GPIO_Init+0x338>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01f      	beq.n	8000a66 <HAL_GPIO_Init+0x22e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a52      	ldr	r2, [pc, #328]	; (8000b74 <HAL_GPIO_Init+0x33c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d019      	beq.n	8000a62 <HAL_GPIO_Init+0x22a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x340>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x226>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_GPIO_Init+0x344>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x222>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_GPIO_Init+0x348>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x21e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x21a>
 8000a4e:	2309      	movs	r3, #9
 8000a50:	e012      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a52:	230a      	movs	r3, #10
 8000a54:	e010      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a56:	2308      	movs	r3, #8
 8000a58:	e00e      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	e00c      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a5e:	2306      	movs	r3, #6
 8000a60:	e00a      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a62:	2305      	movs	r3, #5
 8000a64:	e008      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a66:	2304      	movs	r3, #4
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x240>
 8000a76:	2300      	movs	r3, #0
 8000a78:	69fa      	ldr	r2, [r7, #28]
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a88:	4934      	ldr	r1, [pc, #208]	; (8000b5c <HAL_GPIO_Init+0x324>)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a96:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae4:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_GPIO_Init+0x350>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	f67f ae84 	bls.w	8000854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3724      	adds	r7, #36	; 0x24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40021c00 	.word	0x40021c00
 8000b80:	40022000 	.word	0x40022000
 8000b84:	40022400 	.word	0x40022400
 8000b88:	40013c00 	.word	0x40013c00

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e25b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d075      	beq.n	8000c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000baa:	4ba3      	ldr	r3, [pc, #652]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d00c      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb6:	4ba0      	ldr	r3, [pc, #640]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d112      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	4b9d      	ldr	r3, [pc, #628]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bce:	d10b      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	4b99      	ldr	r3, [pc, #612]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d05b      	beq.n	8000c94 <HAL_RCC_OscConfig+0x108>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d157      	bne.n	8000c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e236      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d106      	bne.n	8000c00 <HAL_RCC_OscConfig+0x74>
 8000bf2:	4b91      	ldr	r3, [pc, #580]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a90      	ldr	r2, [pc, #576]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01d      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b8b      	ldr	r3, [pc, #556]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a8a      	ldr	r2, [pc, #552]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b88      	ldr	r3, [pc, #544]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a87      	ldr	r2, [pc, #540]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c24:	4b84      	ldr	r3, [pc, #528]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a83      	ldr	r2, [pc, #524]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b81      	ldr	r3, [pc, #516]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a80      	ldr	r2, [pc, #512]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d013      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fcb8 	bl	80005b8 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fcb4 	bl	80005b8 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1fb      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	4b76      	ldr	r3, [pc, #472]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xc0>
 8000c6a:	e014      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fca4 	bl	80005b8 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fca0 	bl	80005b8 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1e7      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0xe8>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d063      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1bb      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4952      	ldr	r1, [pc, #328]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e03a      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <HAL_RCC_OscConfig+0x2b0>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d02:	f7ff fc59 	bl	80005b8 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc55 	bl	80005b8 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e19c      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4940      	ldr	r1, [pc, #256]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <HAL_RCC_OscConfig+0x2b0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d44:	f7ff fc38 	bl	80005b8 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc34 	bl	80005b8 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e17b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d030      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d016      	beq.n	8000dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <HAL_RCC_OscConfig+0x2b4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d84:	f7ff fc18 	bl	80005b8 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc14 	bl	80005b8 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e15b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x200>
 8000daa:	e015      	b.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_RCC_OscConfig+0x2b4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fc01 	bl	80005b8 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fbfd 	bl	80005b8 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e144      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f0      	bne.n	8000dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a0 	beq.w	8000f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d121      	bne.n	8000e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbc3 	bl	80005b8 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	e011      	b.n	8000e5a <HAL_RCC_OscConfig+0x2ce>
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	42470000 	.word	0x42470000
 8000e40:	42470e80 	.word	0x42470e80
 8000e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e48:	f7ff fbb6 	bl	80005b8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e0fd      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_RCC_OscConfig+0x4d4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d106      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
 8000e6e:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e72:	4a7c      	ldr	r2, [pc, #496]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7a:	e01c      	b.n	8000eb6 <HAL_RCC_OscConfig+0x32a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e84:	4b77      	ldr	r3, [pc, #476]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e88:	4a76      	ldr	r2, [pc, #472]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e90:	4b74      	ldr	r3, [pc, #464]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e94:	4a73      	ldr	r2, [pc, #460]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9c:	e00b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x32a>
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea2:	4a70      	ldr	r2, [pc, #448]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eae:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d015      	beq.n	8000eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fb7b 	bl	80005b8 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fb77 	bl	80005b8 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e0bc      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	4b61      	ldr	r3, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ee      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x33a>
 8000ee8:	e014      	b.n	8000f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fb65 	bl	80005b8 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	e00a      	b.n	8000f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fb61 	bl	80005b8 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0a6      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	4b56      	ldr	r3, [pc, #344]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ee      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d105      	bne.n	8000f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1a:	4b52      	ldr	r3, [pc, #328]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8092 	beq.w	8001054 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d05c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d141      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f44:	4b48      	ldr	r3, [pc, #288]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fb35 	bl	80005b8 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f52:	f7ff fb31 	bl	80005b8 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e078      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	019b      	lsls	r3, r3, #6
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	061b      	lsls	r3, r3, #24
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fb0a 	bl	80005b8 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fb06 	bl	80005b8 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e04d      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
 8000fc6:	e045      	b.n	8001054 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff faf3 	bl	80005b8 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd6:	f7ff faef 	bl	80005b8 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e036      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x44a>
 8000ff4:	e02e      	b.n	8001054 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e029      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	429a      	cmp	r2, r3
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d115      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800102a:	4013      	ands	r3, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001030:	4293      	cmp	r3, r2
 8001032:	d10d      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800103e:	429a      	cmp	r2, r3
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000
 8001064:	40023800 	.word	0x40023800
 8001068:	42470060 	.word	0x42470060

0800106c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0cc      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d90c      	bls.n	80010a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0b8      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	494d      	ldr	r1, [pc, #308]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d044      	beq.n	800118c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d119      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e07f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d003      	beq.n	800112a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001126:	2b03      	cmp	r3, #3
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e06f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e067      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f023 0203 	bic.w	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4934      	ldr	r1, [pc, #208]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	4313      	orrs	r3, r2
 800115a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800115c:	f7ff fa2c 	bl	80005b8 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	e00a      	b.n	800117a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f7ff fa28 	bl	80005b8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e04f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 020c 	and.w	r2, r3, #12
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	429a      	cmp	r2, r3
 800118a:	d1eb      	bne.n	8001164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d20c      	bcs.n	80011b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e032      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4916      	ldr	r1, [pc, #88]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d009      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	490e      	ldr	r1, [pc, #56]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f2:	f000 f821 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80011f6:	4601      	mov	r1, r0
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	fa21 f303 	lsr.w	r3, r1, r3
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_ClockConfig+0x1c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f98c 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00
 8001228:	40023800 	.word	0x40023800
 800122c:	080026e4 	.word	0x080026e4
 8001230:	20000008 	.word	0x20000008
 8001234:	20000000 	.word	0x20000000

08001238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d007      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x32>
 800125a:	2b08      	cmp	r3, #8
 800125c:	d008      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x38>
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 808d 	bne.w	800137e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001266:	60bb      	str	r3, [r7, #8]
       break;
 8001268:	e08c      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800126a:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 800126c:	60bb      	str	r3, [r7, #8]
      break;
 800126e:	e089      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d023      	beq.n	80012ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	099b      	lsrs	r3, r3, #6
 800128c:	f04f 0400 	mov.w	r4, #0
 8001290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	ea03 0501 	and.w	r5, r3, r1
 800129c:	ea04 0602 	and.w	r6, r4, r2
 80012a0:	4a3d      	ldr	r2, [pc, #244]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 80012a2:	fb02 f106 	mul.w	r1, r2, r6
 80012a6:	2200      	movs	r2, #0
 80012a8:	fb02 f205 	mul.w	r2, r2, r5
 80012ac:	440a      	add	r2, r1
 80012ae:	493a      	ldr	r1, [pc, #232]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 80012b0:	fba5 0101 	umull	r0, r1, r5, r1
 80012b4:	1853      	adds	r3, r2, r1
 80012b6:	4619      	mov	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f04f 0400 	mov.w	r4, #0
 80012be:	461a      	mov	r2, r3
 80012c0:	4623      	mov	r3, r4
 80012c2:	f7fe ff93 	bl	80001ec <__aeabi_uldivmod>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e049      	b.n	8001362 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	ea03 0501 	and.w	r5, r3, r1
 80012e4:	ea04 0602 	and.w	r6, r4, r2
 80012e8:	4629      	mov	r1, r5
 80012ea:	4632      	mov	r2, r6
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	f04f 0400 	mov.w	r4, #0
 80012f4:	0154      	lsls	r4, r2, #5
 80012f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012fa:	014b      	lsls	r3, r1, #5
 80012fc:	4619      	mov	r1, r3
 80012fe:	4622      	mov	r2, r4
 8001300:	1b49      	subs	r1, r1, r5
 8001302:	eb62 0206 	sbc.w	r2, r2, r6
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	f04f 0400 	mov.w	r4, #0
 800130e:	0194      	lsls	r4, r2, #6
 8001310:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001314:	018b      	lsls	r3, r1, #6
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	eb64 0402 	sbc.w	r4, r4, r2
 800131c:	f04f 0100 	mov.w	r1, #0
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	00e2      	lsls	r2, r4, #3
 8001326:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800132a:	00d9      	lsls	r1, r3, #3
 800132c:	460b      	mov	r3, r1
 800132e:	4614      	mov	r4, r2
 8001330:	195b      	adds	r3, r3, r5
 8001332:	eb44 0406 	adc.w	r4, r4, r6
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	02a2      	lsls	r2, r4, #10
 8001340:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001344:	0299      	lsls	r1, r3, #10
 8001346:	460b      	mov	r3, r1
 8001348:	4614      	mov	r4, r2
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f04f 0400 	mov.w	r4, #0
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	f7fe ff48 	bl	80001ec <__aeabi_uldivmod>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	3301      	adds	r3, #1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	60bb      	str	r3, [r7, #8]
      break;
 800137c:	e002      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001380:	60bb      	str	r3, [r7, #8]
      break;
 8001382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	00f42400 	.word	0x00f42400
 8001398:	016e3600 	.word	0x016e3600

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff0 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013bc:	4601      	mov	r1, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	080026f4 	.word	0x080026f4

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffdc 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013e4:	4601      	mov	r1, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	0b5b      	lsrs	r3, r3, #13
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	080026f4 	.word	0x080026f4

08001404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e03f      	b.n	8001496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f001 f848 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fb97 	bl	8001b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800145c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800146c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800147c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b088      	sub	sp, #32
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	f040 8083 	bne.w	80015c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_UART_Transmit+0x2e>
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e07b      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_UART_Transmit+0x40>
 80014da:	2302      	movs	r3, #2
 80014dc:	e074      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2221      	movs	r2, #33	; 0x21
 80014f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014f4:	f7ff f860 	bl	80005b8 <HAL_GetTick>
 80014f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800150e:	e042      	b.n	8001596 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001526:	d122      	bne.n	800156e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2200      	movs	r2, #0
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f9b6 	bl	80018a4 <UART_WaitOnFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e042      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001554:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3302      	adds	r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	e017      	b.n	8001596 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e013      	b.n	8001596 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f993 	bl	80018a4 <UART_WaitOnFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e01f      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1b7      	bne.n	8001510 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2200      	movs	r2, #0
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f97a 	bl	80018a4 <UART_WaitOnFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e006      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80015c6:	2302      	movs	r3, #2
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d140      	bne.n	800166c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_UART_Receive_IT+0x26>
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e039      	b.n	800166e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_UART_Receive_IT+0x38>
 8001604:	2302      	movs	r3, #2
 8001606:	e032      	b.n	800166e <HAL_UART_Receive_IT+0x9e>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2222      	movs	r2, #34	; 0x22
 800162c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001646:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800166c:	2302      	movs	r3, #2
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_UART_IRQHandler+0x52>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f9d6 	bl	8001a78 <UART_Receive_IT>
      return;
 80016cc:	e0d1      	b.n	8001872 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80b0 	beq.w	8001836 <HAL_UART_IRQHandler+0x1ba>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_UART_IRQHandler+0x70>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a5 	beq.w	8001836 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_UART_IRQHandler+0x90>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_UART_IRQHandler+0xb0>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <HAL_UART_IRQHandler+0xd0>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f043 0204 	orr.w	r2, r3, #4
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00f      	beq.n	8001776 <HAL_UART_IRQHandler+0xfa>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <HAL_UART_IRQHandler+0xee>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	f043 0208 	orr.w	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d078      	beq.n	8001870 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_UART_IRQHandler+0x11c>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f970 	bl	8001a78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_UART_IRQHandler+0x144>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d031      	beq.n	8001824 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8b9 	bl	8001938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b40      	cmp	r3, #64	; 0x40
 80017d2:	d123      	bne.n	800181c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_UART_IRQHandler+0x1fc>)
 80017f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fffa 	bl	80007f2 <HAL_DMA_Abort_IT>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d016      	beq.n	8001832 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180e:	4610      	mov	r0, r2
 8001810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001812:	e00e      	b.n	8001832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f83b 	bl	8001890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800181a:	e00a      	b.n	8001832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f837 	bl	8001890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001822:	e006      	b.n	8001832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f833 	bl	8001890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001830:	e01e      	b.n	8001870 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001832:	bf00      	nop
    return;
 8001834:	e01c      	b.n	8001870 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_UART_IRQHandler+0x1d6>
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8a6 	bl	800199c <UART_Transmit_IT>
    return;
 8001850:	e00f      	b.n	8001872 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <HAL_UART_IRQHandler+0x1f6>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f8ee 	bl	8001a48 <UART_EndTransmit_IT>
    return;
 800186c:	bf00      	nop
 800186e:	e000      	b.n	8001872 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001870:	bf00      	nop
  }
}
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08001975 	.word	0x08001975

0800187c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018b4:	e02c      	b.n	8001910 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d028      	beq.n	8001910 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80018c4:	f7fe fe78 	bl	80005b8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d21d      	bcs.n	8001910 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e00f      	b.n	8001930 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4013      	ands	r3, r2
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	429a      	cmp	r2, r3
 800192c:	d0c3      	beq.n	80018b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800194e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff7e 	bl	8001890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b21      	cmp	r3, #33	; 0x21
 80019ae:	d144      	bne.n	8001a3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b8:	d11a      	bne.n	80019f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	1c9a      	adds	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	e00e      	b.n	8001a02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	621a      	str	r2, [r3, #32]
 80019ee:	e008      	b.n	8001a02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6211      	str	r1, [r2, #32]
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff07 	bl	800187c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b22      	cmp	r3, #34	; 0x22
 8001a8a:	d171      	bne.n	8001b70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a94:	d123      	bne.n	8001ade <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10e      	bne.n	8001ac2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	1c9a      	adds	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac0:	e029      	b.n	8001b16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
 8001adc:	e01b      	b.n	8001b16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6858      	ldr	r0, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	1c59      	adds	r1, r3, #1
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6291      	str	r1, [r2, #40]	; 0x28
 8001af6:	b2c2      	uxtb	r2, r0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e00c      	b.n	8001b16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	1c58      	adds	r0, r3, #1
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	6288      	str	r0, [r1, #40]	; 0x28
 8001b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4619      	mov	r1, r3
 8001b24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d120      	bne.n	8001b6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0220 	bic.w	r2, r2, #32
 8001b38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fc64 	bl	8002430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e002      	b.n	8001b72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001bbe:	f023 030c 	bic.w	r3, r3, #12
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68f9      	ldr	r1, [r7, #12]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bea:	f040 818b 	bne.w	8001f04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4ac1      	ldr	r2, [pc, #772]	; (8001ef8 <UART_SetConfig+0x37c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d005      	beq.n	8001c04 <UART_SetConfig+0x88>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4abf      	ldr	r2, [pc, #764]	; (8001efc <UART_SetConfig+0x380>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f040 80bd 	bne.w	8001d7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c04:	f7ff fbea 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8001c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	f04f 0600 	mov.w	r6, #0
 8001c12:	46a8      	mov	r8, r5
 8001c14:	46b1      	mov	r9, r6
 8001c16:	eb18 0308 	adds.w	r3, r8, r8
 8001c1a:	eb49 0409 	adc.w	r4, r9, r9
 8001c1e:	4698      	mov	r8, r3
 8001c20:	46a1      	mov	r9, r4
 8001c22:	eb18 0805 	adds.w	r8, r8, r5
 8001c26:	eb49 0906 	adc.w	r9, r9, r6
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c3e:	4688      	mov	r8, r1
 8001c40:	4691      	mov	r9, r2
 8001c42:	eb18 0005 	adds.w	r0, r8, r5
 8001c46:	eb49 0106 	adc.w	r1, r9, r6
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	461d      	mov	r5, r3
 8001c50:	f04f 0600 	mov.w	r6, #0
 8001c54:	196b      	adds	r3, r5, r5
 8001c56:	eb46 0406 	adc.w	r4, r6, r6
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	f7fe fac5 	bl	80001ec <__aeabi_uldivmod>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	461a      	mov	r2, r3
 8001c68:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <UART_SetConfig+0x384>)
 8001c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	461d      	mov	r5, r3
 8001c78:	f04f 0600 	mov.w	r6, #0
 8001c7c:	46a9      	mov	r9, r5
 8001c7e:	46b2      	mov	sl, r6
 8001c80:	eb19 0309 	adds.w	r3, r9, r9
 8001c84:	eb4a 040a 	adc.w	r4, sl, sl
 8001c88:	4699      	mov	r9, r3
 8001c8a:	46a2      	mov	sl, r4
 8001c8c:	eb19 0905 	adds.w	r9, r9, r5
 8001c90:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ca8:	4689      	mov	r9, r1
 8001caa:	4692      	mov	sl, r2
 8001cac:	eb19 0005 	adds.w	r0, r9, r5
 8001cb0:	eb4a 0106 	adc.w	r1, sl, r6
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	461d      	mov	r5, r3
 8001cba:	f04f 0600 	mov.w	r6, #0
 8001cbe:	196b      	adds	r3, r5, r5
 8001cc0:	eb46 0406 	adc.w	r4, r6, r6
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	f7fe fa90 	bl	80001ec <__aeabi_uldivmod>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <UART_SetConfig+0x384>)
 8001cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	3332      	adds	r3, #50	; 0x32
 8001ce6:	4a86      	ldr	r2, [pc, #536]	; (8001f00 <UART_SetConfig+0x384>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cf4:	4498      	add	r8, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	f04f 0600 	mov.w	r6, #0
 8001cfe:	46a9      	mov	r9, r5
 8001d00:	46b2      	mov	sl, r6
 8001d02:	eb19 0309 	adds.w	r3, r9, r9
 8001d06:	eb4a 040a 	adc.w	r4, sl, sl
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	46a2      	mov	sl, r4
 8001d0e:	eb19 0905 	adds.w	r9, r9, r5
 8001d12:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d2a:	4689      	mov	r9, r1
 8001d2c:	4692      	mov	sl, r2
 8001d2e:	eb19 0005 	adds.w	r0, r9, r5
 8001d32:	eb4a 0106 	adc.w	r1, sl, r6
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	f04f 0600 	mov.w	r6, #0
 8001d40:	196b      	adds	r3, r5, r5
 8001d42:	eb46 0406 	adc.w	r4, r6, r6
 8001d46:	461a      	mov	r2, r3
 8001d48:	4623      	mov	r3, r4
 8001d4a:	f7fe fa4f 	bl	80001ec <__aeabi_uldivmod>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <UART_SetConfig+0x384>)
 8001d56:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2164      	movs	r1, #100	; 0x64
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	3332      	adds	r3, #50	; 0x32
 8001d68:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <UART_SetConfig+0x384>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	f003 0207 	and.w	r2, r3, #7
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4442      	add	r2, r8
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e26f      	b.n	800225e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d7e:	f7ff fb19 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8001d82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	461d      	mov	r5, r3
 8001d88:	f04f 0600 	mov.w	r6, #0
 8001d8c:	46a8      	mov	r8, r5
 8001d8e:	46b1      	mov	r9, r6
 8001d90:	eb18 0308 	adds.w	r3, r8, r8
 8001d94:	eb49 0409 	adc.w	r4, r9, r9
 8001d98:	4698      	mov	r8, r3
 8001d9a:	46a1      	mov	r9, r4
 8001d9c:	eb18 0805 	adds.w	r8, r8, r5
 8001da0:	eb49 0906 	adc.w	r9, r9, r6
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001db0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001db4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001db8:	4688      	mov	r8, r1
 8001dba:	4691      	mov	r9, r2
 8001dbc:	eb18 0005 	adds.w	r0, r8, r5
 8001dc0:	eb49 0106 	adc.w	r1, r9, r6
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	461d      	mov	r5, r3
 8001dca:	f04f 0600 	mov.w	r6, #0
 8001dce:	196b      	adds	r3, r5, r5
 8001dd0:	eb46 0406 	adc.w	r4, r6, r6
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7fe fa08 	bl	80001ec <__aeabi_uldivmod>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <UART_SetConfig+0x384>)
 8001de4:	fba3 2302 	umull	r2, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	461d      	mov	r5, r3
 8001df2:	f04f 0600 	mov.w	r6, #0
 8001df6:	46a9      	mov	r9, r5
 8001df8:	46b2      	mov	sl, r6
 8001dfa:	eb19 0309 	adds.w	r3, r9, r9
 8001dfe:	eb4a 040a 	adc.w	r4, sl, sl
 8001e02:	4699      	mov	r9, r3
 8001e04:	46a2      	mov	sl, r4
 8001e06:	eb19 0905 	adds.w	r9, r9, r5
 8001e0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e22:	4689      	mov	r9, r1
 8001e24:	4692      	mov	sl, r2
 8001e26:	eb19 0005 	adds.w	r0, r9, r5
 8001e2a:	eb4a 0106 	adc.w	r1, sl, r6
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	461d      	mov	r5, r3
 8001e34:	f04f 0600 	mov.w	r6, #0
 8001e38:	196b      	adds	r3, r5, r5
 8001e3a:	eb46 0406 	adc.w	r4, r6, r6
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4623      	mov	r3, r4
 8001e42:	f7fe f9d3 	bl	80001ec <__aeabi_uldivmod>
 8001e46:	4603      	mov	r3, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <UART_SetConfig+0x384>)
 8001e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2164      	movs	r1, #100	; 0x64
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <UART_SetConfig+0x384>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e6e:	4498      	add	r8, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	461d      	mov	r5, r3
 8001e74:	f04f 0600 	mov.w	r6, #0
 8001e78:	46a9      	mov	r9, r5
 8001e7a:	46b2      	mov	sl, r6
 8001e7c:	eb19 0309 	adds.w	r3, r9, r9
 8001e80:	eb4a 040a 	adc.w	r4, sl, sl
 8001e84:	4699      	mov	r9, r3
 8001e86:	46a2      	mov	sl, r4
 8001e88:	eb19 0905 	adds.w	r9, r9, r5
 8001e8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ea0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ea4:	4689      	mov	r9, r1
 8001ea6:	4692      	mov	sl, r2
 8001ea8:	eb19 0005 	adds.w	r0, r9, r5
 8001eac:	eb4a 0106 	adc.w	r1, sl, r6
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	f04f 0600 	mov.w	r6, #0
 8001eba:	196b      	adds	r3, r5, r5
 8001ebc:	eb46 0406 	adc.w	r4, r6, r6
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	f7fe f992 	bl	80001ec <__aeabi_uldivmod>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <UART_SetConfig+0x384>)
 8001ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	2164      	movs	r1, #100	; 0x64
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	3332      	adds	r3, #50	; 0x32
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <UART_SetConfig+0x384>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4442      	add	r2, r8
 8001ef4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001ef6:	e1b2      	b.n	800225e <UART_SetConfig+0x6e2>
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40011400 	.word	0x40011400
 8001f00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4ad7      	ldr	r2, [pc, #860]	; (8002268 <UART_SetConfig+0x6ec>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d005      	beq.n	8001f1a <UART_SetConfig+0x39e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4ad6      	ldr	r2, [pc, #856]	; (800226c <UART_SetConfig+0x6f0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	f040 80d1 	bne.w	80020bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f1a:	f7ff fa5f 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8001f1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	469a      	mov	sl, r3
 8001f24:	f04f 0b00 	mov.w	fp, #0
 8001f28:	46d0      	mov	r8, sl
 8001f2a:	46d9      	mov	r9, fp
 8001f2c:	eb18 0308 	adds.w	r3, r8, r8
 8001f30:	eb49 0409 	adc.w	r4, r9, r9
 8001f34:	4698      	mov	r8, r3
 8001f36:	46a1      	mov	r9, r4
 8001f38:	eb18 080a 	adds.w	r8, r8, sl
 8001f3c:	eb49 090b 	adc.w	r9, r9, fp
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f54:	4688      	mov	r8, r1
 8001f56:	4691      	mov	r9, r2
 8001f58:	eb1a 0508 	adds.w	r5, sl, r8
 8001f5c:	eb4b 0609 	adc.w	r6, fp, r9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	f04f 0400 	mov.w	r4, #0
 8001f72:	0094      	lsls	r4, r2, #2
 8001f74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f78:	008b      	lsls	r3, r1, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	4631      	mov	r1, r6
 8001f82:	f7fe f933 	bl	80001ec <__aeabi_uldivmod>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4bb8      	ldr	r3, [pc, #736]	; (8002270 <UART_SetConfig+0x6f4>)
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	f04f 0c00 	mov.w	ip, #0
 8001fa0:	46d9      	mov	r9, fp
 8001fa2:	46e2      	mov	sl, ip
 8001fa4:	eb19 0309 	adds.w	r3, r9, r9
 8001fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8001fac:	4699      	mov	r9, r3
 8001fae:	46a2      	mov	sl, r4
 8001fb0:	eb19 090b 	adds.w	r9, r9, fp
 8001fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fcc:	4689      	mov	r9, r1
 8001fce:	4692      	mov	sl, r2
 8001fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8001fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0094      	lsls	r4, r2, #2
 8001fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ff0:	008b      	lsls	r3, r1, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	4631      	mov	r1, r6
 8001ffa:	f7fe f8f7 	bl	80001ec <__aeabi_uldivmod>
 8001ffe:	4603      	mov	r3, r0
 8002000:	460c      	mov	r4, r1
 8002002:	461a      	mov	r2, r3
 8002004:	4b9a      	ldr	r3, [pc, #616]	; (8002270 <UART_SetConfig+0x6f4>)
 8002006:	fba3 1302 	umull	r1, r3, r3, r2
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2164      	movs	r1, #100	; 0x64
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	3332      	adds	r3, #50	; 0x32
 8002018:	4a95      	ldr	r2, [pc, #596]	; (8002270 <UART_SetConfig+0x6f4>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002024:	4498      	add	r8, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	469b      	mov	fp, r3
 800202a:	f04f 0c00 	mov.w	ip, #0
 800202e:	46d9      	mov	r9, fp
 8002030:	46e2      	mov	sl, ip
 8002032:	eb19 0309 	adds.w	r3, r9, r9
 8002036:	eb4a 040a 	adc.w	r4, sl, sl
 800203a:	4699      	mov	r9, r3
 800203c:	46a2      	mov	sl, r4
 800203e:	eb19 090b 	adds.w	r9, r9, fp
 8002042:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002052:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002056:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800205a:	4689      	mov	r9, r1
 800205c:	4692      	mov	sl, r2
 800205e:	eb1b 0509 	adds.w	r5, fp, r9
 8002062:	eb4c 060a 	adc.w	r6, ip, sl
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0094      	lsls	r4, r2, #2
 800207a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800207e:	008b      	lsls	r3, r1, #2
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	4628      	mov	r0, r5
 8002086:	4631      	mov	r1, r6
 8002088:	f7fe f8b0 	bl	80001ec <__aeabi_uldivmod>
 800208c:	4603      	mov	r3, r0
 800208e:	460c      	mov	r4, r1
 8002090:	461a      	mov	r2, r3
 8002092:	4b77      	ldr	r3, [pc, #476]	; (8002270 <UART_SetConfig+0x6f4>)
 8002094:	fba3 1302 	umull	r1, r3, r3, r2
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	2164      	movs	r1, #100	; 0x64
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	3332      	adds	r3, #50	; 0x32
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <UART_SetConfig+0x6f4>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4442      	add	r2, r8
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	e0d0      	b.n	800225e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020bc:	f7ff f97a 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 80020c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	469a      	mov	sl, r3
 80020c6:	f04f 0b00 	mov.w	fp, #0
 80020ca:	46d0      	mov	r8, sl
 80020cc:	46d9      	mov	r9, fp
 80020ce:	eb18 0308 	adds.w	r3, r8, r8
 80020d2:	eb49 0409 	adc.w	r4, r9, r9
 80020d6:	4698      	mov	r8, r3
 80020d8:	46a1      	mov	r9, r4
 80020da:	eb18 080a 	adds.w	r8, r8, sl
 80020de:	eb49 090b 	adc.w	r9, r9, fp
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020f6:	4688      	mov	r8, r1
 80020f8:	4691      	mov	r9, r2
 80020fa:	eb1a 0508 	adds.w	r5, sl, r8
 80020fe:	eb4b 0609 	adc.w	r6, fp, r9
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	f04f 0400 	mov.w	r4, #0
 8002114:	0094      	lsls	r4, r2, #2
 8002116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800211a:	008b      	lsls	r3, r1, #2
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	4628      	mov	r0, r5
 8002122:	4631      	mov	r1, r6
 8002124:	f7fe f862 	bl	80001ec <__aeabi_uldivmod>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	461a      	mov	r2, r3
 800212e:	4b50      	ldr	r3, [pc, #320]	; (8002270 <UART_SetConfig+0x6f4>)
 8002130:	fba3 2302 	umull	r2, r3, r3, r2
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	469b      	mov	fp, r3
 800213e:	f04f 0c00 	mov.w	ip, #0
 8002142:	46d9      	mov	r9, fp
 8002144:	46e2      	mov	sl, ip
 8002146:	eb19 0309 	adds.w	r3, r9, r9
 800214a:	eb4a 040a 	adc.w	r4, sl, sl
 800214e:	4699      	mov	r9, r3
 8002150:	46a2      	mov	sl, r4
 8002152:	eb19 090b 	adds.w	r9, r9, fp
 8002156:	eb4a 0a0c 	adc.w	sl, sl, ip
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800216a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800216e:	4689      	mov	r9, r1
 8002170:	4692      	mov	sl, r2
 8002172:	eb1b 0509 	adds.w	r5, fp, r9
 8002176:	eb4c 060a 	adc.w	r6, ip, sl
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	0094      	lsls	r4, r2, #2
 800218e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002192:	008b      	lsls	r3, r1, #2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	4628      	mov	r0, r5
 800219a:	4631      	mov	r1, r6
 800219c:	f7fe f826 	bl	80001ec <__aeabi_uldivmod>
 80021a0:	4603      	mov	r3, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <UART_SetConfig+0x6f4>)
 80021a8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	2164      	movs	r1, #100	; 0x64
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	3332      	adds	r3, #50	; 0x32
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <UART_SetConfig+0x6f4>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c6:	4498      	add	r8, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	469b      	mov	fp, r3
 80021cc:	f04f 0c00 	mov.w	ip, #0
 80021d0:	46d9      	mov	r9, fp
 80021d2:	46e2      	mov	sl, ip
 80021d4:	eb19 0309 	adds.w	r3, r9, r9
 80021d8:	eb4a 040a 	adc.w	r4, sl, sl
 80021dc:	4699      	mov	r9, r3
 80021de:	46a2      	mov	sl, r4
 80021e0:	eb19 090b 	adds.w	r9, r9, fp
 80021e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021fc:	4689      	mov	r9, r1
 80021fe:	4692      	mov	sl, r2
 8002200:	eb1b 0509 	adds.w	r5, fp, r9
 8002204:	eb4c 060a 	adc.w	r6, ip, sl
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	0094      	lsls	r4, r2, #2
 800221c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002220:	008b      	lsls	r3, r1, #2
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	4628      	mov	r0, r5
 8002228:	4631      	mov	r1, r6
 800222a:	f7fd ffdf 	bl	80001ec <__aeabi_uldivmod>
 800222e:	4603      	mov	r3, r0
 8002230:	460c      	mov	r4, r1
 8002232:	461a      	mov	r2, r3
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <UART_SetConfig+0x6f4>)
 8002236:	fba3 1302 	umull	r1, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2164      	movs	r1, #100	; 0x64
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	3332      	adds	r3, #50	; 0x32
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <UART_SetConfig+0x6f4>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	f003 020f 	and.w	r2, r3, #15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4442      	add	r2, r8
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	e7ff      	b.n	800225e <UART_SetConfig+0x6e2>
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002278:	f7fe f938 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227c:	f000 f806 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002280:	f000 f8a0 	bl	80023c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002284:	f000 f86c 	bl	8002360 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002288:	e7fe      	b.n	8002288 <main+0x14>
	...

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2230      	movs	r2, #48	; 0x30
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fa0e 	bl	80026bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <SystemClock_Config+0xcc>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <SystemClock_Config+0xcc>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <SystemClock_Config+0xcc>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <SystemClock_Config+0xd0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <SystemClock_Config+0xd0>)
 80022da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <SystemClock_Config+0xd0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002300:	230c      	movs	r3, #12
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002304:	2348      	movs	r3, #72	; 0x48
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002308:	2302      	movs	r3, #2
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800230c:	2304      	movs	r3, #4
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002310:	f107 0320 	add.w	r3, r7, #32
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fc39 	bl	8000b8c <HAL_RCC_OscConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002320:	f000 f89e 	bl	8002460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002324:	230f      	movs	r3, #15
 8002326:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002328:	2302      	movs	r3, #2
 800232a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fe93 	bl	800106c <HAL_RCC_ClockConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800234c:	f000 f888 	bl	8002460 <Error_Handler>
  }
}
 8002350:	bf00      	nop
 8002352:	3750      	adds	r7, #80	; 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <MX_USART3_UART_Init+0x5c>)
 8002368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 800238c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002390:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 800239a:	f7ff f833 	bl	8001404 <HAL_UART_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80023a4:	f000 f85c 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
	HAL_UART_Receive_IT(&huart3, uart1_rxbuf, 1);
 80023a8:	2201      	movs	r2, #1
 80023aa:	4905      	ldr	r1, [pc, #20]	; (80023c0 <MX_USART3_UART_Init+0x60>)
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <MX_USART3_UART_Init+0x58>)
 80023ae:	f7ff f90f 	bl	80015d0 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000002c 	.word	0x2000002c
 80023bc:	40004800 	.word	0x40004800
 80023c0:	2000006c 	.word	0x2000006c

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_GPIO_Init+0x68>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <MX_GPIO_Init+0x68>)
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_GPIO_Init+0x68>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_GPIO_Init+0x68>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <MX_GPIO_Init+0x68>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <MX_GPIO_Init+0x68>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_GPIO_Init+0x68>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <MX_GPIO_Init+0x68>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_GPIO_Init+0x68>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]

}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart1_rxbuf, 1, 1);    // 把收到的字节原样发送出去
 8002438:	2301      	movs	r3, #1
 800243a:	2201      	movs	r2, #1
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_UART_RxCpltCallback+0x28>)
 800243e:	4807      	ldr	r0, [pc, #28]	; (800245c <HAL_UART_RxCpltCallback+0x2c>)
 8002440:	f7ff f82d 	bl	800149e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, uart1_rxbuf, 1);       // 重新注册一次，要不然下次收不到了
 8002444:	2201      	movs	r2, #1
 8002446:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_UART_RxCpltCallback+0x28>)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <HAL_UART_RxCpltCallback+0x2c>)
 800244a:	f7ff f8c1 	bl	80015d0 <HAL_UART_Receive_IT>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000006c 	.word	0x2000006c
 800245c:	2000002c 	.word	0x2000002c

08002460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_UART_MspInit+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d145      	bne.n	800256e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_UART_MspInit+0xbc>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_UART_MspInit+0xbc>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_UART_MspInit+0xbc>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_UART_MspInit+0xbc>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_UART_MspInit+0xbc>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_UART_MspInit+0xbc>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_CTS
    PD12     ------> USART3_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800251a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800252c:	2307      	movs	r3, #7
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	4812      	ldr	r0, [pc, #72]	; (8002580 <HAL_UART_MspInit+0xc0>)
 8002538:	f7fe f97e 	bl	8000838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800253c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800254e:	2307      	movs	r3, #7
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4809      	ldr	r0, [pc, #36]	; (8002580 <HAL_UART_MspInit+0xc0>)
 800255a:	f7fe f96d 	bl	8000838 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	2027      	movs	r0, #39	; 0x27
 8002564:	f7fe f90f 	bl	8000786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002568:	2027      	movs	r0, #39	; 0x27
 800256a:	f7fe f928 	bl	80007be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40004800 	.word	0x40004800
 800257c:	40023800 	.word	0x40023800
 8002580:	40020c00 	.word	0x40020c00

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <MemManage_Handler+0x4>

0800259e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <BusFault_Handler+0x4>

080025a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <UsageFault_Handler+0x4>

080025aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d8:	f7fd ffda 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <USART3_IRQHandler+0x10>)
 80025e6:	f7ff f849 	bl	800167c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000002c 	.word	0x2000002c

080025f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <SystemInit+0x28>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <SystemInit+0x28>)
 8002600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <SystemInit+0x28>)
 800260a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800260e:	609a      	str	r2, [r3, #8]
#endif
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002658 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002624:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002626:	e003      	b.n	8002630 <LoopCopyDataInit>

08002628 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800262a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800262c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800262e:	3104      	adds	r1, #4

08002630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002634:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002636:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002638:	d3f6      	bcc.n	8002628 <CopyDataInit>
  ldr  r2, =_sbss
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800263c:	e002      	b.n	8002644 <LoopFillZerobss>

0800263e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800263e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002640:	f842 3b04 	str.w	r3, [r2], #4

08002644 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002646:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002648:	d3f9      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800264a:	f7ff ffd3 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264e:	f000 f811 	bl	8002674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7ff fe0f 	bl	8002274 <main>
  bx  lr    
 8002656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002658:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800265c:	0800270c 	.word	0x0800270c
  ldr  r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002664:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002668:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800266c:	20000078 	.word	0x20000078

08002670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <__libc_init_array>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	4e0d      	ldr	r6, [pc, #52]	; (80026ac <__libc_init_array+0x38>)
 8002678:	4c0d      	ldr	r4, [pc, #52]	; (80026b0 <__libc_init_array+0x3c>)
 800267a:	1ba4      	subs	r4, r4, r6
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	2500      	movs	r5, #0
 8002680:	42a5      	cmp	r5, r4
 8002682:	d109      	bne.n	8002698 <__libc_init_array+0x24>
 8002684:	4e0b      	ldr	r6, [pc, #44]	; (80026b4 <__libc_init_array+0x40>)
 8002686:	4c0c      	ldr	r4, [pc, #48]	; (80026b8 <__libc_init_array+0x44>)
 8002688:	f000 f820 	bl	80026cc <_init>
 800268c:	1ba4      	subs	r4, r4, r6
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	2500      	movs	r5, #0
 8002692:	42a5      	cmp	r5, r4
 8002694:	d105      	bne.n	80026a2 <__libc_init_array+0x2e>
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800269c:	4798      	blx	r3
 800269e:	3501      	adds	r5, #1
 80026a0:	e7ee      	b.n	8002680 <__libc_init_array+0xc>
 80026a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026a6:	4798      	blx	r3
 80026a8:	3501      	adds	r5, #1
 80026aa:	e7f2      	b.n	8002692 <__libc_init_array+0x1e>
 80026ac:	08002704 	.word	0x08002704
 80026b0:	08002704 	.word	0x08002704
 80026b4:	08002704 	.word	0x08002704
 80026b8:	08002708 	.word	0x08002708

080026bc <memset>:
 80026bc:	4402      	add	r2, r0
 80026be:	4603      	mov	r3, r0
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d100      	bne.n	80026c6 <memset+0xa>
 80026c4:	4770      	bx	lr
 80026c6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ca:	e7f9      	b.n	80026c0 <memset+0x4>

080026cc <_init>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr

080026d8 <_fini>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr
