
FreeRTOS_STM32F100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003310  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000010  0800359c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800359c  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed64  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024e5  00000000  00000000  0002ed9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eb5b  00000000  00000000  00033080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6b9  00000000  00000000  00041bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000579b6  00000000  00000000  0004d294  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a4c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000a4cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034c8 	.word	0x080034c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080034c8 	.word	0x080034c8

08000210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000214:	2003      	movs	r0, #3
 8000216:	f000 f8f1 	bl	80003fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f003 f852 	bl	80032c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f002 ffb0 	bl	8003184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <HAL_IncTick+0x1c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	461a      	mov	r2, r3
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_IncTick+0x20>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4413      	add	r3, r2
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <HAL_IncTick+0x20>)
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	20000004 	.word	0x20000004
 800024c:	20000d78 	.word	0x20000d78

08000250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  return uwTick;
 8000254:	4b02      	ldr	r3, [pc, #8]	; (8000260 <HAL_GetTick+0x10>)
 8000256:	681b      	ldr	r3, [r3, #0]
}
 8000258:	4618      	mov	r0, r3
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000d78 	.word	0x20000d78

08000264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800026c:	f7ff fff0 	bl	8000250 <HAL_GetTick>
 8000270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800027c:	d005      	beq.n	800028a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <HAL_Delay+0x40>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	461a      	mov	r2, r3
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	4413      	add	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800028a:	bf00      	nop
 800028c:	f7ff ffe0 	bl	8000250 <HAL_GetTick>
 8000290:	4602      	mov	r2, r0
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	429a      	cmp	r2, r3
 800029a:	d8f7      	bhi.n	800028c <HAL_Delay+0x28>
  {
  }
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000004 	.word	0x20000004

080002a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <__NVIC_SetPriorityGrouping+0x44>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c4:	4013      	ands	r3, r2
 80002c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002da:	4a04      	ldr	r2, [pc, #16]	; (80002ec <__NVIC_SetPriorityGrouping+0x44>)
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <__NVIC_GetPriorityGrouping+0x18>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	f003 0307 	and.w	r3, r3, #7
}
 80002fe:	4618      	mov	r0, r3
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4906      	ldr	r1, [pc, #24]	; (8000340 <__NVIC_EnableIRQ+0x34>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	401a      	ands	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43d9      	mvns	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff4f 	bl	80002a8 <__NVIC_SetPriorityGrouping>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000424:	f7ff ff64 	bl	80002f0 <__NVIC_GetPriorityGrouping>
 8000428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	f7ff ffb2 	bl	8000398 <NVIC_EncodePriority>
 8000434:	4602      	mov	r2, r0
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff81 	bl	8000344 <__NVIC_SetPriority>
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff57 	bl	800030c <__NVIC_EnableIRQ>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000468:	b480      	push	{r7}
 800046a:	b08b      	sub	sp, #44	; 0x2c
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000476:	2300      	movs	r3, #0
 8000478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800047a:	e127      	b.n	80006cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800047c:	2201      	movs	r2, #1
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	4013      	ands	r3, r2
 800048e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000490:	69ba      	ldr	r2, [r7, #24]
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	429a      	cmp	r2, r3
 8000496:	f040 8116 	bne.w	80006c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	2b12      	cmp	r3, #18
 80004a0:	d034      	beq.n	800050c <HAL_GPIO_Init+0xa4>
 80004a2:	2b12      	cmp	r3, #18
 80004a4:	d80d      	bhi.n	80004c2 <HAL_GPIO_Init+0x5a>
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d02b      	beq.n	8000502 <HAL_GPIO_Init+0x9a>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d804      	bhi.n	80004b8 <HAL_GPIO_Init+0x50>
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d031      	beq.n	8000516 <HAL_GPIO_Init+0xae>
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d01c      	beq.n	80004f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004b6:	e048      	b.n	800054a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d043      	beq.n	8000544 <HAL_GPIO_Init+0xdc>
 80004bc:	2b11      	cmp	r3, #17
 80004be:	d01b      	beq.n	80004f8 <HAL_GPIO_Init+0x90>
          break;
 80004c0:	e043      	b.n	800054a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c2:	4a89      	ldr	r2, [pc, #548]	; (80006e8 <HAL_GPIO_Init+0x280>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d026      	beq.n	8000516 <HAL_GPIO_Init+0xae>
 80004c8:	4a87      	ldr	r2, [pc, #540]	; (80006e8 <HAL_GPIO_Init+0x280>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d806      	bhi.n	80004dc <HAL_GPIO_Init+0x74>
 80004ce:	4a87      	ldr	r2, [pc, #540]	; (80006ec <HAL_GPIO_Init+0x284>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d020      	beq.n	8000516 <HAL_GPIO_Init+0xae>
 80004d4:	4a86      	ldr	r2, [pc, #536]	; (80006f0 <HAL_GPIO_Init+0x288>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d01d      	beq.n	8000516 <HAL_GPIO_Init+0xae>
          break;
 80004da:	e036      	b.n	800054a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004dc:	4a85      	ldr	r2, [pc, #532]	; (80006f4 <HAL_GPIO_Init+0x28c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d019      	beq.n	8000516 <HAL_GPIO_Init+0xae>
 80004e2:	4a85      	ldr	r2, [pc, #532]	; (80006f8 <HAL_GPIO_Init+0x290>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d016      	beq.n	8000516 <HAL_GPIO_Init+0xae>
 80004e8:	4a84      	ldr	r2, [pc, #528]	; (80006fc <HAL_GPIO_Init+0x294>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d013      	beq.n	8000516 <HAL_GPIO_Init+0xae>
          break;
 80004ee:	e02c      	b.n	800054a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	623b      	str	r3, [r7, #32]
          break;
 80004f6:	e028      	b.n	800054a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	3304      	adds	r3, #4
 80004fe:	623b      	str	r3, [r7, #32]
          break;
 8000500:	e023      	b.n	800054a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	3308      	adds	r3, #8
 8000508:	623b      	str	r3, [r7, #32]
          break;
 800050a:	e01e      	b.n	800054a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	330c      	adds	r3, #12
 8000512:	623b      	str	r3, [r7, #32]
          break;
 8000514:	e019      	b.n	800054a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d102      	bne.n	8000524 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800051e:	2304      	movs	r3, #4
 8000520:	623b      	str	r3, [r7, #32]
          break;
 8000522:	e012      	b.n	800054a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d105      	bne.n	8000538 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800052c:	2308      	movs	r3, #8
 800052e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	69fa      	ldr	r2, [r7, #28]
 8000534:	611a      	str	r2, [r3, #16]
          break;
 8000536:	e008      	b.n	800054a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000538:	2308      	movs	r3, #8
 800053a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	69fa      	ldr	r2, [r7, #28]
 8000540:	615a      	str	r2, [r3, #20]
          break;
 8000542:	e002      	b.n	800054a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
          break;
 8000548:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	2bff      	cmp	r3, #255	; 0xff
 800054e:	d801      	bhi.n	8000554 <HAL_GPIO_Init+0xec>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	e001      	b.n	8000558 <HAL_GPIO_Init+0xf0>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2bff      	cmp	r3, #255	; 0xff
 800055e:	d802      	bhi.n	8000566 <HAL_GPIO_Init+0xfe>
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	e002      	b.n	800056c <HAL_GPIO_Init+0x104>
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	3b08      	subs	r3, #8
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	210f      	movs	r1, #15
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	6a39      	ldr	r1, [r7, #32]
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	431a      	orrs	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 8096 	beq.w	80006c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4b59      	ldr	r3, [pc, #356]	; (8000700 <HAL_GPIO_Init+0x298>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a58      	ldr	r2, [pc, #352]	; (8000700 <HAL_GPIO_Init+0x298>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b56      	ldr	r3, [pc, #344]	; (8000700 <HAL_GPIO_Init+0x298>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005b2:	4a54      	ldr	r2, [pc, #336]	; (8000704 <HAL_GPIO_Init+0x29c>)
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	089b      	lsrs	r3, r3, #2
 80005b8:	3302      	adds	r3, #2
 80005ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	f003 0303 	and.w	r3, r3, #3
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	220f      	movs	r2, #15
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a4b      	ldr	r2, [pc, #300]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d013      	beq.n	8000606 <HAL_GPIO_Init+0x19e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4a      	ldr	r2, [pc, #296]	; (800070c <HAL_GPIO_Init+0x2a4>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d00d      	beq.n	8000602 <HAL_GPIO_Init+0x19a>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <HAL_GPIO_Init+0x2a8>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d007      	beq.n	80005fe <HAL_GPIO_Init+0x196>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a48      	ldr	r2, [pc, #288]	; (8000714 <HAL_GPIO_Init+0x2ac>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_GPIO_Init+0x192>
 80005f6:	2303      	movs	r3, #3
 80005f8:	e006      	b.n	8000608 <HAL_GPIO_Init+0x1a0>
 80005fa:	2304      	movs	r3, #4
 80005fc:	e004      	b.n	8000608 <HAL_GPIO_Init+0x1a0>
 80005fe:	2302      	movs	r3, #2
 8000600:	e002      	b.n	8000608 <HAL_GPIO_Init+0x1a0>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <HAL_GPIO_Init+0x1a0>
 8000606:	2300      	movs	r3, #0
 8000608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800060a:	f002 0203 	and.w	r2, r2, #3
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	4093      	lsls	r3, r2
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	4313      	orrs	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000618:	493a      	ldr	r1, [pc, #232]	; (8000704 <HAL_GPIO_Init+0x29c>)
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	089b      	lsrs	r3, r3, #2
 800061e:	3302      	adds	r3, #2
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4938      	ldr	r1, [pc, #224]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	4313      	orrs	r3, r2
 800063c:	600b      	str	r3, [r1, #0]
 800063e:	e006      	b.n	800064e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	43db      	mvns	r3, r3
 8000648:	4933      	ldr	r1, [pc, #204]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 800064a:	4013      	ands	r3, r2
 800064c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	492e      	ldr	r1, [pc, #184]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	4313      	orrs	r3, r2
 8000664:	604b      	str	r3, [r1, #4]
 8000666:	e006      	b.n	8000676 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	43db      	mvns	r3, r3
 8000670:	4929      	ldr	r1, [pc, #164]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000672:	4013      	ands	r3, r2
 8000674:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800067e:	2b00      	cmp	r3, #0
 8000680:	d006      	beq.n	8000690 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	4924      	ldr	r1, [pc, #144]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	4313      	orrs	r3, r2
 800068c:	608b      	str	r3, [r1, #8]
 800068e:	e006      	b.n	800069e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	43db      	mvns	r3, r3
 8000698:	491f      	ldr	r1, [pc, #124]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 800069a:	4013      	ands	r3, r2
 800069c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	491a      	ldr	r1, [pc, #104]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	60cb      	str	r3, [r1, #12]
 80006b6:	e006      	b.n	80006c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	43db      	mvns	r3, r3
 80006c0:	4915      	ldr	r1, [pc, #84]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80006c2:	4013      	ands	r3, r2
 80006c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	3301      	adds	r3, #1
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	fa22 f303 	lsr.w	r3, r2, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f47f aed0 	bne.w	800047c <HAL_GPIO_Init+0x14>
  }
}
 80006dc:	bf00      	nop
 80006de:	372c      	adds	r7, #44	; 0x2c
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	10210000 	.word	0x10210000
 80006ec:	10110000 	.word	0x10110000
 80006f0:	10120000 	.word	0x10120000
 80006f4:	10310000 	.word	0x10310000
 80006f8:	10320000 	.word	0x10320000
 80006fc:	10220000 	.word	0x10220000
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000
 8000708:	40010800 	.word	0x40010800
 800070c:	40010c00 	.word	0x40010c00
 8000710:	40011000 	.word	0x40011000
 8000714:	40011400 	.word	0x40011400
 8000718:	40010400 	.word	0x40010400

0800071c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
 8000728:	4613      	mov	r3, r2
 800072a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800072c:	787b      	ldrb	r3, [r7, #1]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000732:	887a      	ldrh	r2, [r7, #2]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000738:	e003      	b.n	8000742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	041a      	lsls	r2, r3, #16
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	611a      	str	r2, [r3, #16]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e26c      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 8087 	beq.w	800087a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800076c:	4b92      	ldr	r3, [pc, #584]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f003 030c 	and.w	r3, r3, #12
 8000774:	2b04      	cmp	r3, #4
 8000776:	d00c      	beq.n	8000792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000778:	4b8f      	ldr	r3, [pc, #572]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b08      	cmp	r3, #8
 8000782:	d112      	bne.n	80007aa <HAL_RCC_OscConfig+0x5e>
 8000784:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000790:	d10b      	bne.n	80007aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000792:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d06c      	beq.n	8000878 <HAL_RCC_OscConfig+0x12c>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d168      	bne.n	8000878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e246      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007b2:	d106      	bne.n	80007c2 <HAL_RCC_OscConfig+0x76>
 80007b4:	4b80      	ldr	r3, [pc, #512]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a7f      	ldr	r2, [pc, #508]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e02e      	b.n	8000820 <HAL_RCC_OscConfig+0xd4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10c      	bne.n	80007e4 <HAL_RCC_OscConfig+0x98>
 80007ca:	4b7b      	ldr	r3, [pc, #492]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a7a      	ldr	r2, [pc, #488]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	4b78      	ldr	r3, [pc, #480]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a77      	ldr	r2, [pc, #476]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e01d      	b.n	8000820 <HAL_RCC_OscConfig+0xd4>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007ec:	d10c      	bne.n	8000808 <HAL_RCC_OscConfig+0xbc>
 80007ee:	4b72      	ldr	r3, [pc, #456]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a71      	ldr	r2, [pc, #452]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a6e      	ldr	r2, [pc, #440]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e00b      	b.n	8000820 <HAL_RCC_OscConfig+0xd4>
 8000808:	4b6b      	ldr	r3, [pc, #428]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a6a      	ldr	r2, [pc, #424]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800080e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a67      	ldr	r2, [pc, #412]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800081a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d013      	beq.n	8000850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000828:	f7ff fd12 	bl	8000250 <HAL_GetTick>
 800082c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	e008      	b.n	8000842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000830:	f7ff fd0e 	bl	8000250 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b64      	cmp	r3, #100	; 0x64
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e1fa      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000842:	4b5d      	ldr	r3, [pc, #372]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f0      	beq.n	8000830 <HAL_RCC_OscConfig+0xe4>
 800084e:	e014      	b.n	800087a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000850:	f7ff fcfe 	bl	8000250 <HAL_GetTick>
 8000854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000856:	e008      	b.n	800086a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000858:	f7ff fcfa 	bl	8000250 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	2b64      	cmp	r3, #100	; 0x64
 8000864:	d901      	bls.n	800086a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000866:	2303      	movs	r3, #3
 8000868:	e1e6      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086a:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f0      	bne.n	8000858 <HAL_RCC_OscConfig+0x10c>
 8000876:	e000      	b.n	800087a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	2b00      	cmp	r3, #0
 8000884:	d063      	beq.n	800094e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00b      	beq.n	80008aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b08      	cmp	r3, #8
 800089c:	d11c      	bne.n	80008d8 <HAL_RCC_OscConfig+0x18c>
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d116      	bne.n	80008d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008aa:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <HAL_RCC_OscConfig+0x176>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d001      	beq.n	80008c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e1ba      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	4939      	ldr	r1, [pc, #228]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 80008d2:	4313      	orrs	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d6:	e03a      	b.n	800094e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d020      	beq.n	8000922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_RCC_OscConfig+0x270>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e6:	f7ff fcb3 	bl	8000250 <HAL_GetTick>
 80008ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	e008      	b.n	8000900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008ee:	f7ff fcaf 	bl	8000250 <HAL_GetTick>
 80008f2:	4602      	mov	r2, r0
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d901      	bls.n	8000900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008fc:	2303      	movs	r3, #3
 80008fe:	e19b      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0f0      	beq.n	80008ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	4927      	ldr	r1, [pc, #156]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 800091c:	4313      	orrs	r3, r2
 800091e:	600b      	str	r3, [r1, #0]
 8000920:	e015      	b.n	800094e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <HAL_RCC_OscConfig+0x270>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000928:	f7ff fc92 	bl	8000250 <HAL_GetTick>
 800092c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092e:	e008      	b.n	8000942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000930:	f7ff fc8e 	bl	8000250 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d901      	bls.n	8000942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e17a      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f0      	bne.n	8000930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	2b00      	cmp	r3, #0
 8000958:	d03a      	beq.n	80009d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d019      	beq.n	8000996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000968:	f7ff fc72 	bl	8000250 <HAL_GetTick>
 800096c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800096e:	e008      	b.n	8000982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000970:	f7ff fc6e 	bl	8000250 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d901      	bls.n	8000982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800097e:	2303      	movs	r3, #3
 8000980:	e15a      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_RCC_OscConfig+0x26c>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f0      	beq.n	8000970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800098e:	2001      	movs	r0, #1
 8000990:	f000 fad8 	bl	8000f44 <RCC_Delay>
 8000994:	e01c      	b.n	80009d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_RCC_OscConfig+0x274>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800099c:	f7ff fc58 	bl	8000250 <HAL_GetTick>
 80009a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a2:	e00f      	b.n	80009c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a4:	f7ff fc54 	bl	8000250 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d908      	bls.n	80009c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009b2:	2303      	movs	r3, #3
 80009b4:	e140      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	42420000 	.word	0x42420000
 80009c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c4:	4b9e      	ldr	r3, [pc, #632]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 80009c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e9      	bne.n	80009a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80a6 	beq.w	8000b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e2:	4b97      	ldr	r3, [pc, #604]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10d      	bne.n	8000a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b94      	ldr	r3, [pc, #592]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a93      	ldr	r2, [pc, #588]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b91      	ldr	r3, [pc, #580]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0a:	4b8e      	ldr	r3, [pc, #568]	; (8000c44 <HAL_RCC_OscConfig+0x4f8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d118      	bne.n	8000a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a16:	4b8b      	ldr	r3, [pc, #556]	; (8000c44 <HAL_RCC_OscConfig+0x4f8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a8a      	ldr	r2, [pc, #552]	; (8000c44 <HAL_RCC_OscConfig+0x4f8>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a22:	f7ff fc15 	bl	8000250 <HAL_GetTick>
 8000a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a28:	e008      	b.n	8000a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a2a:	f7ff fc11 	bl	8000250 <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d901      	bls.n	8000a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e0fd      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3c:	4b81      	ldr	r3, [pc, #516]	; (8000c44 <HAL_RCC_OscConfig+0x4f8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f0      	beq.n	8000a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d106      	bne.n	8000a5e <HAL_RCC_OscConfig+0x312>
 8000a50:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a7a      	ldr	r2, [pc, #488]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6213      	str	r3, [r2, #32]
 8000a5c:	e02d      	b.n	8000aba <HAL_RCC_OscConfig+0x36e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <HAL_RCC_OscConfig+0x334>
 8000a66:	4b76      	ldr	r3, [pc, #472]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4a75      	ldr	r2, [pc, #468]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	6213      	str	r3, [r2, #32]
 8000a72:	4b73      	ldr	r3, [pc, #460]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a72      	ldr	r2, [pc, #456]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	e01c      	b.n	8000aba <HAL_RCC_OscConfig+0x36e>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d10c      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x356>
 8000a88:	4b6d      	ldr	r3, [pc, #436]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a6c      	ldr	r2, [pc, #432]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6213      	str	r3, [r2, #32]
 8000a94:	4b6a      	ldr	r3, [pc, #424]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	4a69      	ldr	r2, [pc, #420]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6213      	str	r3, [r2, #32]
 8000aa0:	e00b      	b.n	8000aba <HAL_RCC_OscConfig+0x36e>
 8000aa2:	4b67      	ldr	r3, [pc, #412]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a66      	ldr	r2, [pc, #408]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	6213      	str	r3, [r2, #32]
 8000aae:	4b64      	ldr	r3, [pc, #400]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a63      	ldr	r2, [pc, #396]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0304 	bic.w	r3, r3, #4
 8000ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d015      	beq.n	8000aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fbc5 	bl	8000250 <HAL_GetTick>
 8000ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac8:	e00a      	b.n	8000ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aca:	f7ff fbc1 	bl	8000250 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e0ab      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	4b57      	ldr	r3, [pc, #348]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0ee      	beq.n	8000aca <HAL_RCC_OscConfig+0x37e>
 8000aec:	e014      	b.n	8000b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aee:	f7ff fbaf 	bl	8000250 <HAL_GetTick>
 8000af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af4:	e00a      	b.n	8000b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af6:	f7ff fbab 	bl	8000250 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e095      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b0c:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1ee      	bne.n	8000af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 8081 	beq.w	8000c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b34:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d061      	beq.n	8000c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d146      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <HAL_RCC_OscConfig+0x4fc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fb7f 	bl	8000250 <HAL_GetTick>
 8000b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b54:	e008      	b.n	8000b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b56:	f7ff fb7b 	bl	8000250 <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e067      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f0      	bne.n	8000b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b7c:	d108      	bne.n	8000b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b82:	f023 020f 	bic.w	r2, r3, #15
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	492d      	ldr	r1, [pc, #180]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a19      	ldr	r1, [r3, #32]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	4927      	ldr	r1, [pc, #156]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_RCC_OscConfig+0x4fc>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb4f 	bl	8000250 <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bb6:	f7ff fb4b 	bl	8000250 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e037      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f0      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x46a>
 8000bd4:	e02f      	b.n	8000c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_RCC_OscConfig+0x4fc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fb38 	bl	8000250 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000be4:	f7ff fb34 	bl	8000250 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e020      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x498>
 8000c02:	e018      	b.n	8000c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e013      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_RCC_OscConfig+0x4f4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d106      	bne.n	8000c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40007000 	.word	0x40007000
 8000c48:	42420060 	.word	0x42420060

08000c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e0a0      	b.n	8000da2 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d020      	beq.n	8000cae <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d005      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c90:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a45      	ldr	r2, [pc, #276]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4940      	ldr	r1, [pc, #256]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d040      	beq.n	8000d3c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d107      	bne.n	8000cd2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d115      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e067      	b.n	8000da2 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d107      	bne.n	8000cea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d109      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e05b      	b.n	8000da2 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e053      	b.n	8000da2 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f023 0203 	bic.w	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4929      	ldr	r1, [pc, #164]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d0c:	f7ff faa0 	bl	8000250 <HAL_GetTick>
 8000d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d12:	e00a      	b.n	8000d2a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fa9c 	bl	8000250 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e03b      	b.n	8000da2 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 020c 	and.w	r2, r3, #12
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d1eb      	bne.n	8000d14 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4915      	ldr	r1, [pc, #84]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d009      	beq.n	8000d7a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	490d      	ldr	r1, [pc, #52]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d7a:	f000 f81f 	bl	8000dbc <HAL_RCC_GetSysClockFreq>
 8000d7e:	4601      	mov	r1, r0
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_RCC_ClockConfig+0x164>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_RCC_ClockConfig+0x168>)
 8000d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_RCC_ClockConfig+0x16c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fa92 	bl	80032c4 <HAL_InitTick>

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	0800356c 	.word	0x0800356c
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dbc:	b490      	push	{r4, r7}
 8000dbe:	b08e      	sub	sp, #56	; 0x38
 8000dc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dc4:	f107 0414 	add.w	r4, r7, #20
 8000dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000dd0:	1d3c      	adds	r4, r7, #4
 8000dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d002      	beq.n	8000e02 <HAL_RCC_GetSysClockFreq+0x46>
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d003      	beq.n	8000e08 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e00:	e02c      	b.n	8000e5c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000e06:	e02c      	b.n	8000e62 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	0c9b      	lsrs	r3, r3, #18
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e14:	4413      	add	r3, r2
 8000e16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d012      	beq.n	8000e4c <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e32:	4413      	add	r3, r2
 8000e34:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e3e:	fb02 f203 	mul.w	r2, r2, r3
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
 8000e4a:	e004      	b.n	8000e56 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8000e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000e5a:	e002      	b.n	8000e62 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3738      	adds	r7, #56	; 0x38
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc90      	pop	{r4, r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	080034e0 	.word	0x080034e0
 8000e74:	080034f0 	.word	0x080034f0
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	016e3600 	.word	0x016e3600
 8000e80:	003d0900 	.word	0x003d0900
 8000e84:	007a1200 	.word	0x007a1200

08000e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	2000000c 	.word	0x2000000c

08000e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ea0:	f7ff fff2 	bl	8000e88 <HAL_RCC_GetHCLKFreq>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	0800357c 	.word	0x0800357c

08000ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_RCC_GetHCLKFreq>
 8000ecc:	4601      	mov	r1, r0
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0adb      	lsrs	r3, r3, #11
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	0800357c 	.word	0x0800357c

08000eec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	220f      	movs	r2, #15
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_RCC_GetClockConfig+0x54>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_RCC_GetClockConfig+0x54>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_RCC_GetClockConfig+0x54>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_RCC_GetClockConfig+0x54>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
#endif
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <RCC_Delay+0x34>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <RCC_Delay+0x38>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f60:	bf00      	nop
  }
  while (Delay --);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	60fa      	str	r2, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f9      	bne.n	8000f60 <RCC_Delay+0x1c>
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000000c 	.word	0x2000000c
 8000f7c:	10624dd3 	.word	0x10624dd3

08000f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e01d      	b.n	8000fce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d106      	bne.n	8000fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 f924 	bl	80031f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	f000 fa10 	bl	80013e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d007      	beq.n	8001010 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d122      	bne.n	8001078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b02      	cmp	r3, #2
 800103e:	d11b      	bne.n	8001078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f06f 0202 	mvn.w	r2, #2
 8001048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9a4 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 8001064:	e005      	b.n	8001072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f997 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f9a6 	bl	80013be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	2b04      	cmp	r3, #4
 8001084:	d122      	bne.n	80010cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b04      	cmp	r3, #4
 8001092:	d11b      	bne.n	80010cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f06f 0204 	mvn.w	r2, #4
 800109c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f97a 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 80010b8:	e005      	b.n	80010c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f96d 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f97c 	bl	80013be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d122      	bne.n	8001120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d11b      	bne.n	8001120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f06f 0208 	mvn.w	r2, #8
 80010f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2204      	movs	r2, #4
 80010f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f950 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 800110c:	e005      	b.n	800111a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f943 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f952 	bl	80013be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b10      	cmp	r3, #16
 800112c:	d122      	bne.n	8001174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b10      	cmp	r3, #16
 800113a:	d11b      	bne.n	8001174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f06f 0210 	mvn.w	r2, #16
 8001144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2208      	movs	r2, #8
 800114a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f926 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 8001160:	e005      	b.n	800116e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f919 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f928 	bl	80013be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d107      	bne.n	80011a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f06f 0201 	mvn.w	r2, #1
 8001198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f001 ffda 	bl	8003154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	2b80      	cmp	r3, #128	; 0x80
 80011ac:	d10e      	bne.n	80011cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b8:	2b80      	cmp	r3, #128	; 0x80
 80011ba:	d107      	bne.n	80011cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa6f 	bl	80016aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d10e      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e4:	2b40      	cmp	r3, #64	; 0x40
 80011e6:	d107      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8ec 	bl	80013d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	2b20      	cmp	r3, #32
 8001204:	d10e      	bne.n	8001224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0320 	and.w	r3, r3, #32
 8001210:	2b20      	cmp	r3, #32
 8001212:	d107      	bne.n	8001224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0220 	mvn.w	r2, #32
 800121c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fa3a 	bl	8001698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_TIM_ConfigClockSource+0x18>
 8001240:	2302      	movs	r3, #2
 8001242:	e0a6      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x166>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2202      	movs	r2, #2
 8001250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800126a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	d067      	beq.n	800134c <HAL_TIM_ConfigClockSource+0x120>
 800127c:	2b40      	cmp	r3, #64	; 0x40
 800127e:	d80b      	bhi.n	8001298 <HAL_TIM_ConfigClockSource+0x6c>
 8001280:	2b10      	cmp	r3, #16
 8001282:	d073      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x140>
 8001284:	2b10      	cmp	r3, #16
 8001286:	d802      	bhi.n	800128e <HAL_TIM_ConfigClockSource+0x62>
 8001288:	2b00      	cmp	r3, #0
 800128a:	d06f      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800128c:	e078      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800128e:	2b20      	cmp	r3, #32
 8001290:	d06c      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x140>
 8001292:	2b30      	cmp	r3, #48	; 0x30
 8001294:	d06a      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001296:	e073      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001298:	2b70      	cmp	r3, #112	; 0x70
 800129a:	d00d      	beq.n	80012b8 <HAL_TIM_ConfigClockSource+0x8c>
 800129c:	2b70      	cmp	r3, #112	; 0x70
 800129e:	d804      	bhi.n	80012aa <HAL_TIM_ConfigClockSource+0x7e>
 80012a0:	2b50      	cmp	r3, #80	; 0x50
 80012a2:	d033      	beq.n	800130c <HAL_TIM_ConfigClockSource+0xe0>
 80012a4:	2b60      	cmp	r3, #96	; 0x60
 80012a6:	d041      	beq.n	800132c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80012a8:	e06a      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ae:	d066      	beq.n	800137e <HAL_TIM_ConfigClockSource+0x152>
 80012b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b4:	d017      	beq.n	80012e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80012b6:	e063      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6899      	ldr	r1, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f000 f983 	bl	80015d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	609a      	str	r2, [r3, #8]
      break;
 80012e4:	e04c      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f000 f96c 	bl	80015d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001308:	609a      	str	r2, [r3, #8]
      break;
 800130a:	e039      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	461a      	mov	r2, r3
 800131a:	f000 f8e3 	bl	80014e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f93a 	bl	800159e <TIM_ITRx_SetConfig>
      break;
 800132a:	e029      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	461a      	mov	r2, r3
 800133a:	f000 f901 	bl	8001540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2160      	movs	r1, #96	; 0x60
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f92a 	bl	800159e <TIM_ITRx_SetConfig>
      break;
 800134a:	e019      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	461a      	mov	r2, r3
 800135a:	f000 f8c3 	bl	80014e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f91a 	bl	800159e <TIM_ITRx_SetConfig>
      break;
 800136a:	e009      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f000 f911 	bl	800159e <TIM_ITRx_SetConfig>
      break;
 800137c:	e000      	b.n	8001380 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800137e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a35      	ldr	r2, [pc, #212]	; (80014cc <TIM_Base_SetConfig+0xe8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00b      	beq.n	8001414 <TIM_Base_SetConfig+0x30>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001402:	d007      	beq.n	8001414 <TIM_Base_SetConfig+0x30>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <TIM_Base_SetConfig+0xec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d003      	beq.n	8001414 <TIM_Base_SetConfig+0x30>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <TIM_Base_SetConfig+0xf0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d108      	bne.n	8001426 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800141a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <TIM_Base_SetConfig+0xe8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d017      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d013      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <TIM_Base_SetConfig+0xec>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00f      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <TIM_Base_SetConfig+0xf0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00b      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <TIM_Base_SetConfig+0xf4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <TIM_Base_SetConfig+0xf8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d003      	beq.n	800145e <TIM_Base_SetConfig+0x7a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <TIM_Base_SetConfig+0xfc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d108      	bne.n	8001470 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <TIM_Base_SetConfig+0xe8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00b      	beq.n	80014b4 <TIM_Base_SetConfig+0xd0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <TIM_Base_SetConfig+0xf4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <TIM_Base_SetConfig+0xd0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <TIM_Base_SetConfig+0xf8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d003      	beq.n	80014b4 <TIM_Base_SetConfig+0xd0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <TIM_Base_SetConfig+0xfc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d103      	bne.n	80014bc <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	615a      	str	r2, [r3, #20]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40012c00 	.word	0x40012c00
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40000800 	.word	0x40000800
 80014d8:	40014000 	.word	0x40014000
 80014dc:	40014400 	.word	0x40014400
 80014e0:	40014800 	.word	0x40014800

080014e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	f023 0201 	bic.w	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800150e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f023 030a 	bic.w	r3, r3, #10
 8001520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	621a      	str	r2, [r3, #32]
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f023 0210 	bic.w	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800156a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	031b      	lsls	r3, r3, #12
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800157c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	621a      	str	r2, [r3, #32]
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	f043 0307 	orr.w	r3, r3, #7
 80015c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	021a      	lsls	r2, r3, #8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	609a      	str	r2, [r3, #8]
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001624:	2302      	movs	r3, #2
 8001626:	e032      	b.n	800168e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001660:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e03f      	b.n	800174e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 fda2 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	; 0x24
 80016ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f90b 	bl	800191c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b088      	sub	sp, #32
 800175a:	af02      	add	r7, sp, #8
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	f040 8083 	bne.w	800187e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_UART_Transmit+0x2e>
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e07b      	b.n	8001880 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_UART_Transmit+0x40>
 8001792:	2302      	movs	r3, #2
 8001794:	e074      	b.n	8001880 <HAL_UART_Transmit+0x12a>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2221      	movs	r2, #33	; 0x21
 80017a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017ac:	f7fe fd50 	bl	8000250 <HAL_GetTick>
 80017b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017be:	e042      	b.n	8001846 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d6:	d122      	bne.n	800181e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2200      	movs	r2, #0
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f850 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e046      	b.n	8001880 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001804:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3302      	adds	r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	e017      	b.n	8001846 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3301      	adds	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	e013      	b.n	8001846 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f82d 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e023      	b.n	8001880 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1b7      	bne.n	80017c0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f814 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e00a      	b.n	8001880 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
  }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001898:	e02c      	b.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d028      	beq.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80018a8:	f7fe fcd2 	bl	8000250 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d21d      	bcs.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e00f      	b.n	8001914 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	429a      	cmp	r2, r3
 8001910:	d0c3      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800195c:	f023 030c 	bic.w	r3, r3, #12
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	430b      	orrs	r3, r1
 8001968:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001988:	f040 80a5 	bne.w	8001ad6 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4aa4      	ldr	r2, [pc, #656]	; (8001c24 <UART_SetConfig+0x308>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d14f      	bne.n	8001a36 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001996:	f7ff fa95 	bl	8000ec4 <HAL_RCC_GetPCLK2Freq>
 800199a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	441a      	add	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4a9d      	ldr	r2, [pc, #628]	; (8001c28 <UART_SetConfig+0x30c>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	0119      	lsls	r1, r3, #4
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009a      	lsls	r2, r3, #2
 80019c6:	441a      	add	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <UART_SetConfig+0x30c>)
 80019d4:	fba3 0302 	umull	r0, r3, r3, r2
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	2064      	movs	r0, #100	; 0x64
 80019dc:	fb00 f303 	mul.w	r3, r0, r3
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	3332      	adds	r3, #50	; 0x32
 80019e6:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <UART_SetConfig+0x30c>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019f4:	4419      	add	r1, r3
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009a      	lsls	r2, r3, #2
 8001a00:	441a      	add	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0c:	4b86      	ldr	r3, [pc, #536]	; (8001c28 <UART_SetConfig+0x30c>)
 8001a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2064      	movs	r0, #100	; 0x64
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	3332      	adds	r3, #50	; 0x32
 8001a20:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <UART_SetConfig+0x30c>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	440a      	add	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001a34:	e0f1      	b.n	8001c1a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a36:	f7ff fa31 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 8001a3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	009a      	lsls	r2, r3, #2
 8001a46:	441a      	add	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <UART_SetConfig+0x30c>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	0119      	lsls	r1, r3, #4
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009a      	lsls	r2, r3, #2
 8001a66:	441a      	add	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <UART_SetConfig+0x30c>)
 8001a74:	fba3 0302 	umull	r0, r3, r3, r2
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	2064      	movs	r0, #100	; 0x64
 8001a7c:	fb00 f303 	mul.w	r3, r0, r3
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	3332      	adds	r3, #50	; 0x32
 8001a86:	4a68      	ldr	r2, [pc, #416]	; (8001c28 <UART_SetConfig+0x30c>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a94:	4419      	add	r1, r3
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009a      	lsls	r2, r3, #2
 8001aa0:	441a      	add	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <UART_SetConfig+0x30c>)
 8001aae:	fba3 0302 	umull	r0, r3, r3, r2
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2064      	movs	r0, #100	; 0x64
 8001ab6:	fb00 f303 	mul.w	r3, r0, r3
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	3332      	adds	r3, #50	; 0x32
 8001ac0:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <UART_SetConfig+0x30c>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	f003 0207 	and.w	r2, r3, #7
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
}
 8001ad4:	e0a1      	b.n	8001c1a <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <UART_SetConfig+0x308>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d14e      	bne.n	8001b7e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ae0:	f7ff f9f0 	bl	8000ec4 <HAL_RCC_GetPCLK2Freq>
 8001ae4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <UART_SetConfig+0x30c>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	0119      	lsls	r1, r3, #4
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009a      	lsls	r2, r3, #2
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <UART_SetConfig+0x30c>)
 8001b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	fb00 f303 	mul.w	r3, r0, r3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	3332      	adds	r3, #50	; 0x32
 8001b30:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <UART_SetConfig+0x30c>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	4419      	add	r1, r3
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <UART_SetConfig+0x30c>)
 8001b56:	fba3 0302 	umull	r0, r3, r3, r2
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2064      	movs	r0, #100	; 0x64
 8001b5e:	fb00 f303 	mul.w	r3, r0, r3
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	3332      	adds	r3, #50	; 0x32
 8001b68:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <UART_SetConfig+0x30c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	440a      	add	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	e04d      	b.n	8001c1a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b7e:	f7ff f98d 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 8001b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <UART_SetConfig+0x30c>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	0119      	lsls	r1, r3, #4
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	009a      	lsls	r2, r3, #2
 8001bae:	441a      	add	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <UART_SetConfig+0x30c>)
 8001bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	2064      	movs	r0, #100	; 0x64
 8001bc4:	fb00 f303 	mul.w	r3, r0, r3
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	3332      	adds	r3, #50	; 0x32
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <UART_SetConfig+0x30c>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	4419      	add	r1, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	441a      	add	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <UART_SetConfig+0x30c>)
 8001bf4:	fba3 0302 	umull	r0, r3, r3, r2
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	fb00 f303 	mul.w	r3, r0, r3
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	3332      	adds	r3, #50	; 0x32
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <UART_SetConfig+0x30c>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	440a      	add	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40013800 	.word	0x40013800
 8001c28:	51eb851f 	.word	0x51eb851f

08001c2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	2b84      	cmp	r3, #132	; 0x84
 8001c40:	d005      	beq.n	8001c4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c5e:	f000 fa4b 	bl	80020f8 <vTaskStartScheduler>
  
  return osOK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685c      	ldr	r4, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c7e:	b29e      	uxth	r6, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ffd0 	bl	8001c2c <makeFreeRtosPriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9200      	str	r2, [sp, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4632      	mov	r2, r6
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f000 f8cd 	bl	8001e3c <xTaskCreate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d001      	beq.n	8001cac <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <osDelay+0x16>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	e000      	b.n	8001cce <osDelay+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f9de 	bl	8002090 <vTaskDelay>
  
  return osOK;
 8001cd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f103 0208 	add.w	r2, r3, #8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0208 	add.w	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f103 0208 	add.w	r2, r3, #8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d103      	bne.n	8001d9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e00c      	b.n	8001db4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e002      	b.n	8001da8 <vListInsert+0x2e>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d2f6      	bcs.n	8001da2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	601a      	str	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6892      	ldr	r2, [r2, #8]
 8001e00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6852      	ldr	r2, [r2, #4]
 8001e0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d103      	bne.n	8001e1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fe1b 	bl	8002a8c <pvPortMalloc>
 8001e56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00e      	beq.n	8001e7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e5e:	2054      	movs	r0, #84	; 0x54
 8001e60:	f000 fe14 	bl	8002a8c <pvPortMalloc>
 8001e64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
 8001e72:	e005      	b.n	8001e80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e74:	6978      	ldr	r0, [r7, #20]
 8001e76:	f000 fecb 	bl	8002c10 <vPortFree>
 8001e7a:	e001      	b.n	8001e80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d013      	beq.n	8001eae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9303      	str	r3, [sp, #12]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f80e 	bl	8001ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ea2:	69f8      	ldr	r0, [r7, #28]
 8001ea4:	f000 f88a 	bl	8001fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	e002      	b.n	8001eb4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f023 0307 	bic.w	r3, r3, #7
 8001ee4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e7fe      	b.n	8001f02 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e012      	b.n	8001f30 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4413      	add	r3, r2
 8001f10:	7819      	ldrb	r1, [r3, #0]
 8001f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	3334      	adds	r3, #52	; 0x34
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d9e9      	bls.n	8001f0a <prvInitialiseNewTask+0x4c>
 8001f36:	e000      	b.n	8001f3a <prvInitialiseNewTask+0x7c>
		{
			break;
 8001f38:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d901      	bls.n	8001f4c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f48:	2306      	movs	r3, #6
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	3304      	adds	r3, #4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff feda 	bl	8001d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed5 	bl	8001d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	f1c3 0207 	rsb	r2, r3, #7
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	f000 fbd0 	bl	8002740 <pxPortInitialiseStack>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fc4:	f000 fca8 	bl	8002918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <prvAddNewTaskToReadyList+0xb8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a29      	ldr	r2, [pc, #164]	; (8002074 <prvAddNewTaskToReadyList+0xb8>)
 8001fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <prvAddNewTaskToReadyList+0xbc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fda:	4a27      	ldr	r2, [pc, #156]	; (8002078 <prvAddNewTaskToReadyList+0xbc>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <prvAddNewTaskToReadyList+0xb8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d110      	bne.n	800200a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001fe8:	f000 faa4 	bl	8002534 <prvInitialiseTaskLists>
 8001fec:	e00d      	b.n	800200a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <prvAddNewTaskToReadyList+0xc0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <prvAddNewTaskToReadyList+0xbc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d802      	bhi.n	800200a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <prvAddNewTaskToReadyList+0xbc>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <prvAddNewTaskToReadyList+0xc4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <prvAddNewTaskToReadyList+0xc4>)
 8002012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	2201      	movs	r2, #1
 800201a:	409a      	lsls	r2, r3
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <prvAddNewTaskToReadyList+0xc8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <prvAddNewTaskToReadyList+0xc8>)
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <prvAddNewTaskToReadyList+0xcc>)
 8002034:	441a      	add	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f7ff fe79 	bl	8001d34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002042:	f000 fc97 	bl	8002974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <prvAddNewTaskToReadyList+0xc0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <prvAddNewTaskToReadyList+0xbc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <prvAddNewTaskToReadyList+0xd0>)
 800205e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000012c 	.word	0x2000012c
 8002078:	2000002c 	.word	0x2000002c
 800207c:	20000138 	.word	0x20000138
 8002080:	20000148 	.word	0x20000148
 8002084:	20000134 	.word	0x20000134
 8002088:	20000030 	.word	0x20000030
 800208c:	e000ed04 	.word	0xe000ed04

08002090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <vTaskDelay+0x60>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <vTaskDelay+0x2e>
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	e7fe      	b.n	80020bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80020be:	f000 f861 	bl	8002184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020c2:	2100      	movs	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fad5 	bl	8002674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80020ca:	f000 f869 	bl	80021a0 <xTaskResumeAll>
 80020ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <vTaskDelay+0x64>)
 80020d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000154 	.word	0x20000154
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <vTaskStartScheduler+0x74>)
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	4919      	ldr	r1, [pc, #100]	; (8002170 <vTaskStartScheduler+0x78>)
 800210c:	4819      	ldr	r0, [pc, #100]	; (8002174 <vTaskStartScheduler+0x7c>)
 800210e:	f7ff fe95 	bl	8001e3c <xTaskCreate>
 8002112:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d115      	bne.n	8002146 <vTaskStartScheduler+0x4e>
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <vTaskStartScheduler+0x80>)
 800212e:	f04f 32ff 	mov.w	r2, #4294967295
 8002132:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <vTaskStartScheduler+0x84>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <vTaskStartScheduler+0x88>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002140:	f000 fb7a 	bl	8002838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002144:	e00d      	b.n	8002162 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d109      	bne.n	8002162 <vTaskStartScheduler+0x6a>
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	e7fe      	b.n	8002160 <vTaskStartScheduler+0x68>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000150 	.word	0x20000150
 8002170:	08003500 	.word	0x08003500
 8002174:	08002505 	.word	0x08002505
 8002178:	2000014c 	.word	0x2000014c
 800217c:	20000138 	.word	0x20000138
 8002180:	20000130 	.word	0x20000130

08002184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <vTaskSuspendAll+0x18>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a03      	ldr	r2, [pc, #12]	; (800219c <vTaskSuspendAll+0x18>)
 8002190:	6013      	str	r3, [r2, #0]
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000154 	.word	0x20000154

080021a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <xTaskResumeAll+0x114>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <xTaskResumeAll+0x2a>
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	e7fe      	b.n	80021c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021ca:	f000 fba5 	bl	8002918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <xTaskResumeAll+0x114>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <xTaskResumeAll+0x114>)
 80021d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <xTaskResumeAll+0x114>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d161      	bne.n	80022a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <xTaskResumeAll+0x118>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05d      	beq.n	80022a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021e8:	e02e      	b.n	8002248 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <xTaskResumeAll+0x11c>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3318      	adds	r3, #24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fdf7 	bl	8001dea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3304      	adds	r3, #4
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fdf2 	bl	8001dea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <xTaskResumeAll+0x120>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <xTaskResumeAll+0x120>)
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <xTaskResumeAll+0x124>)
 8002226:	441a      	add	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7ff fd80 	bl	8001d34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <xTaskResumeAll+0x128>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <xTaskResumeAll+0x12c>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <xTaskResumeAll+0x11c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1cc      	bne.n	80021ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002256:	f000 f9e9 	bl	800262c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <xTaskResumeAll+0x130>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002266:	f000 f837 	bl	80022d8 <xTaskIncrementTick>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <xTaskResumeAll+0x12c>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3b01      	subs	r3, #1
 800227a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f1      	bne.n	8002266 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <xTaskResumeAll+0x130>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <xTaskResumeAll+0x12c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002290:	2301      	movs	r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <xTaskResumeAll+0x134>)
 8002296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80022a4:	f000 fb66 	bl	8002974 <vPortExitCritical>

	return xAlreadyYielded;
 80022a8:	68bb      	ldr	r3, [r7, #8]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000154 	.word	0x20000154
 80022b8:	2000012c 	.word	0x2000012c
 80022bc:	200000ec 	.word	0x200000ec
 80022c0:	20000134 	.word	0x20000134
 80022c4:	20000030 	.word	0x20000030
 80022c8:	2000002c 	.word	0x2000002c
 80022cc:	20000140 	.word	0x20000140
 80022d0:	2000013c 	.word	0x2000013c
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <xTaskIncrementTick+0x14c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 808c 	bne.w	8002404 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022ec:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <xTaskIncrementTick+0x150>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <xTaskIncrementTick+0x150>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11f      	bne.n	8002340 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <xTaskIncrementTick+0x154>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <xTaskIncrementTick+0x46>
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	e7fe      	b.n	800231c <xTaskIncrementTick+0x44>
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <xTaskIncrementTick+0x154>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <xTaskIncrementTick+0x158>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a40      	ldr	r2, [pc, #256]	; (800242c <xTaskIncrementTick+0x154>)
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4a40      	ldr	r2, [pc, #256]	; (8002430 <xTaskIncrementTick+0x158>)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <xTaskIncrementTick+0x15c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <xTaskIncrementTick+0x15c>)
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	f000 f976 	bl	800262c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <xTaskIncrementTick+0x160>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d34d      	bcc.n	80023e6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <xTaskIncrementTick+0x154>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <xTaskIncrementTick+0x80>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <xTaskIncrementTick+0x82>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <xTaskIncrementTick+0x160>)
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	601a      	str	r2, [r3, #0]
					break;
 8002366:	e03e      	b.n	80023e6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <xTaskIncrementTick+0x154>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d203      	bcs.n	8002388 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <xTaskIncrementTick+0x160>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
						break;
 8002386:	e02e      	b.n	80023e6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3304      	adds	r3, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fd2c 	bl	8001dea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3318      	adds	r3, #24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fd23 	bl	8001dea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <xTaskIncrementTick+0x164>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <xTaskIncrementTick+0x164>)
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <xTaskIncrementTick+0x168>)
 80023c4:	441a      	add	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3304      	adds	r3, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f7ff fcb1 	bl	8001d34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <xTaskIncrementTick+0x16c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3b4      	bcc.n	800234a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80023e0:	2301      	movs	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e4:	e7b1      	b.n	800234a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <xTaskIncrementTick+0x16c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4914      	ldr	r1, [pc, #80]	; (8002440 <xTaskIncrementTick+0x168>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d907      	bls.n	800240e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80023fe:	2301      	movs	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e004      	b.n	800240e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <xTaskIncrementTick+0x170>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <xTaskIncrementTick+0x170>)
 800240c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <xTaskIncrementTick+0x174>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002416:	2301      	movs	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800241a:	697b      	ldr	r3, [r7, #20]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000154 	.word	0x20000154
 8002428:	20000130 	.word	0x20000130
 800242c:	200000e4 	.word	0x200000e4
 8002430:	200000e8 	.word	0x200000e8
 8002434:	20000144 	.word	0x20000144
 8002438:	2000014c 	.word	0x2000014c
 800243c:	20000134 	.word	0x20000134
 8002440:	20000030 	.word	0x20000030
 8002444:	2000002c 	.word	0x2000002c
 8002448:	2000013c 	.word	0x2000013c
 800244c:	20000140 	.word	0x20000140

08002450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <vTaskSwitchContext+0xa0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <vTaskSwitchContext+0xa4>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002464:	e03e      	b.n	80024e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <vTaskSwitchContext+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <vTaskSwitchContext+0xa8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	f1c3 031f 	rsb	r3, r3, #31
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	491e      	ldr	r1, [pc, #120]	; (80024fc <vTaskSwitchContext+0xac>)
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <vTaskSwitchContext+0x5a>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	e7fe      	b.n	80024a8 <vTaskSwitchContext+0x58>
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <vTaskSwitchContext+0xac>)
 80024b6:	4413      	add	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	3308      	adds	r3, #8
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d104      	bne.n	80024da <vTaskSwitchContext+0x8a>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <vTaskSwitchContext+0xb0>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000154 	.word	0x20000154
 80024f4:	20000140 	.word	0x20000140
 80024f8:	20000134 	.word	0x20000134
 80024fc:	20000030 	.word	0x20000030
 8002500:	2000002c 	.word	0x2000002c

08002504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800250c:	f000 f852 	bl	80025b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <prvIdleTask+0x28>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d9f9      	bls.n	800250c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <prvIdleTask+0x2c>)
 800251a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002528:	e7f0      	b.n	800250c <prvIdleTask+0x8>
 800252a:	bf00      	nop
 800252c:	20000030 	.word	0x20000030
 8002530:	e000ed04 	.word	0xe000ed04

08002534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	e00c      	b.n	800255a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <prvInitialiseTaskLists+0x60>)
 800254c:	4413      	add	r3, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fbc5 	bl	8001cde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d9ef      	bls.n	8002540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <prvInitialiseTaskLists+0x64>)
 8002562:	f7ff fbbc 	bl	8001cde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002566:	480d      	ldr	r0, [pc, #52]	; (800259c <prvInitialiseTaskLists+0x68>)
 8002568:	f7ff fbb9 	bl	8001cde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <prvInitialiseTaskLists+0x6c>)
 800256e:	f7ff fbb6 	bl	8001cde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002572:	480c      	ldr	r0, [pc, #48]	; (80025a4 <prvInitialiseTaskLists+0x70>)
 8002574:	f7ff fbb3 	bl	8001cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002578:	480b      	ldr	r0, [pc, #44]	; (80025a8 <prvInitialiseTaskLists+0x74>)
 800257a:	f7ff fbb0 	bl	8001cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <prvInitialiseTaskLists+0x78>)
 8002580:	4a05      	ldr	r2, [pc, #20]	; (8002598 <prvInitialiseTaskLists+0x64>)
 8002582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <prvInitialiseTaskLists+0x7c>)
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <prvInitialiseTaskLists+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000030 	.word	0x20000030
 8002598:	200000bc 	.word	0x200000bc
 800259c:	200000d0 	.word	0x200000d0
 80025a0:	200000ec 	.word	0x200000ec
 80025a4:	20000100 	.word	0x20000100
 80025a8:	20000118 	.word	0x20000118
 80025ac:	200000e4 	.word	0x200000e4
 80025b0:	200000e8 	.word	0x200000e8

080025b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025ba:	e019      	b.n	80025f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80025bc:	f000 f9ac 	bl	8002918 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <prvCheckTasksWaitingTermination+0x4c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fc0c 	bl	8001dea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <prvCheckTasksWaitingTermination+0x50>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <prvCheckTasksWaitingTermination+0x50>)
 80025da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <prvCheckTasksWaitingTermination+0x54>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <prvCheckTasksWaitingTermination+0x54>)
 80025e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80025e6:	f000 f9c5 	bl	8002974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f80e 	bl	800260c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <prvCheckTasksWaitingTermination+0x54>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e1      	bne.n	80025bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000100 	.word	0x20000100
 8002604:	2000012c 	.word	0x2000012c
 8002608:	20000114 	.word	0x20000114

0800260c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4618      	mov	r0, r3
 800261a:	f000 faf9 	bl	8002c10 <vPortFree>
			vPortFree( pxTCB );
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 faf6 	bl	8002c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <prvResetNextTaskUnblockTime+0x40>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <prvResetNextTaskUnblockTime+0x14>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <prvResetNextTaskUnblockTime+0x16>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <prvResetNextTaskUnblockTime+0x44>)
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800264e:	e008      	b.n	8002662 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <prvResetNextTaskUnblockTime+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <prvResetNextTaskUnblockTime+0x44>)
 8002660:	6013      	str	r3, [r2, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	200000e4 	.word	0x200000e4
 8002670:	2000014c 	.word	0x2000014c

08002674 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3304      	adds	r3, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fbad 	bl	8001dea <uxListRemove>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10b      	bne.n	80026ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	2201      	movs	r2, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <prvAddCurrentTaskToDelayedList+0xb8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4013      	ands	r3, r2
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <prvAddCurrentTaskToDelayedList+0xb8>)
 80026ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d10a      	bne.n	80026cc <prvAddCurrentTaskToDelayedList+0x58>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	481a      	ldr	r0, [pc, #104]	; (8002730 <prvAddCurrentTaskToDelayedList+0xbc>)
 80026c6:	f7ff fb35 	bl	8001d34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80026ca:	e026      	b.n	800271a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d209      	bcs.n	80026f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <prvAddCurrentTaskToDelayedList+0xc0>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3304      	adds	r3, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff fb42 	bl	8001d7a <vListInsert>
}
 80026f6:	e010      	b.n	800271a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3304      	adds	r3, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4610      	mov	r0, r2
 8002706:	f7ff fb38 	bl	8001d7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <prvAddCurrentTaskToDelayedList+0xc8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	d202      	bcs.n	800271a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6013      	str	r3, [r2, #0]
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000130 	.word	0x20000130
 8002728:	2000002c 	.word	0x2000002c
 800272c:	20000134 	.word	0x20000134
 8002730:	20000118 	.word	0x20000118
 8002734:	200000e8 	.word	0x200000e8
 8002738:	200000e4 	.word	0x200000e4
 800273c:	2000014c 	.word	0x2000014c

08002740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b04      	subs	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b04      	subs	r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0201 	bic.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b04      	subs	r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002770:	4a08      	ldr	r2, [pc, #32]	; (8002794 <pxPortInitialiseStack+0x54>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b14      	subs	r3, #20
 800277a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3b20      	subs	r3, #32
 8002786:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002788:	68fb      	ldr	r3, [r7, #12]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	08002799 	.word	0x08002799

08002798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <prvTaskExitError+0x4c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d009      	beq.n	80027c0 <prvTaskExitError+0x28>
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e7fe      	b.n	80027be <prvTaskExitError+0x26>
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027d2:	bf00      	nop
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0fc      	beq.n	80027d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000008 	.word	0x20000008
	...

080027f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <pxCurrentTCBConst2>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027fa:	f380 8809 	msr	PSP, r0
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f380 8811 	msr	BASEPRI, r0
 800280a:	f04e 0e0d 	orr.w	lr, lr, #13
 800280e:	4770      	bx	lr

08002810 <pxCurrentTCBConst2>:
 8002810:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop

08002818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002818:	4806      	ldr	r0, [pc, #24]	; (8002834 <prvPortStartFirstTask+0x1c>)
 800281a:	6800      	ldr	r0, [r0, #0]
 800281c:	6800      	ldr	r0, [r0, #0]
 800281e:	f380 8808 	msr	MSP, r0
 8002822:	b662      	cpsie	i
 8002824:	b661      	cpsie	f
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	df00      	svc	0
 8002830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002832:	bf00      	nop
 8002834:	e000ed08 	.word	0xe000ed08

08002838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <xPortStartScheduler+0xcc>)
 8002840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <xPortStartScheduler+0xd0>)
 8002864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <xPortStartScheduler+0xd4>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800286c:	e009      	b.n	8002882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <xPortStartScheduler+0xd4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <xPortStartScheduler+0xd4>)
 8002876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d0ef      	beq.n	800286e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <xPortStartScheduler+0xd4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	d009      	beq.n	80028ae <xPortStartScheduler+0x76>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	e7fe      	b.n	80028ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <xPortStartScheduler+0xd4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <xPortStartScheduler+0xd4>)
 80028b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <xPortStartScheduler+0xd4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <xPortStartScheduler+0xd4>)
 80028c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <xPortStartScheduler+0xd8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <xPortStartScheduler+0xd8>)
 80028d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <xPortStartScheduler+0xd8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <xPortStartScheduler+0xd8>)
 80028de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028e4:	f000 f8b0 	bl	8002a48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <xPortStartScheduler+0xdc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028ee:	f7ff ff93 	bl	8002818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80028f2:	f7ff fdad 	bl	8002450 <vTaskSwitchContext>
	prvTaskExitError();
 80028f6:	f7ff ff4f 	bl	8002798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e000e400 	.word	0xe000e400
 8002908:	20000158 	.word	0x20000158
 800290c:	2000015c 	.word	0x2000015c
 8002910:	e000ed20 	.word	0xe000ed20
 8002914:	20000008 	.word	0x20000008

08002918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <vPortEnterCritical+0x54>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a0d      	ldr	r2, [pc, #52]	; (800296c <vPortEnterCritical+0x54>)
 8002938:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <vPortEnterCritical+0x54>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10e      	bne.n	8002960 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <vPortEnterCritical+0x58>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <vPortEnterCritical+0x48>
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	e7fe      	b.n	800295e <vPortEnterCritical+0x46>
	}
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000008 	.word	0x20000008
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <vPortExitCritical+0x48>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <vPortExitCritical+0x22>
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	e7fe      	b.n	8002994 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <vPortExitCritical+0x48>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <vPortExitCritical+0x48>)
 800299e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <vPortExitCritical+0x48>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <vPortExitCritical+0x3e>
 80029a8:	2300      	movs	r3, #0
 80029aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000008 	.word	0x20000008

080029c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029c0:	f3ef 8009 	mrs	r0, PSP
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <pxCurrentTCBConst>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029d0:	6010      	str	r0, [r2, #0]
 80029d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80029d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029da:	f380 8811 	msr	BASEPRI, r0
 80029de:	f7ff fd37 	bl	8002450 <vTaskSwitchContext>
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f380 8811 	msr	BASEPRI, r0
 80029ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	6808      	ldr	r0, [r1, #0]
 80029f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029f6:	f380 8809 	msr	PSP, r0
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	4770      	bx	lr

08002a00 <pxCurrentTCBConst>:
 8002a00:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop

08002a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a20:	f7ff fc5a 	bl	80022d8 <xTaskIncrementTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <SysTick_Handler+0x3c>)
 8002a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	2300      	movs	r3, #0
 8002a34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <vPortSetupTimerInterrupt+0x30>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <vPortSetupTimerInterrupt+0x34>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <vPortSetupTimerInterrupt+0x38>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <vPortSetupTimerInterrupt+0x3c>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <vPortSetupTimerInterrupt+0x40>)
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <vPortSetupTimerInterrupt+0x30>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	e000e010 	.word	0xe000e010
 8002a7c:	e000e018 	.word	0xe000e018
 8002a80:	2000000c 	.word	0x2000000c
 8002a84:	10624dd3 	.word	0x10624dd3
 8002a88:	e000e014 	.word	0xe000e014

08002a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a98:	f7ff fb74 	bl	8002184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <pvPortMalloc+0x170>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002aa4:	f000 f90c 	bl	8002cc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <pvPortMalloc+0x174>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 808c 	bne.w	8002bce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01c      	beq.n	8002af6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002abc:	2208      	movs	r2, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f023 0307 	bic.w	r3, r3, #7
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <pvPortMalloc+0x6a>
	__asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e7fe      	b.n	8002af4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d068      	beq.n	8002bce <pvPortMalloc+0x142>
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <pvPortMalloc+0x178>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d863      	bhi.n	8002bce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b06:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <pvPortMalloc+0x17c>)
 8002b08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <pvPortMalloc+0x17c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b10:	e004      	b.n	8002b1c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d903      	bls.n	8002b2e <pvPortMalloc+0xa2>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f1      	bne.n	8002b12 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <pvPortMalloc+0x170>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d04a      	beq.n	8002bce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4413      	add	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad2      	subs	r2, r2, r3
 8002b52:	2308      	movs	r3, #8
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d91e      	bls.n	8002b98 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <pvPortMalloc+0xf4>
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e7fe      	b.n	8002b7e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b92:	69b8      	ldr	r0, [r7, #24]
 8002b94:	f000 f8f6 	bl	8002d84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <pvPortMalloc+0x178>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <pvPortMalloc+0x178>)
 8002ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <pvPortMalloc+0x178>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <pvPortMalloc+0x180>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d203      	bcs.n	8002bba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <pvPortMalloc+0x178>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <pvPortMalloc+0x180>)
 8002bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <pvPortMalloc+0x174>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bce:	f7ff fae7 	bl	80021a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <pvPortMalloc+0x164>
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e7fe      	b.n	8002bee <pvPortMalloc+0x162>
	return pvReturn;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000d68 	.word	0x20000d68
 8002c00:	20000d74 	.word	0x20000d74
 8002c04:	20000d6c 	.word	0x20000d6c
 8002c08:	20000d60 	.word	0x20000d60
 8002c0c:	20000d70 	.word	0x20000d70

08002c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d046      	beq.n	8002cb0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c22:	2308      	movs	r3, #8
 8002c24:	425b      	negs	r3, r3
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <vPortFree+0xa8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <vPortFree+0x42>
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e7fe      	b.n	8002c50 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <vPortFree+0x5e>
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e7fe      	b.n	8002c6c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <vPortFree+0xa8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d115      	bne.n	8002cb0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <vPortFree+0xa8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c94:	f7ff fa76 	bl	8002184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <vPortFree+0xac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <vPortFree+0xac>)
 8002ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ca6:	6938      	ldr	r0, [r7, #16]
 8002ca8:	f000 f86c 	bl	8002d84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002cac:	f7ff fa78 	bl	80021a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000d74 	.word	0x20000d74
 8002cbc:	20000d6c 	.word	0x20000d6c

08002cc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <prvHeapInit+0xac>)
 8002cce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3307      	adds	r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <prvHeapInit+0xac>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <prvHeapInit+0xb0>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <prvHeapInit+0xb0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <prvHeapInit+0xb4>)
 8002d20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <prvHeapInit+0xb4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <prvHeapInit+0xb4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <prvHeapInit+0xb4>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <prvHeapInit+0xb8>)
 8002d4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <prvHeapInit+0xbc>)
 8002d56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <prvHeapInit+0xc0>)
 8002d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000160 	.word	0x20000160
 8002d70:	20000d60 	.word	0x20000d60
 8002d74:	20000d68 	.word	0x20000d68
 8002d78:	20000d70 	.word	0x20000d70
 8002d7c:	20000d6c 	.word	0x20000d6c
 8002d80:	20000d74 	.word	0x20000d74

08002d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <prvInsertBlockIntoFreeList+0xa8>)
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e002      	b.n	8002d98 <prvInsertBlockIntoFreeList+0x14>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d8f7      	bhi.n	8002d92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4413      	add	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d108      	bne.n	8002dc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d118      	bne.n	8002e0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <prvInsertBlockIntoFreeList+0xac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d00d      	beq.n	8002e02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e008      	b.n	8002e14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <prvInsertBlockIntoFreeList+0xac>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e003      	b.n	8002e14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d002      	beq.n	8002e22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	20000d60 	.word	0x20000d60
 8002e30:	20000d68 	.word	0x20000d68

08002e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b090      	sub	sp, #64	; 0x40
 8002e38:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e3a:	f7fd f9e9 	bl	8000210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3e:	f000 f847 	bl	8002ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e42:	f000 f8fd 	bl	8003040 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002e46:	f000 f885 	bl	8002f54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002e4a:	f000 f8cf 	bl	8002fec <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <main+0x84>)
 8002e50:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002e54:	461d      	mov	r5, r3
 8002e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5a:	682b      	ldr	r3, [r5, #0]
 8002e5c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe feff 	bl	8001c68 <osThreadCreate>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <main+0x88>)
 8002e6e:	601a      	str	r2, [r3, #0]

  /* definition and creation of vLED */
  osThreadDef(vLED, LEDTimer, osPriorityIdle, 0, 128);
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <main+0x8c>)
 8002e72:	f107 0418 	add.w	r4, r7, #24
 8002e76:	461d      	mov	r5, r3
 8002e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	6023      	str	r3, [r4, #0]
  vLEDHandle = osThreadCreate(osThread(vLED), NULL);
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe feee 	bl	8001c68 <osThreadCreate>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <main+0x90>)
 8002e90:	601a      	str	r2, [r3, #0]

  /* definition and creation of vUart */
  osThreadDef(vUart, Uart, osPriorityIdle, 0, 128);
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <main+0x94>)
 8002e94:	1d3c      	adds	r4, r7, #4
 8002e96:	461d      	mov	r5, r3
 8002e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	6023      	str	r3, [r4, #0]
  vUartHandle = osThreadCreate(osThread(vUart), NULL);
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fedf 	bl	8001c68 <osThreadCreate>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <main+0x98>)
 8002eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002eb0:	f7fe fed3 	bl	8001c5a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <main+0x80>
 8002eb6:	bf00      	nop
 8002eb8:	08003514 	.word	0x08003514
 8002ebc:	20000d7c 	.word	0x20000d7c
 8002ec0:	08003530 	.word	0x08003530
 8002ec4:	20000e04 	.word	0x20000e04
 8002ec8:	0800354c 	.word	0x0800354c
 8002ecc:	20000dc0 	.word	0x20000dc0

08002ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b090      	sub	sp, #64	; 0x40
 8002ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed6:	f107 0318 	add.w	r3, r7, #24
 8002eda:	2228      	movs	r2, #40	; 0x28
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 faea 	bl	80034b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002efa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002efc:	2301      	movs	r3, #1
 8002efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f00:	2302      	movs	r3, #2
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fc1a 	bl	800074c <HAL_RCC_OscConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8002f1e:	f000 f92b 	bl	8003178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f22:	230f      	movs	r3, #15
 8002f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f26:	2302      	movs	r3, #2
 8002f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe86 	bl	8000c4c <HAL_RCC_ClockConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002f46:	f000 f917 	bl	8003178 <Error_Handler>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3740      	adds	r7, #64	; 0x40
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f7a:	2217      	movs	r2, #23
 8002f7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f96:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002f98:	f7fd fff2 	bl	8000f80 <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002fa2:	f000 f8e9 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002fb4:	f7fe f93a 	bl	800122c <HAL_TIM_ConfigClockSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f000 f8db 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <MX_TIM2_Init+0x94>)
 8002fd0:	f7fe fb1e 	bl	8001610 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002fda:	f000 f8cd 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000dc4 	.word	0x20000dc4

08002fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <MX_USART1_UART_Init+0x50>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8002ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8003012:	220c      	movs	r2, #12
 8003014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	; (8003038 <MX_USART1_UART_Init+0x4c>)
 8003024:	f7fe fb4a 	bl	80016bc <HAL_UART_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800302e:	f000 f8a3 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000d80 	.word	0x20000d80
 800303c:	40013800 	.word	0x40013800

08003040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003054:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <MX_GPIO_Init+0x90>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <MX_GPIO_Init+0x90>)
 800305a:	f043 0320 	orr.w	r3, r3, #32
 800305e:	6193      	str	r3, [r2, #24]
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <MX_GPIO_Init+0x90>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <MX_GPIO_Init+0x90>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <MX_GPIO_Init+0x90>)
 8003072:	f043 0308 	orr.w	r3, r3, #8
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MX_GPIO_Init+0x90>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <MX_GPIO_Init+0x90>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <MX_GPIO_Init+0x90>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_GPIO_Init+0x90>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800309c:	2200      	movs	r2, #0
 800309e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a2:	480c      	ldr	r0, [pc, #48]	; (80030d4 <MX_GPIO_Init+0x94>)
 80030a4:	f7fd fb3a 	bl	800071c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2302      	movs	r3, #2
 80030b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4619      	mov	r1, r3
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <MX_GPIO_Init+0x94>)
 80030c2:	f7fd f9d1 	bl	8000468 <HAL_GPIO_Init>

}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010c00 	.word	0x40010c00

080030d8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe fde8 	bl	8001cb6 <osDelay>
 80030e6:	e7fb      	b.n	80030e0 <StartDefaultTask+0x8>

080030e8 <LEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDTimer */
void LEDTimer(void const * argument)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTimer */
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1000);
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <LEDTimer+0x34>)
 80030f8:	f7fd fb10 	bl	800071c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80030fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003100:	f7fd f8b0 	bl	8000264 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <LEDTimer+0x34>)
 800310c:	f7fd fb06 	bl	800071c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003114:	f7fd f8a6 	bl	8000264 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8003118:	e7ea      	b.n	80030f0 <LEDTimer+0x8>
 800311a:	bf00      	nop
 800311c:	40010c00 	.word	0x40010c00

08003120 <Uart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart */
void Uart(void const * argument)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart */
	uint8_t pData[]="hello world";//通过字符串数组定义“hello world”字符串
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <Uart+0x2c>)
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003138:	f7fe fdbd 	bl	8001cb6 <osDelay>
	HAL_UART_Transmit(&huart1,(uint8_t*)pData,sizeof(pData),100);//不断通过串口1发送，pData中的数据，sizeof计算pData中的字节数
 800313c:	f107 010c 	add.w	r1, r7, #12
 8003140:	2364      	movs	r3, #100	; 0x64
 8003142:	220c      	movs	r2, #12
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <Uart+0x30>)
 8003146:	f7fe fb06 	bl	8001756 <HAL_UART_Transmit>
    osDelay(1000);
 800314a:	e7f3      	b.n	8003134 <Uart+0x14>
 800314c:	08003560 	.word	0x08003560
 8003150:	20000d80 	.word	0x20000d80

08003154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003166:	f7fd f861 	bl	800022c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40000400 	.word	0x40000400

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_MspInit+0x68>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_MspInit+0x68>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6193      	str	r3, [r2, #24]
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_MspInit+0x68>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_MspInit+0x68>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_MspInit+0x68>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_MspInit+0x68>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	210f      	movs	r1, #15
 80031be:	f06f 0001 	mvn.w	r0, #1
 80031c2:	f7fd f926 	bl	8000412 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_MspInit+0x6c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_MspInit+0x6c>)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000

080031f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d10b      	bne.n	800321e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_TIM_Base_MspInit+0x34>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_TIM_Base_MspInit+0x34>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	61d3      	str	r3, [r2, #28]
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_TIM_Base_MspInit+0x34>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_UART_MspInit+0x8c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d131      	bne.n	80032b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_UART_MspInit+0x90>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_UART_MspInit+0x90>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_UART_MspInit+0x90>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800327c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003280:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003286:	2303      	movs	r3, #3
 8003288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0310 	add.w	r3, r7, #16
 800328e:	4619      	mov	r1, r3
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_UART_MspInit+0x94>)
 8003292:	f7fd f8e9 	bl	8000468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	4619      	mov	r1, r3
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_UART_MspInit+0x94>)
 80032ac:	f7fd f8dc 	bl	8000468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010800 	.word	0x40010800

080032c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	201d      	movs	r0, #29
 80032da:	f7fd f89a 	bl	8000412 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80032de:	201d      	movs	r0, #29
 80032e0:	f7fd f8b3 	bl	800044a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_InitTick+0x9c>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_InitTick+0x9c>)
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	61d3      	str	r3, [r2, #28]
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_InitTick+0x9c>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032fc:	f107 0210 	add.w	r2, r7, #16
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fdf0 	bl	8000eec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800330c:	f7fd fdc6 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 8003310:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	4a13      	ldr	r2, [pc, #76]	; (8003364 <HAL_InitTick+0xa0>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	3b01      	subs	r3, #1
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_InitTick+0xa4>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_InitTick+0xa8>)
 8003324:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_InitTick+0xa4>)
 8003328:	f240 32e7 	movw	r2, #999	; 0x3e7
 800332c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800332e:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <HAL_InitTick+0xa4>)
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_InitTick+0xa4>)
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_InitTick+0xa4>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <HAL_InitTick+0xa4>)
 8003342:	f7fd fe1d 	bl	8000f80 <HAL_TIM_Base_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800334c:	4806      	ldr	r0, [pc, #24]	; (8003368 <HAL_InitTick+0xa4>)
 800334e:	f7fd fe42 	bl	8000fd6 <HAL_TIM_Base_Start_IT>
 8003352:	4603      	mov	r3, r0
 8003354:	e000      	b.n	8003358 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3730      	adds	r7, #48	; 0x30
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	431bde83 	.word	0x431bde83
 8003368:	20000e08 	.word	0x20000e08
 800336c:	40000400 	.word	0x40000400

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <HardFault_Handler+0x4>

08003382 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003386:	e7fe      	b.n	8003386 <MemManage_Handler+0x4>

08003388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338c:	e7fe      	b.n	800338c <BusFault_Handler+0x4>

0800338e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <UsageFault_Handler+0x4>

08003394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <TIM3_IRQHandler+0x10>)
 80033a6:	f7fd fe39 	bl	800101c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000e08 	.word	0x20000e08

080033b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <SystemInit+0x64>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <SystemInit+0x64>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <SystemInit+0x64>)
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4913      	ldr	r1, [pc, #76]	; (8003418 <SystemInit+0x64>)
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <SystemInit+0x68>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <SystemInit+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a10      	ldr	r2, [pc, #64]	; (8003418 <SystemInit+0x64>)
 80033d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <SystemInit+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <SystemInit+0x64>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <SystemInit+0x64>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <SystemInit+0x64>)
 80033f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <SystemInit+0x64>)
 80033fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033fe:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <SystemInit+0x64>)
 8003402:	2200      	movs	r2, #0
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <SystemInit+0x6c>)
 8003408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800340c:	609a      	str	r2, [r3, #8]
#endif 
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	f8ff0000 	.word	0xf8ff0000
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003424:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003426:	e003      	b.n	8003430 <LoopCopyDataInit>

08003428 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800342a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800342c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800342e:	3104      	adds	r1, #4

08003430 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003430:	480a      	ldr	r0, [pc, #40]	; (800345c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003434:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003436:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003438:	d3f6      	bcc.n	8003428 <CopyDataInit>
  ldr r2, =_sbss
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800343c:	e002      	b.n	8003444 <LoopFillZerobss>

0800343e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003440:	f842 3b04 	str.w	r3, [r2], #4

08003444 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003446:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003448:	d3f9      	bcc.n	800343e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800344a:	f7ff ffb3 	bl	80033b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800344e:	f000 f80f 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003452:	f7ff fcef 	bl	8002e34 <main>
  bx lr
 8003456:	4770      	bx	lr
  ldr r3, =_sidata
 8003458:	0800358c 	.word	0x0800358c
  ldr r0, =_sdata
 800345c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003460:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003464:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003468:	20000e48 	.word	0x20000e48

0800346c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800346c:	e7fe      	b.n	800346c <ADC1_IRQHandler>
	...

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	2500      	movs	r5, #0
 8003474:	4e0c      	ldr	r6, [pc, #48]	; (80034a8 <__libc_init_array+0x38>)
 8003476:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <__libc_init_array+0x3c>)
 8003478:	1ba4      	subs	r4, r4, r6
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	42a5      	cmp	r5, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	f000 f822 	bl	80034c8 <_init>
 8003484:	2500      	movs	r5, #0
 8003486:	4e0a      	ldr	r6, [pc, #40]	; (80034b0 <__libc_init_array+0x40>)
 8003488:	4c0a      	ldr	r4, [pc, #40]	; (80034b4 <__libc_init_array+0x44>)
 800348a:	1ba4      	subs	r4, r4, r6
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	42a5      	cmp	r5, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003498:	4798      	blx	r3
 800349a:	3501      	adds	r5, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a2:	4798      	blx	r3
 80034a4:	3501      	adds	r5, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08003584 	.word	0x08003584
 80034ac:	08003584 	.word	0x08003584
 80034b0:	08003584 	.word	0x08003584
 80034b4:	08003588 	.word	0x08003588

080034b8 <memset>:
 80034b8:	4603      	mov	r3, r0
 80034ba:	4402      	add	r2, r0
 80034bc:	4293      	cmp	r3, r2
 80034be:	d100      	bne.n	80034c2 <memset+0xa>
 80034c0:	4770      	bx	lr
 80034c2:	f803 1b01 	strb.w	r1, [r3], #1
 80034c6:	e7f9      	b.n	80034bc <memset+0x4>

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
